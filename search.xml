<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>时序数据库（TSDB）- influxdb</title>
    <url>/2020/10/28/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88TSDB%EF%BC%89-influxdb/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-什么是时序数据库"><a href="#1-1-什么是时序数据库" class="headerlink" title="1.1.什么是时序数据库"></a>1.1.什么是时序数据库</h2><p>​        首先介绍一下什么是时序数据，时序数据是基于时间的一系列的数据。在有时间的坐标中将这些数据点连成线，往过去看可以做成多纬度报表，揭示其趋势性、规律性、异常性;往未来看可以做大数据分析，机器学习，实现预测和预警。</p>
<p>​        时序数据库就是存放时序数据的数据库，并且需要支持时序数据的快速写入、持久化、多纬度的聚合查询等基本功能。</p>
<p>​        对比传统数据库仅仅记录了数据的当前值，时序数据库则记录了所有的历史数据。同时时序数据的查询也总是会带上时间作为过滤条件。</p>
<h2 id="1-2-时序数据库的特点"><a href="#1-2-时序数据库的特点" class="headerlink" title="1.2.时序数据库的特点"></a>1.2.时序数据库的特点</h2><h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><ul>
<li>写入平稳、持续、高并发高吞吐：时序数据的写入是比较平稳的，这点与应用数据不同，应用数据通常与应用的访问量成正比，而应用的访问量通常存在波峰波谷。时序数据的产生通常是以一个固定的时间频率产生，不会受其他因素的制约，其数据生成的速度是相对比较平稳的。</li>
<li>写多读少：时序数据上95%-99%的操作都是写操作，是典型的写多读少的数据。这与其数据特性相关，例如监控数据，你的监控项可能很多，但是你真正去读的可能比较少，通常只会关心几个特定的关键指标或者在特定的场景下才会去读数据。</li>
<li>实时写入最近生成的数据，无更新：时序数据的写入是实时的，且每次写入都是最近生成的数据，这与其数据生成的特点相关，因为其数据生成是随着时间推进的，而新生成的数据会实时的进行写入。数据写入无更新，在时间这个维度上，随着时间的推进，每次数据都是新数据，不会存在旧数据的更新，不过不排除人为的对数据做订正。</li>
</ul>
<h3 id="数据查询和分析"><a href="#数据查询和分析" class="headerlink" title="数据查询和分析"></a>数据查询和分析</h3><ul>
<li>按时间范围读取：通常来说，你不会去关心某个特定点的数据，而是一段时间的数据。</li>
<li>最近的数据被读取的概率高</li>
<li>历史数据粗粒度查询的概率搞</li>
<li>多种精度查询</li>
<li>多维度分析</li>
</ul>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ul>
<li><p>数据量大：拿监控数据来举例，如果我们采集的监控数据的时间间隔是1s，那一个监控项每天会产生86400个数据点，若有10000个监控项，则一天就会产生864000000个数据点。在物联网场景下，这个数字会更大。整个数据的规模，是TB甚至是PB级的。</p>
</li>
<li><p>冷热分明：时序数据有非常典型的冷热特征，越是历史的数据，被查询和分析的概率越低。</p>
</li>
<li><p>具有时效性：时序数据具有时效性，数据通常会有一个保存周期，超过这个保存周期的数据可以认为是失效的，可以被回收。一方面是因为越是历史的数据，可利用的价值越低；另一方面是为了节省存储成本，低价值的数据可以被清理。</p>
</li>
<li><p>多精度数据存储：在查询的特点里提到时序数据出于存储成本和查询效率的考虑，会需要一个多精度的查询，同样也需要一个多精度数据的存储。</p>
</li>
</ul>
<h2 id="1-3-时序数据库适合的场景"><a href="#1-3-时序数据库适合的场景" class="headerlink" title="1.3.时序数据库适合的场景"></a>1.3.时序数据库适合的场景</h2><p>​        所有有时序数据产生，并且需要展现其历史趋势、周期规律、异常性的，进一步对未来做出预测分析的，都是时序数据库适合的场景。</p>
<h2 id="1-4-时序数据库的数据模型"><a href="#1-4-时序数据库的数据模型" class="headerlink" title="1.4.时序数据库的数据模型"></a>1.4.时序数据库的数据模型</h2><p>时间序列数据可以分成两部分：</p>
<ul>
<li>序列 ：就是标识符（维度），主要的目的是方便进行搜索和筛选</li>
<li><p>数据点：时间戳和数值构成的数组</p>
<ul>
<li>行存：一个数组包含多个点，如 [{t: 2017-09-03-21:24:44, v: 0.1002}, {t: 2017-09-03-21:24:45, v: 0.1012}]</li>
<li>列存：两个数组，一个存时间戳，一个存数值，如[ 2017-09-03-21:24:44, 2017-09-03-21:24:45], [0.1002,  0.1012]</li>
</ul>
<p><strong>一般情况下：列存能有更好的压缩率和查询性能</strong></p>
</li>
</ul>
<h2 id="1-5-时序数据库的基本概念"><a href="#1-5-时序数据库的基本概念" class="headerlink" title="1.5.时序数据库的基本概念"></a>1.5.时序数据库的基本概念</h2><p><strong>metric</strong>：度量，相当于关系型数据库中的table。</p>
<p><strong>data point:</strong> 数据点，相当于关系型数据库中的row。</p>
<p><strong>timestamp</strong>：时间戳，代表数据点产生的时间。</p>
<p><strong>field</strong>: 度量下的不同字段。比如位置这个度量具有经度和纬度两个field。一般情况下存放的是会随着时间戳的变化而变化的数据。</p>
<p><strong>tag</strong>: 标签，或者附加信息。一般存放的是并不随着时间戳变化的属性信息。timestamp加上所有的tags可以认为是table的primary key。</p>
<h1 id="二、influxDB简介"><a href="#二、influxDB简介" class="headerlink" title="二、influxDB简介"></a>二、influxDB简介</h1><p>influxDB在Github上的地址：<a href="https://github.com/influxdata/influxdb">https://github.com/influxdata/influxdb</a></p>
<h2 id="2-1-influxDB是什么"><a href="#2-1-influxDB是什么" class="headerlink" title="2.1.influxDB是什么"></a>2.1.influxDB是什么</h2><p>​        <strong>InfluxDB</strong>是一个由<a href="https://www.influxdata.com/">InfluxData</a>开发的开源时序型数据库。它由Go写成，着力于高性能地查询与存储时序型数据。InfluxDB被广泛应用于存储系统的监控数据，IoT(物联网)行业的实时数据等场景。</p>
<h2 id="2-2-influxDB的特点"><a href="#2-2-influxDB的特点" class="headerlink" title="2.2.influxDB的特点"></a>2.2.influxDB的特点</h2><ul>
<li>InfluxDB在技术实现上充分利用了Go语言的特性，无需任何外部依赖即可独立部署。</li>
<li>InfluxDB提供了一个类似于SQL的查询语言并且一系列内置函数方便用户进行数据查询。</li>
<li>InfluxDB存储的数据从逻辑上由 <strong>Measurement</strong>, <strong>tag组</strong>以及 <strong>field组</strong>以及一个<strong>时间戳</strong>组成的：<ul>
<li>Measurement： 由一个字符串表示该条记录对应的含义。比如它可以是监控数据”cpu_load”，也可以是测量数据”average_temperature”</li>
<li>tag组： 由一组键值对组成，表示的是该条记录的一系列属性信息。同样的measurement数据所拥有的tag组不一定相同，它是无模式的(Schema-free)。tag信息是默认被索引的。</li>
<li>field组：也是由一组键值对组成，表示的是该条记录具体的value信息(有名称)。field组中可定义的value类型包括：64位整型，64位浮点型，字符串以及布尔型。Field信息是无法被索引的。</li>
<li>时间戳：就是该条记录的时间属性。如果插入数据时没有明确指定时间戳，则默认存储在数据库中的时间戳则为该条记录的入库时间。</li>
</ul>
</li>
<li>InfluxDB支持基于HTTP的数据插入与查询。同时也接受直接基于TCP或UDP协议的连接。</li>
<li>InfluxDB允许用户定义数据保存策略(Retention Policies)来实现对存储超过指定时间的数据进行删除或者降采样。</li>
</ul>
<h2 id="2-3-influxDB的关键概念"><a href="#2-3-influxDB的关键概念" class="headerlink" title="2.3.influxDB的关键概念"></a>2.3.influxDB的关键概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>InfluxDB 和传统数据库（如：MySQL）的一些区别</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">InfluxDB</th>
<th style="text-align:center">传统数据库中的概念</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">database</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">measurement</td>
<td style="text-align:center">数据库中的表</td>
</tr>
<tr>
<td style="text-align:center">points</td>
<td style="text-align:center">表里面的一行数据</td>
</tr>
</tbody>
</table>
</div>
<h3 id="特有概念"><a href="#特有概念" class="headerlink" title="特有概念"></a>特有概念</h3><ol>
<li><p>tag–标签，在 InfluxDB 中，tag 是一个非常重要的部分，表名+tag 一起作为数据库的索引，是“key-value”的形式</p>
</li>
<li><p>field–数据，field 主要是用来存放数据的部分，也是“key-value”的形式</p>
</li>
<li><p>timestamp–时间戳，作为时序型数据库，时间戳是 InfluxDB 中最重要的部分，在插入数据时可以自己指定也可留空让系统指定</p>
<p> <strong>说明：在插入新数据时，tag、field 和 timestamp 之间用空格分隔</strong></p>
</li>
<li><p>series–序列，所有在数据库中的数据，都需要通过图表来展示，而这个 series 表示这个表里面的数据，可以在图表上画成几条线。具体可以通过 <code>SHOW SERIES FROM &quot;表名&quot;</code> 进行查询</p>
</li>
<li><p>Retention policy–数据保留策略，可以定义数据保留的时长，每个数据库可以有多个数据保留策略，但只能有一个默认策略</p>
</li>
<li><p>Point–点，表示每个表里某个时刻的某个条件下的一个 field 的数据，因为体现在图表上就是一个点，于是将其称为 point。Point 由时间戳（time）、数据（field）、标签（tags）组成</p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Point 属性</th>
<th style="text-align:center">传统数据库中的概念</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:center">每个数据记录时间，是数据库中的主索引 (会自动生成)</td>
</tr>
<tr>
<td style="text-align:center">fields</td>
<td style="text-align:center">表中的列（没有索引的属性）也就是记录的值：温度， 湿度</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">表中的索引：地区，海拔</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-4-influxDB端口"><a href="#2-4-influxDB端口" class="headerlink" title="2.4.influxDB端口"></a>2.4.influxDB端口</h2><ul>
<li>8083：Web admin 管理服务的端口, <a href="http://localhost:8083/">http://localhost:8083</a></li>
<li>8086：HTTP API 的端口</li>
<li>8088：集群端口</li>
</ul>
<h1 id="三、influxDB安装"><a href="#三、influxDB安装" class="headerlink" title="三、influxDB安装"></a>三、influxDB安装</h1><h2 id="3-1-Linux上安装"><a href="#3-1-Linux上安装" class="headerlink" title="3.1.Linux上安装"></a>3.1.Linux上安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.influxdata.com&#x2F;influxdb&#x2F;releases&#x2F;influxdb-1.8.3.x86_64.rpm</span><br><span class="line"></span><br><span class="line">sudo yum localinstall influxdb-1.8.3.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="3-2-Windows上安装"><a href="#3-2-Windows上安装" class="headerlink" title="3.2.Windows上安装"></a>3.2.Windows上安装</h2><p><a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip">下载地址</a>:<a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip">https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip</a></p>
<h2 id="3-3-docker上安装"><a href="#3-3-docker上安装" class="headerlink" title="3.3.docker上安装"></a>3.3.docker上安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull influxdb</span><br></pre></td></tr></table></figure>
<h1 id="四、influxDB基本使用（以Windows为例）"><a href="#四、influxDB基本使用（以Windows为例）" class="headerlink" title="四、influxDB基本使用（以Windows为例）"></a>四、influxDB基本使用（以Windows为例）</h1><h2 id="4-1-启动influxDB"><a href="#4-1-启动influxDB" class="headerlink" title="4.1.启动influxDB"></a>4.1.启动influxDB</h2><ol>
<li><p>打开cmd界面</p>
</li>
<li><p>进入到influxDB的文件夹目录</p>
</li>
<li><p>输入:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">influxd.exe -config influxdb.conf</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-2-打开客户端"><a href="#4-2-打开客户端" class="headerlink" title="4.2.打开客户端"></a>4.2.打开客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">influx.exe -port 8081</span><br></pre></td></tr></table></figure>
<p>如果说没有更改过influx的config中的端口的话，后面的-port不用加，如果修改过端口，则需要后面指定监听端口启动</p>
<h2 id="4-3-显示用户"><a href="#4-3-显示用户" class="headerlink" title="4.3.显示用户"></a>4.3.显示用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure>
<h2 id="4-4-创建用户"><a href="#4-4-创建用户" class="headerlink" title="4.4.创建用户"></a>4.4.创建用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &quot;username&quot; with password &#39;password&#39;</span><br></pre></td></tr></table></figure>
<h2 id="4-5-赋予管理员权限"><a href="#4-5-赋予管理员权限" class="headerlink" title="4.5.赋予管理员权限"></a>4.5.赋予管理员权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges to username</span><br></pre></td></tr></table></figure>
<h2 id="4-6-创建管理员权限用户"><a href="#4-6-创建管理员权限用户" class="headerlink" title="4.6.创建管理员权限用户"></a>4.6.创建管理员权限用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &quot;username&quot; with password &#39;password&#39; with all privileges</span><br></pre></td></tr></table></figure>
<h2 id="4-7-修改用户密码"><a href="#4-7-修改用户密码" class="headerlink" title="4.7.修改用户密码"></a>4.7.修改用户密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for username &#x3D; &quot;password&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-8-取消权限"><a href="#4-8-取消权限" class="headerlink" title="4.8.取消权限"></a>4.8.取消权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke all on mydb from username</span><br></pre></td></tr></table></figure>
<h2 id="4-9-查看权限"><a href="#4-9-查看权限" class="headerlink" title="4.9.查看权限"></a>4.9.查看权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for username</span><br></pre></td></tr></table></figure>
<h2 id="4-10-删除用户"><a href="#4-10-删除用户" class="headerlink" title="4.10.删除用户"></a>4.10.删除用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &quot;username&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-11-登录账号"><a href="#4-11-登录账号" class="headerlink" title="4.11.登录账号"></a>4.11.登录账号</h2><p><strong>认证策略需要在配置文件中打开[http]下的auth-enabled = true</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth</span><br><span class="line">然后输入账号密码</span><br></pre></td></tr></table></figure>
<h2 id="4-12-查看数据库"><a href="#4-12-查看数据库" class="headerlink" title="4.12.查看数据库"></a>4.12.查看数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure>
<h2 id="4-13-创建数据库"><a href="#4-13-创建数据库" class="headerlink" title="4.13.创建数据库"></a>4.13.创建数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database &quot;testDB&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-14-使用数据库"><a href="#4-14-使用数据库" class="headerlink" title="4.14.使用数据库"></a>4.14.使用数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use testDB</span><br></pre></td></tr></table></figure>
<h2 id="4-15-插入数据"><a href="#4-15-插入数据" class="headerlink" title="4.15.插入数据"></a>4.15.插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert weather,altitude&#x3D;5000,area&#x3D;北 humidity&#x3D;3,temperature&#x3D;23 1599630284710054000</span><br></pre></td></tr></table></figure>
<ul>
<li>measurement(表名): weather</li>
<li>tags（类似索引）: altitude、area。是String类型</li>
<li>fields: temperature、humidity。是字符串、数字类型</li>
<li>influx默认时间是纳秒（ns），即19位时间戳</li>
</ul>
<h2 id="4-16-查看表名"><a href="#4-16-查看表名" class="headerlink" title="4.16.查看表名"></a>4.16.查看表名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show measurements</span><br></pre></td></tr></table></figure>
<h2 id="4-17-查看数据"><a href="#4-17-查看数据" class="headerlink" title="4.17.查看数据"></a>4.17.查看数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 操作与mysql类似</span><br><span class="line">select * from weather where time &gt;&#x3D;1599630284710ms</span><br><span class="line"></span><br><span class="line">select * from weather where time &gt;&#x3D; &#39;2018-11-23 14:30:39&#39; and time &lt;&#x3D; &#39;2018-11-23 14:32:32&#39; tz(&#39;Asia&#x2F;Shanghai&#39;)</span><br><span class="line"></span><br><span class="line"># 涉及时间查询使用时间戳，避免时区问题</span><br></pre></td></tr></table></figure>
<h2 id="4-18-查看策略"><a href="#4-18-查看策略" class="headerlink" title="4.18.查看策略"></a>4.18.查看策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show retention policies on &#39;weather&#39;</span><br></pre></td></tr></table></figure>
<h2 id="4-19-创建策略"><a href="#4-19-创建策略" class="headerlink" title="4.19.创建策略"></a>4.19.创建策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create retention policy &quot;rp_test&quot; on &quot;testDB&quot; duration 30d replication 1 default</span><br></pre></td></tr></table></figure>
<ul>
<li><p>rp_test: 策略名</p>
</li>
<li><p>testDB：数据库名</p>
</li>
<li><p>30d：数据保存时间，30天之前的数据将被删除</p>
</li>
<li><p>replication 1: 副本个数</p>
</li>
<li><p>default: 设为默认策略</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>duration</strong></th>
<th><strong>shardGroupDuration</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;2days</td>
<td>1hour</td>
</tr>
<tr>
<td>&gt;=2days and &lt;=6months</td>
<td>1day</td>
</tr>
<tr>
<td>&gt;6months</td>
<td>7days</td>
</tr>
</tbody>
</table>
</div>
<h2 id="4-20-修改策略"><a href="#4-20-修改策略" class="headerlink" title="4.20.修改策略"></a>4.20.修改策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter retention policy &quot;rp_test&quot; on &quot;testDB&quot; duration 1d replication 1</span><br></pre></td></tr></table></figure>
<h2 id="4-21-删除策略"><a href="#4-21-删除策略" class="headerlink" title="4.21.删除策略"></a>4.21.删除策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop retention policy &quot; rp_test&quot; on &quot; testDB&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-22-查询连续查询"><a href="#4-22-查询连续查询" class="headerlink" title="4.22.查询连续查询"></a>4.22.查询连续查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CONTINUOUS QUERIES </span><br></pre></td></tr></table></figure>
<ul>
<li>这条命令得在命令行下输入，在web管理界面不能显示。</li>
<li>QUERIES需要大写</li>
</ul>
<h2 id="4-23-创建新的Continuous-Queries"><a href="#4-23-创建新的Continuous-Queries" class="headerlink" title="4.23.创建新的Continuous Queries"></a>4.23.创建新的Continuous Queries</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create continuous query cq_30m on testDB begin select mean(temperature) into weather30m from weather group by time(30m) end</span><br></pre></td></tr></table></figure>
<ul>
<li><p>cq_30m：连续查询的名字</p>
</li>
<li><p>testDB：具体的数据库名</p>
</li>
<li><p>mean(temperature): 算平均温度</p>
</li>
<li><p>weather： 当前表名</p>
</li>
<li><p>weather30m： 存新数据的表名</p>
</li>
<li><p>30m：时间间隔为30分钟</p>
</li>
</ul>
<h2 id="4-24-删除Continuous-Queries"><a href="#4-24-删除Continuous-Queries" class="headerlink" title="4.24.删除Continuous Queries"></a>4.24.删除Continuous Queries</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>时序数据库</category>
      </categories>
      <tags>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网（Vultr）</title>
    <url>/2020/10/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%88Vultr%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><h2 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1.注册账号"></a>1.1.注册账号</h2><p><a href="https://www.vultr.com/?ref=8321130">vultr注册地址</a></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175337.png" alt=""></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175821.png" alt=""></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175830.png" alt=""></p>
<h2 id="1-1-2-充值"><a href="#1-1-2-充值" class="headerlink" title="1.1.2.充值"></a>1.1.2.充值</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026180004.png" alt=""></p>
<h1 id="二、购买服务器"><a href="#二、购买服务器" class="headerlink" title="二、购买服务器"></a>二、购买服务器</h1><ol>
<li>选择左边栏的Products</li>
<li>服务器类型选择Cloud Compute</li>
<li>服务器地址选择日本（日本的服务器节点网速还行，不容易被墙，也可以选择美国的）</li>
<li>系统选择CentOS7</li>
<li>收费就选择5$每月的（如果也就平常查找资料，看一下新闻和视频的话，选择5刀的够用了，如果使用一段时间后，感觉不够用，也可以升级的）</li>
<li>下面的配置都不用管，直接点击Deploy Now</li>
<li>等待安装完成</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026154313.png" alt="1,2,3步骤"></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026154320.png" alt="4,5步骤"></p>
<h1 id="三、配置服务器"><a href="#三、配置服务器" class="headerlink" title="三、配置服务器"></a>三、配置服务器</h1><h2 id="1-安装xshell"><a href="#1-安装xshell" class="headerlink" title="1.安装xshell"></a>1.安装xshell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1t4COsweV0evZIfCmZrZYVw</span><br><span class="line">提取码：0000</span><br></pre></td></tr></table></figure>
<h2 id="2-查看刚刚创建完成的服务器"><a href="#2-查看刚刚创建完成的服务器" class="headerlink" title="2. 查看刚刚创建完成的服务器"></a>2. 查看刚刚创建完成的服务器</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026160433.png" alt="查看所有服务器"></p>
<h2 id="3-查看具体服务器的ip等信息"><a href="#3-查看具体服务器的ip等信息" class="headerlink" title="3.查看具体服务器的ip等信息"></a>3.查看具体服务器的ip等信息</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026160713.png" alt="查看服务器信息"></p>
<h2 id="4-连接xshell"><a href="#4-连接xshell" class="headerlink" title="4.连接xshell"></a>4.连接xshell</h2><ol>
<li><p>点击左上角的的文件-&gt;新建</p>
</li>
<li><p>名称随便输入（尽量设置为该服务的ip）</p>
</li>
<li><p>协议选择默认的SSH</p>
</li>
<li><p>主机输入服务器的ip地址（也就是上图中的IP Address）</p>
</li>
<li><p>端口不用改，默认为22</p>
</li>
<li><p>点击左侧的<code>用户身份验证</code></p>
<p> <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026162251.png" alt=""></p>
</li>
<li><p>设置登录账号和密码（用户名：服务器详情图片中的Username，密码为服务器详情图片中的Password）</p>
</li>
</ol>
<p>​    <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026162359.png" alt="xshell配置2"></p>
<p>​    </p>
<ol>
<li>配置完后，点击连接</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026163106.png" alt="连接成功"></p>
<h2 id="5-配置服务器ssr"><a href="#5-配置服务器ssr" class="headerlink" title="5.配置服务器ssr"></a>5.配置服务器ssr</h2><ul>
<li><p>接下来根据大神们建好的轮子来进行梯子搭建</p>
</li>
<li><p>依次输入以下命令</p>
<ul>
<li><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</code></li>
<li><code>chmod +x shadowsocks.sh</code></li>
<li><code>./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</code></li>
</ul>
</li>
<li><p>然后根据提示输入信息</p>
<ul>
<li>Default password: teddysun.com：梯子密码</li>
<li>Default port: 16846：梯子连接端口</li>
<li><p>Please select stream cipher for shadowsocks-python: 选择加密方式</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026164840.png" alt="梯子设置"></p>
</li>
</ul>
</li>
<li><p>然后按下回车，等待设置完成</p>
</li>
<li><p>设置完成后，会出现以下图</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026165302.png" alt="设置完成"></p>
</li>
</ul>
<h1 id="四、使用梯子"><a href="#四、使用梯子" class="headerlink" title="四、使用梯子"></a>四、使用梯子</h1><ul>
<li><p>下载连接客户端</p>
<ul>
<li><p>下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026165552.png" alt="下载客户端"></p>
</li>
</ul>
</li>
<li><p>解压下载好的zip文件</p>
</li>
<li><p>运行根目录中的.exe文件</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026170139.png" alt="客户端"></p>
</li>
<li><p>对客户端进行配置</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173236.png" alt=""></p>
<p>  ​                                        </p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173537.png" alt=""></p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173633.png" alt=""></p>
</li>
<li><p>测试是否可以使用</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173747.png" alt="测试"></p>
</li>
<li><p>ok，配置成功</p>
</li>
</ul>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Java报错整理（持续更新）</title>
    <url>/2020/10/14/Java%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="资源包报错"><a href="#资源包报错" class="headerlink" title="资源包报错"></a>资源包报错</h1><h2 id="使用Junit4-12时报错"><a href="#使用Junit4-12时报错" class="headerlink" title="使用Junit4.12时报错"></a>使用Junit4.12时报错</h2><p><strong>报错信息：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</span><br></pre></td></tr></table></figure>
<p><strong>解决方案：</strong></p>
<ol>
<li>更换版本为4.10,因为从4.11版本开始，包中不在包含hamcrest，如果必须使用4.11及其之后的版本，请使用方案2</li>
<li>Junit4.12 + hamcrest-core-1.3</li>
</ol>
<p><strong>下载链接：</strong></p>
<p><a href="https://pan.baidu.com/s/1Ki365BCzJE4YRdmdxFTboQ">junit4.10</a></p>
<p><a href="https://pan.baidu.com/s/1P5kIyxILtKrs0ZB-b_RX_g">junit4.11</a></p>
<p><a href="https://pan.baidu.com/s/1wTsBM-7QAe6BpY7VVAM1Kw">junit4.12</a></p>
<p><a href="https://pan.baidu.com/s/1YXlqpT8zB6Ly0wF8XdX-xQ">hamcrest-core-1.3</a></p>
<p>提取码为：0000</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式简介及分类</title>
    <url>/2020/10/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><h2 id="设计模式的由来"><a href="#设计模式的由来" class="headerlink" title="设计模式的由来"></a>设计模式的由来</h2><p>设计模式的概念最早是由 <code>克⾥斯托佛·亚历⼭⼤</code> 在其著作 <code>《建筑模式语⾔》</code> 中⾸次提出的。 本书介绍 了城市设计的 “语⾔”，提供了253个描述城镇、邻⾥、住宅、花园、房间及⻄部构造的模式， ⽽此类 “语⾔” 的基本单元就是模式。后来，<code>埃⾥希·伽玛</code> 、 <code>约翰·弗利赛德斯</code> 、 <code>拉尔夫·约翰逊</code> 和 <code>理查德·赫尔姆</code> 这四位作者接受了模式的概念。 1994 年， 他们出版了 《设计模式： 可复⽤⾯向对象软件的基础》 ⼀书， 将设计模式的概念应⽤到程序开发领域中。 其实有⼀部分⼈并没有仔细阅读过设计模式的相关书籍和资料，但依旧可以编写出优秀的代码。这主要 是由于在经过众多项⽬的锤炼和对程序设计的不断追求，从⽽在多年编程历程上提炼出来的⼼得体会。 ⽽这份经验最终会与设计模式提到的内容⼏乎⼀致，同样会要求⾼内聚、低耦合、可扩展、可复⽤。你 可能也遇到类似的经历，在学习⼀些框架的源码时，发现它⾥面的某些设计和你在做开发时⼀样。</p>
<h2 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h2><p>设计模式遵循六⼤原则；</p>
<ul>
<li>单⼀职责( ⼀个类和⽅法只做⼀件事 )：一个类或者一个接口只负责唯一项职责，尽量设计出功能单一的接口</li>
<li>⾥⽒替换( 多态，⼦类可扩展⽗类 )</li>
<li>依赖倒置( 细节依赖抽象，下层依赖上层 )：高层模块不应该依赖低层模块具体实现，解耦高层和低层。即面向接口编程，当实现发生变化时，只需提供新的实现类，不需要修改高层模块代码；</li>
<li>接⼝隔离( 建⽴单⼀接⼝ )</li>
<li>迪⽶特原则( 最少知道，降低耦合 )</li>
<li>开闭原则( 抽象架构，扩展实现 )：程序对外扩展开放，对修改关闭；换句话说，当需求发生变化时，我们可以通过添加新模块来满足新需求，而不是通过修改原来的实现代码来满足新需求。</li>
</ul>
<h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性。</p>
<ul>
<li>工厂方法</li>
<li>抽象工厂</li>
<li>建造者</li>
<li>原型</li>
<li>单例</li>
</ul>
<h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><p>这类模式介绍如何将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效。</p>
<ul>
<li>适配器</li>
<li>桥接</li>
<li>组合</li>
<li>装饰</li>
<li>外观</li>
<li>享元</li>
<li>代理</li>
</ul>
<h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><p>这类模式负责对象间的⾼效沟通和职责委派</p>
<ul>
<li>责任链</li>
<li>命令</li>
<li>迭代器</li>
<li>中介者</li>
<li>备忘录</li>
<li>观察者</li>
<li>状态</li>
<li>策略</li>
<li>模板方法</li>
<li>访问者</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算简述</title>
    <url>/2020/10/13/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="and运算-amp"><a href="#and运算-amp" class="headerlink" title="and运算 &amp;"></a>and运算 &amp;</h1><p><strong>相同为1则为1,不为1则为0</strong></p>
<p>and运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数。</p>
<p>相同位的两个数字都为1，则为1；若有一个不为1，则为0。</p>
<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span> </span><br><span class="line"><span class="number">11100</span> （&amp;；或者and）</span><br><span class="line">--------------- </span><br><span class="line"><span class="number">00100</span></span><br></pre></td></tr></table></figure>
<h1 id="or运算"><a href="#or运算" class="headerlink" title="or运算 |"></a>or运算 |</h1><p><strong>只要有一个为1则整体结果为1</strong></p>
<p>or运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。</p>
<p>相同位只要一个为1即为1。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span> </span><br><span class="line"><span class="number">11100</span> （|或者or）</span><br><span class="line">---------------- </span><br><span class="line"><span class="number">11101</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="xor运算"><a href="#xor运算" class="headerlink" title="xor运算 ^"></a>xor运算 ^</h1><p><strong>相同位不同则为1，相同则为0</strong></p>
<p>异或的符号是^。按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作. 操作的结果是如果某位不同则该位为1, 否则该位为0.</p>
<p>xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即（a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19000309作为密钥。1314520 xor 19000309= 20309293，我就把20309293告诉MM。MM再次计算20309293xor 19000309的值，得到1314520。</p>
<p>相同位不同则为1，相同则为0。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span></span><br><span class="line"><span class="number">11100</span> （^或者xor）</span><br><span class="line">---------------- </span><br><span class="line"><span class="number">11001</span></span><br></pre></td></tr></table></figure>
<h1 id="not运算"><a href="#not运算" class="headerlink" title="not运算 ~"></a>not运算 ~</h1><p><strong>not运算的定义是把内存中的0和1全部取反。</strong></p>
<p>使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是<a href="https://baike.baidu.com/item/无符号整数">无符号整数</a>（不能表示负数），那么得到的值就是它与该类型<a href="https://baike.baidu.com/item/上界">上界</a>的差，因为无符号类型的数是用00到$FFFF依次表示的。</p>
<h1 id="shl运算-lt-lt"><a href="#shl运算-lt-lt" class="headerlink" title="shl运算 &lt;&lt;"></a>shl运算 &lt;&lt;</h1><p>a shl b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 shl 2 = 400。可以看出，a shl b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2。</p>
<p>通常认为a shl 1比a * 2更快，因为前者是更底层一些的操作。因此程序中乘以2的操作请尽量用左移一位来代替。</p>
<p>定义一些常量可能会用到shl运算。你可以方便地用1 shl 16 - 1来表示65535。很多算法和数据结构要求数据规模必须是2的幂，此时可以用shl来定义Max_N等常量。</p>
<h1 id="shr运算-gt-gt"><a href="#shr运算-gt-gt" class="headerlink" title="shr运算 &gt;&gt;"></a>shr运算 &gt;&gt;</h1><p>和shl相似，a shr b表示二进制右移b位（去掉末b位），相当于a除以2的b次方（取整）。和上面一样的例子，那么400 shr2 = 100。我们也经常用shr 1来代替div 2，比如<a href="https://baike.baidu.com/item/二分查找">二分查找</a>、堆的插入操作等等。想办法用shr代替除法运算可以使程序效率大大提高。最大公约数的二进制算法用除以2操作来代替慢得出奇的mod运算，效率可以提高60%。</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Http返回状态码</title>
    <url>/2020/10/12/Http%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http状态返回代码</th>
<th style="text-align:center">返回代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>1xx</strong></td>
<td style="text-align:center"><strong>临时响应</strong></td>
<td style="text-align:center"><strong>表示临时响应并需要请求者继续执行操作的状态代码。</strong></td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">继续</td>
<td style="text-align:center">请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">切换协议</td>
<td style="text-align:center">请求者已要求服务器切换协议，服务器已确认并准备切换。</td>
</tr>
<tr>
<td style="text-align:center"><strong>2xx</strong></td>
<td style="text-align:center"><strong>成功</strong></td>
<td style="text-align:center"><strong>表示成功处理了请求的状态代码。</strong></td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">成功</td>
<td style="text-align:center">服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:center">已创建</td>
<td style="text-align:center">请求成功并且服务器创建了新的资源。</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:center">已接受</td>
<td style="text-align:center">服务器已接受请求，但尚未处理。</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:center">非授权信息</td>
<td style="text-align:center">服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:center">无内容</td>
<td style="text-align:center">服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:center">重置内容</td>
<td style="text-align:center">服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:center">部分内容</td>
<td style="text-align:center">服务器成功处理了部分 GET 请求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>3xx</strong></td>
<td style="text-align:center"><strong>重定向</strong></td>
<td style="text-align:center"><strong>表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向。</strong></td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:center">多种选择</td>
<td style="text-align:center">针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">永久移动</td>
<td style="text-align:center">请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">临时移动</td>
<td style="text-align:center">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">查看其他位置</td>
<td style="text-align:center">请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">未修改</td>
<td style="text-align:center">自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:center">使用代理</td>
<td style="text-align:center">请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:center">临时重定向</td>
<td style="text-align:center">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>4xx</strong></td>
<td style="text-align:center"><strong>请求错误</strong></td>
<td style="text-align:center"><strong>这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:center">错误请求</td>
<td style="text-align:center">服务器不理解请求的语法。</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:center">未授权</td>
<td style="text-align:center">请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">禁止</td>
<td style="text-align:center">服务器拒绝请求。</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">未找到</td>
<td style="text-align:center">服务器找不到请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:center">方法禁用</td>
<td style="text-align:center">禁用请求中指定的方法。</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:center">不接受</td>
<td style="text-align:center">无法使用请求的内容特性响应请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:center">需要代理授权</td>
<td style="text-align:center">此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:center">请求超时</td>
<td style="text-align:center">服务器等候请求时发生超时。</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:center">已删除</td>
<td style="text-align:center">如果请求的资源已永久删除，服务器就会返回此响应。</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:center">需要有效长度</td>
<td style="text-align:center">服务器不接受不含有效内容长度标头字段的请求。</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:center">未满足前提条件</td>
<td style="text-align:center">服务器未满足请求者在请求中设置的其中一个前提条件。</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:center">请求实体过大</td>
<td style="text-align:center">服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:center">请求的 URI 过长</td>
<td style="text-align:center">请求的 URI（通常为网址）过长，服务器无法处理。</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:center">不支持的媒体类型</td>
<td style="text-align:center">请求的格式不受请求页面的支持。</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:center">请求范围不符合要求</td>
<td style="text-align:center">如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>
</tr>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:center">未满足期望值</td>
<td style="text-align:center">服务器未满足”期望”请求标头字段的要求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>5xx</strong></td>
<td style="text-align:center"><strong>服务器错误</strong></td>
<td style="text-align:center"><strong>这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</strong></td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">服务器内部错误</td>
<td style="text-align:center">服务器遇到错误，无法完成请求。</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:center">尚未实施</td>
<td style="text-align:center">服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">错误网关</td>
<td style="text-align:center">服务器作为网关或代理，从上游服务器收到无效响应。</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:center">服务不可用</td>
<td style="text-align:center">服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:center">网关超时</td>
<td style="text-align:center">服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:center">HTTP 版本不受支持</td>
<td style="text-align:center">服务器不支持请求中所用的 HTTP 协议版本。</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高阶函数</title>
    <url>/2020/09/30/JavaScript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><blockquote>
<p><strong>函数式编程</strong>（英语：<strong>functional programming</strong>）或称<strong>函数程序设计</strong>、<strong>泛函编程</strong>，是一种<a href="https://zh.wikipedia.org/wiki/编程范式">编程范式</a>，它将<a href="https://zh.wikipedia.org/wiki/電腦運算">电脑运算</a>视为<a href="https://zh.wikipedia.org/wiki/函数">函数</a>运算，并且避免使用<a href="https://zh.wikipedia.org/w/index.php?title=程式状态&amp;action=edit&amp;redlink=1">程序状态</a>以及<a href="https://zh.wikipedia.org/wiki/不可變物件">易变对象</a>。其中，<a href="https://zh.wikipedia.org/wiki/Λ演算">λ演算</a>（lambda calculus）为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>
<p>比起<a href="https://zh.wikipedia.org/wiki/指令式編程">指令式编程</a>，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p>
<p>在函数式编程中，函数是<a href="https://zh.wikipedia.org/wiki/第一类对象">第一类对象</a>，意思是说一个函数，既可以作为其它函数的参数（输入值），也可以从函数中返回（输入值），被修改或者被分配给一个变量。</p>
</blockquote>
<p><strong>简单来说:</strong>函数式是一种编程形式，你可以将函数作为参数传递给其他函数，并将它们作为值返回。 在函数式编程中，我们以函数的形式思考和编程。</p>
<p>JavaScript，Haskell，Clojure，Scala 和 Erlang 是部分实现了函数式编程的语言。</p>
<h1 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h1><p>如果你在学习 JavaScript，你可能听说过 JavaScript 将函数视为一等公民。 那是因为在 JavaScript 及其他函数式编程语言中，<strong>函数是对象</strong>。</p>
<p>在 JavaScript 中，函数是一种特殊类型的对象。 它们是 Function objects。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHello();   <span class="comment">// 控制台上打印 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<p>为了更进一步的证明js中的函数是对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sayHello.name=<span class="string">&#x27;My Name is SayHello&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHello.name)   <span class="comment">// 控制台打印 &#x27;My Name is SayHello&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> - 虽然这在 JavaScript 中完全有效，但这被认为是 harmful 的做法。 你不应该向函数对象添加随机属性，如果不得不这样做，请使用对象。</p>
<p>在 JavaScript 中，你对其他类型（如对象，字符串或数字）执行的所有操作都可以对函数执行。 你可以将它们作为参数传递给其他函数（回调函数），将它们分配给变量并传递它们等等。这就是 JavaScript 中的函数被称为一等函数的原因。</p>
<h2 id="将函数赋值给变量"><a href="#将函数赋值给变量" class="headerlink" title="将函数赋值给变量"></a>将函数赋值给变量</h2><p>我们可以在 JavaScript 中将函数赋值给变量。 例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="keyword">function</span> (<span class="params">z</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> z * z</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">5</span>))  <span class="comment">// 控制台打印 &#x27;25&#x27;</span></span><br></pre></td></tr></table></figure>
<p>我们也可以将该方法进行传递:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = square;</span><br><span class="line"><span class="built_in">console</span>.log(temp(<span class="number">6</span>))   <span class="comment">//控制台打印36</span></span><br></pre></td></tr></table></figure>
<h2 id="将函数作为参数传递"><a href="#将函数作为参数传递" class="headerlink" title="将函数作为参数传递"></a>将函数作为参数传递</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">type,sayHello,sayBye</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 根据就近原则,此处使用的是方法参数中的sayHello</span></span><br><span class="line">        sayHello();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        sayBye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(<span class="number">1</span>,sayHello,sayBye); <span class="comment">//控制台打印 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/数学">数学</a>和<a href="https://zh.wikipedia.org/wiki/计算机科学">计算机科学</a>中，<strong>高阶函数</strong>是至少满足下列一个条件的<a href="https://zh.wikipedia.org/wiki/函数">函数</a>：</p>
<ul>
<li>接受一个或多个函数作为输入</li>
<li>输出一个函数</li>
</ul>
<p>在数学中它们也叫做<a href="https://zh.wikipedia.org/wiki/算子">算子</a>（运算符）或<a href="https://zh.wikipedia.org/wiki/泛函">泛函</a>。<a href="https://zh.wikipedia.org/wiki/微积分">微积分</a>中的<a href="https://zh.wikipedia.org/wiki/导数">导数</a>就是常见的例子，因为它映射一个函数到另一个函数。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/Lambda演算">无类型lambda演算</a>，所有函数都是高阶的；在<a href="https://zh.wikipedia.org/wiki/有类型lambda演算">有类型lambda演算</a>（大多数<a href="https://zh.wikipedia.org/wiki/函数式编程语言">函数式编程语言</a>都从中演化而来）中，高阶函数一般是那些函数型别包含多于一个箭头的函数。在函数式编程中，返回另一个函数的高阶函数被称为<a href="https://zh.wikipedia.org/wiki/Curry化">Curry化</a>的函数。</p>
<p>在很多函数式编程语言中能找到的<code>map</code>函数是高阶函数的一个例子。它接受一个函数<strong>f</strong>作为参数，并返回接受一个列表并应用<strong>f</strong>到它的每个元素的一个函数。</p>
<p>高阶函数的其他例子包括<a href="https://zh.wikipedia.org/wiki/函数复合">函数复合</a>、<a href="https://zh.wikipedia.org/wiki/积分">积分</a>和常量函数λ<em>x</em>.λ<em>y</em>.<em>x</em>。</p>
</blockquote>
<p>高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</p>
<p>例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。</p>
<h2 id="JavaScript内置高阶函数"><a href="#JavaScript内置高阶函数" class="headerlink" title="JavaScript内置高阶函数"></a>JavaScript内置高阶函数</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><strong>作用: </strong>filter用于对数组进行过滤。它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<p><strong>注意:</strong> </p>
<ul>
<li>filter()不会对空数组进行检测</li>
<li>filter()不会改变原始数组</li>
</ul>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, indedx, arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>第一个参数为函数</p>
<p>这个回调函数的返回值是一个boolean值</p>
<p>当检查元素符合过滤条件时,返回true,函数内部会自动将这个元素加入新数组中</p>
<p>当不符合条件时会返回false，函数内部会过滤掉这个元素</p>
<p><strong>例子</strong></p>
<p>找出nums数组中小于50的数字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray=nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray)  <span class="comment">// 打印结果 [20, 14, 15, 7]</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray2=nums.filter(<span class="function"><span class="params">n</span>=&gt;</span>n&lt;<span class="number">50</span>)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray2) <span class="comment">// 打印结果 [20, 14, 15, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><strong>作用：</strong>返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p>
<p><strong>注意：</strong></p>
<ul>
<li>map()不会对空数组进行检测</li>
<li>map()不会改变原始数组</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisIndex</span>)</span></span><br></pre></td></tr></table></figure>
<p>function(currentValue, index, arr)：必须为一个函数，数组中的每个元素都会执行这个函数。其中函数参数：</p>
<ul>
<li>currentValue：必须,当前元素的的值。</li>
<li>index：可选,当前元素的索引。</li>
<li>arr：可选,当前元素属于的数组对象。</li>
<li>thisValue：可选。对象作为该执行回调时使用，传递给函数，用作”this”的值。</li>
</ul>
<p><strong>例子</strong></p>
<p>将nums数组中的数字*2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray=nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray)  <span class="comment">// 打印结果 [40, 28, 30, 14, 178, 198, 112]</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray2=nums.map(<span class="function"><span class="params">n</span>=&gt;</span>n * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray2) <span class="comment">// 打印结果 [40, 28, 30, 14, 178, 198, 112]</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><strong>作用：</strong></p>
<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<p><strong>注意：</strong></p>
<ul>
<li>educe() 对于空数组是不会执行回调函数的和map一样。</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>function(total,currentValue, index,arr)：必需。用于执行每个数组元素的函数。函数参数:</p>
<ul>
<li>total    必需,初始值, 或者计算结束后的返回值。</li>
<li>currentValue    必需,当前元素</li>
<li>currentIndex    可选,当前元素的索引</li>
<li>arr    可选,当前元素所属的数组对象。</li>
</ul>
<p><strong>例子</strong></p>
<p>计算nums数组中数字的和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> total=nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prevValue,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(total)  <span class="comment">// 打印结果 300</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> total2=nums.reduce(<span class="function">(<span class="params">prevValue,n</span>)=&gt;</span>prevValue + n )</span><br><span class="line"><span class="built_in">console</span>.log(total2) <span class="comment">// 打印结果 300</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关知识点（持续更新）</title>
    <url>/2020/09/29/Vue%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="数组中哪些方法是响应式的？"><a href="#数组中哪些方法是响应式的？" class="headerlink" title="数组中哪些方法是响应式的？"></a>数组中哪些方法是响应式的？</h1><p><strong>注意：通过数组下标直接修改数组元素的值，界面不会发生改变，但是数组内的值已经修改，如果需要修改的时候是响应式的，那么可以通过以下方法：</strong></p>
<ul>
<li><strong>数组的splice方法</strong></li>
<li><p><strong>vue.set(array,下标,值)</strong></p>
<table>
   <tr>
       <td>方法名</td>
       <td>作用</td>
       <td>语法</td>
       <td>是否是响应式</td>
   </tr>
   <tr>
       <td>push</td>
       <td>在数组最后追加元素</td>
       <td>array.push(元素1,元素2...)</td>
       <td>是</td>
   </tr>
   <tr>
       <td>pop</td>
       <td>移除数组中最后一位元素</td>
       <td>array.pop()</td>
       <td>是</td>
   </tr>
    <tr>
       <td>shift</td>
       <td>移除数组中第一位元素</td>
       <td>array.shift()</td>
       <td>是</td>
   </tr>
    <tr>
       <td>unshift</td>
       <td>在数组最前面添加元素</td>
       <td>array.unshift(元素1,元素2...)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>splice</td>
       <td>删除元素/插入元素/替换元素</td>
       <td>array.splice(开始下标,需要删除的数量, 添加元素1,添加元素,...)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>sort</td>
       <td>将数组进行排序</td>
       <td>array.sort(function)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>reverse</td>
       <td>将数组内的元素进行反转</td>
       <td>array.reverse()</td>
       <td>是</td>
   </tr>
</table>

</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本操作(二)</title>
    <url>/2020/09/28/Vue%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><strong>使用:</strong></p>
<ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> &gt;</span><br><span class="line">    &lt;h2 v-<span class="keyword">if</span>=<span class="string">&quot;display&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-<span class="keyword">else</span>&gt;&#123;&#123;message + <span class="string">&#x27;2&#x27;</span>&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;checkout()&quot;</span>&gt;切换&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        display: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        checkout()&#123;</span><br><span class="line">            <span class="built_in">this</span>.display = !<span class="built_in">this</span>.display;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意:如果需要判断的层级很多,那么推荐使用计算属性</strong></p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>主要用于控制某个元素是否显示</p>
<h3 id="跟v-if的区别"><a href="#跟v-if的区别" class="headerlink" title="跟v-if的区别"></a>跟v-if的区别</h3><ul>
<li>v-if:当条件为false时,包含v-if指令的元素,根本就不会存在在dom中</li>
<li>v-show: 当条件为false时,包含v-show指令的元素添加了一个行内样式:display: none</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>v-if是在控制是否在dom中显示,v-show是在设置行内样式display</p>
<p>如果需要频繁切换显示隐藏,那么推荐使用v-show</p>
<p>如果只是一次切换,那么推荐使用v-if</p>
<h1 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h1><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="不需要下标"><a href="#不需要下标" class="headerlink" title="不需要下标"></a>不需要下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in names&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        names: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="需要下标"><a href="#需要下标" class="headerlink" title="需要下标"></a>需要下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in names&quot;</span>&gt;</span><br><span class="line">            &#123;&#123;index + <span class="number">1</span>&#125;&#125;.&#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        names: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><h3 id="只要Value"><a href="#只要Value" class="headerlink" title="只要Value"></a>只要Value</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in peopleInfo&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Key和Value都要"><a href="#Key和Value都要" class="headerlink" title="Key和Value都要"></a>Key和Value都要</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,key) in peopleInfo&quot;</span>&gt;&#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Key和Vue和Index都要"><a href="#Key和Vue和Index都要" class="headerlink" title="Key和Vue和Index都要"></a>Key和Vue和Index都要</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,key,index) in peopleInfo&quot;</span>&gt;&#123;&#123;index+<span class="number">1</span>&#125;&#125;.&#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件的Key属性"><a href="#组件的Key属性" class="headerlink" title="组件的Key属性"></a>组件的Key属性</h2><ul>
<li><p>官方推荐我们在使用v-for时,给对应的元素或组件添加上一个:key属性</p>
</li>
<li><p>为什么需要这个key属性呢?</p>
<ul>
<li>这个其实和Vue的虚拟DOM的Diff算法有关系</li>
</ul>
</li>
<li><p>当某一层有很多相同的节点时,也就是列表节点时,我们希望插入一个新的节点</p>
<ul>
<li>我们希望在B和C的中间添加一个F,Diff算法默认执行起来是这样的</li>
<li>就是把C更新成F,D更新成C,E更新成D,最后在插入一个F,如下图左下</li>
</ul>
</li>
<li><p>所以我们需要使用key来给每一个节点做一个唯一标识</p>
<ul>
<li>Diff算法就可以正确的识别此节点</li>
<li>找到正确的位置去插入新的节点</li>
</ul>
</li>
<li><p><strong>总结：key的作用主要就是为了高效的更新虚拟DOM</strong></p>
</li>
</ul>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200929144135.png" alt="有key和无key的插入流程"></p>
<p><strong>尽量保证key的唯一性</strong></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript事件</title>
    <url>/2020/09/28/JavaScript%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="常见类别"><a href="#常见类别" class="headerlink" title="常见类别"></a>常见类别</h1><h2 id="资源事件"><a href="#资源事件" class="headerlink" title="资源事件"></a>资源事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">资源加载失败时。</td>
</tr>
<tr>
<td style="text-align:left"><code>abort</code></td>
<td style="text-align:left">正在加载资源已经被中止时。</td>
</tr>
<tr>
<td style="text-align:left"><code>load</code></td>
<td style="text-align:left">资源及其相关资源已完成加载。</td>
</tr>
<tr>
<td style="text-align:left"><code>beforeunload</code></td>
<td style="text-align:left">window，document 及其资源即将被卸载。</td>
</tr>
<tr>
<td style="text-align:left"><code>unload</code></td>
<td style="text-align:left">文档或一个依赖资源正在被卸载。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="网络事件"><a href="#网络事件" class="headerlink" title="网络事件"></a>网络事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>online</code></td>
<td style="text-align:left">浏览器已获得网络访问。</td>
</tr>
<tr>
<td style="text-align:left"><code>offline</code></td>
<td style="text-align:left">浏览器已失去网络访问。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>focus</code></td>
<td style="text-align:left">元素获得焦点（不会冒泡）。</td>
</tr>
<tr>
<td style="text-align:left"><code>blur</code></td>
<td style="text-align:left">元素失去焦点（不会冒泡）。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="WebSocket-事件"><a href="#WebSocket-事件" class="headerlink" title="WebSocket 事件"></a>WebSocket 事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>open</code></td>
<td style="text-align:left">WebSocket 连接已建立。</td>
</tr>
<tr>
<td style="text-align:left"><code>message</code></td>
<td style="text-align:left">通过 WebSocket 接收到一条消息。</td>
</tr>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">WebSocket 连接异常被关闭（比如有些数据无法发送）。</td>
</tr>
<tr>
<td style="text-align:left"><code>close</code></td>
<td style="text-align:left">WebSocket 连接已关闭。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="会话历史事件"><a href="#会话历史事件" class="headerlink" title="会话历史事件"></a>会话历史事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pagehide</code></td>
<td style="text-align:left">A session history entry is being traversed from.</td>
</tr>
<tr>
<td style="text-align:left"><code>pageshow</code></td>
<td style="text-align:left">A session history entry is being traversed to.</td>
</tr>
<tr>
<td style="text-align:left"><code>popstate</code></td>
<td style="text-align:left">A session history entry is being navigated to (in certain cases).</td>
</tr>
</tbody>
</table>
</div>
<h2 id="CSS动画事件"><a href="#CSS动画事件" class="headerlink" title="CSS动画事件"></a>CSS动画事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>animationstart</code></td>
<td style="text-align:left">某个 CSS 动画开始时触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>animationend</code></td>
<td style="text-align:left">某个 CSS 动画完成时触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>animationiteration</code></td>
<td style="text-align:left">某个 CSS 动画完成后重新开始时触发。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="CSS过渡事件"><a href="#CSS过渡事件" class="headerlink" title="CSS过渡事件"></a>CSS过渡事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>transitionstart</code></td>
<td style="text-align:left">A <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions">CSS transition</a> has actually started (fired after any delay).</td>
</tr>
<tr>
<td style="text-align:left"><code>transitioncancel</code></td>
<td style="text-align:left">CSS过渡被取消</td>
</tr>
<tr>
<td style="text-align:left"><code>transitionend</code></td>
<td style="text-align:left">CSS过渡已经完成</td>
</tr>
<tr>
<td style="text-align:left"><code>transitionrun</code></td>
<td style="text-align:left">A <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions">CSS transition</a> has begun running (fired before any delay starts).</td>
</tr>
</tbody>
</table>
</div>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>reset</code></td>
<td style="text-align:left">点击重置按钮时</td>
</tr>
<tr>
<td style="text-align:left"><code>submit</code></td>
<td style="text-align:left">点击提交按钮</td>
</tr>
</tbody>
</table>
</div>
<h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">时间名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>beforeprint</code></td>
<td style="text-align:left">打印机已经就绪时触发</td>
</tr>
<tr>
<td style="text-align:left"><code>afterprint</code></td>
<td style="text-align:left">打印机关闭时触发</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文本写作事件"><a href="#文本写作事件" class="headerlink" title="文本写作事件"></a>文本写作事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>compositionstart</code></td>
<td style="text-align:left">The composition of a passage of text is prepared (similar to keydown for a keyboard input, but works with other inputs such as speech recognition).</td>
</tr>
<tr>
<td style="text-align:left"><code>compositionupdate</code></td>
<td style="text-align:left">A character is added to a passage of text being composed.</td>
</tr>
<tr>
<td style="text-align:left"><code>compositionend</code></td>
<td style="text-align:left">The composition of a passage of text has been completed or canceled.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="视图事件"><a href="#视图事件" class="headerlink" title="视图事件"></a>视图事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>fullscreenchange</code></td>
<td style="text-align:left">An element was turned to fullscreen mode or back to normal mode.</td>
</tr>
<tr>
<td style="text-align:left"><code>fullscreenerror</code></td>
<td style="text-align:left">It was impossible to switch to fullscreen mode for technical reasons or because the permission was denied.</td>
</tr>
<tr>
<td style="text-align:left"><code>resize</code></td>
<td style="text-align:left">The document view has been resized.</td>
</tr>
<tr>
<td style="text-align:left"><code>scroll</code></td>
<td style="text-align:left">The document view or an element has been scrolled.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>cut</code></td>
<td style="text-align:left">已经剪贴选中的文本内容并且复制到了剪贴板。</td>
</tr>
<tr>
<td style="text-align:left"><code>copy</code></td>
<td style="text-align:left">已经把选中的文本内容复制到了剪贴板。</td>
</tr>
<tr>
<td style="text-align:left"><code>paste</code></td>
<td style="text-align:left">从剪贴板复制的文本内容被粘贴。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>keydown</code></td>
<td style="text-align:left">按下任意按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>keypress</code></td>
<td style="text-align:left">除 Shift、Fn、CapsLock 外的任意键被按住。（连续触发。）</td>
</tr>
<tr>
<td style="text-align:left"><code>keyup</code></td>
<td style="text-align:left">释放任意按键。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>auxclick</code></td>
<td style="text-align:left">A pointing device button (ANY non-primary button) has been pressed and released on an element.</td>
</tr>
<tr>
<td style="text-align:left"><code>click</code></td>
<td style="text-align:left">在元素上按下并释放任意鼠标按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>contextmenu</code></td>
<td style="text-align:left">右键点击（在右键菜单显示前触发）。</td>
</tr>
<tr>
<td style="text-align:left"><code>dblclick</code></td>
<td style="text-align:left">在元素上双击鼠标按钮。</td>
</tr>
<tr>
<td style="text-align:left"><code>mousedown</code></td>
<td style="text-align:left">在元素上按下任意鼠标按钮。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseenter</code></td>
<td style="text-align:left">指针移到有事件监听的元素内。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseleave</code></td>
<td style="text-align:left">指针移出元素范围外（不冒泡）。</td>
</tr>
<tr>
<td style="text-align:left"><code>mousemove</code></td>
<td style="text-align:left">指针在元素内移动时持续触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseover</code></td>
<td style="text-align:left">指针移到有事件监听的元素或者它的子元素内。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseout</code></td>
<td style="text-align:left">指针移出元素，或者移到它的子元素上。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseup</code></td>
<td style="text-align:left">在元素上释放任意鼠标按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>pointerlockchange</code></td>
<td style="text-align:left">鼠标被锁定或者解除锁定发生时。</td>
</tr>
<tr>
<td style="text-align:left"><code>pointerlockerror</code></td>
<td style="text-align:left">可能因为一些技术的原因鼠标锁定被禁止时。</td>
</tr>
<tr>
<td style="text-align:left"><code>select</code></td>
<td style="text-align:left">有文本被选中。</td>
</tr>
<tr>
<td style="text-align:left"><code>wheel</code></td>
<td style="text-align:left">滚轮向任意方向滚动。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>drag</code></td>
<td style="text-align:left">正在拖动元素或文本选区（在此过程中持续触发，每 350ms 触发一次）</td>
</tr>
<tr>
<td style="text-align:left"><code>dragend</code></td>
<td style="text-align:left">拖放操作结束。（松开鼠标按钮或按下 Esc 键）</td>
</tr>
<tr>
<td style="text-align:left"><code>dragenter</code></td>
<td style="text-align:left">被拖动的元素或文本选区移入有效释放目标区</td>
</tr>
<tr>
<td style="text-align:left"><code>dragstart</code></td>
<td style="text-align:left">用户开始拖动HTML元素或选中的文本</td>
</tr>
<tr>
<td style="text-align:left"><code>dragleave</code></td>
<td style="text-align:left">被拖动的元素或文本选区移出有效释放目标区</td>
</tr>
<tr>
<td style="text-align:left"><code>dragover</code></td>
<td style="text-align:left">被拖动的元素或文本选区正在有效释放目标上被拖动 （在此过程中持续触发，每350ms触发一次）</td>
</tr>
<tr>
<td style="text-align:left"><code>drop</code></td>
<td style="text-align:left">元素在有效释放目标区上释放</td>
</tr>
</tbody>
</table>
</div>
<h2 id="媒体事件"><a href="#媒体事件" class="headerlink" title="媒体事件"></a>媒体事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>audioprocess</code></td>
<td style="text-align:left">The input buffer of a <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ScriptProcessorNode"><code>ScriptProcessorNode</code></a> is ready to be processed.</td>
</tr>
<tr>
<td style="text-align:left"><code>canplay</code></td>
<td style="text-align:left">The browser can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</td>
</tr>
<tr>
<td style="text-align:left"><code>canplaythrough</code></td>
<td style="text-align:left">The browser estimates it can play the media up to its end without stopping for content buffering.</td>
</tr>
<tr>
<td style="text-align:left"><code>complete</code></td>
<td style="text-align:left">The rendering of an <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/OfflineAudioContext"><code>OfflineAudioContext</code></a> is terminated.</td>
</tr>
<tr>
<td style="text-align:left"><code>durationchange</code></td>
<td style="text-align:left">The <code>duration</code> attribute has been updated.</td>
</tr>
<tr>
<td style="text-align:left"><code>emptied</code></td>
<td style="text-align:left">The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the <a href="https://developer.mozilla.org/zh-CN/docs/XPCOM_Interface_Reference/NsIDOMHTMLMediaElement"><code>load()</code></a> method is called to reload it.</td>
</tr>
<tr>
<td style="text-align:left"><code>ended</code></td>
<td style="text-align:left">Playback has stopped because the end of the media was reached.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadeddata</code></td>
<td style="text-align:left">The first frame of the media has finished loading.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadedmetadata</code></td>
<td style="text-align:left">The metadata has been loaded.</td>
</tr>
<tr>
<td style="text-align:left"><code>pause</code></td>
<td style="text-align:left">Playback has been paused.</td>
</tr>
<tr>
<td style="text-align:left"><code>play</code></td>
<td style="text-align:left">Playback has begun.</td>
</tr>
<tr>
<td style="text-align:left"><code>playing</code></td>
<td style="text-align:left">Playback is ready to start after having been paused or delayed due to lack of data.</td>
</tr>
<tr>
<td style="text-align:left"><code>ratechange</code></td>
<td style="text-align:left">The playback rate has changed.</td>
</tr>
<tr>
<td style="text-align:left"><code>seeked</code></td>
<td style="text-align:left">A <em>seek</em> operation completed.</td>
</tr>
<tr>
<td style="text-align:left"><code>seeking</code></td>
<td style="text-align:left">A <em>seek</em> operation began.</td>
</tr>
<tr>
<td style="text-align:left"><code>stalled</code></td>
<td style="text-align:left">The user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</td>
</tr>
<tr>
<td style="text-align:left"><code>suspend</code></td>
<td style="text-align:left">Media data loading has been suspended.</td>
</tr>
<tr>
<td style="text-align:left"><code>timeupdate</code></td>
<td style="text-align:left">The time indicated by the <code>currentTime</code> attribute has been updated.</td>
</tr>
<tr>
<td style="text-align:left"><code>volumechange</code></td>
<td style="text-align:left">The volume has changed.</td>
</tr>
<tr>
<td style="text-align:left"><code>waiting</code></td>
<td style="text-align:left">Playback has stopped because of a temporary lack of data.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>abort</code></td>
<td style="text-align:left">Progression has been terminated (not due to an error).</td>
</tr>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">Progression has failed.</td>
</tr>
<tr>
<td style="text-align:left"><code>load</code></td>
<td style="text-align:left">Progression has been successful.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadend</code></td>
<td style="text-align:left">Progress has stopped (after “error”, “abort” or “load” have been dispatched).</td>
</tr>
<tr>
<td style="text-align:left"><code>loadstart</code></td>
<td style="text-align:left">Progress has begun.</td>
</tr>
<tr>
<td style="text-align:left"><code>progress</code></td>
<td style="text-align:left">In progress.</td>
</tr>
<tr>
<td style="text-align:left"><code>timeout</code></td>
<td style="text-align:left">Progression is terminated due to preset time expiring.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h2><p><code>change</code><br><code>storage</code></p>
<h2 id="更新事件"><a href="#更新事件" class="headerlink" title="更新事件"></a>更新事件</h2><p><code>checking</code><br><code>downloading</code><br><code>error</code><br><code>noupdate</code><br><code>obsolete</code><br><code>updateready</code></p>
<h2 id="值变化事件"><a href="#值变化事件" class="headerlink" title="值变化事件"></a>值变化事件</h2><p><code>broadcast</code><br><code>CheckboxStateChange</code><br><code>hashchange</code><br><code>input</code><br><code>RadioStateChange</code><br><code>readystatechange</code><br><code>ValueChange</code></p>
<h2 id="未分类的事件"><a href="#未分类的事件" class="headerlink" title="未分类的事件"></a>未分类的事件</h2><p><code>invalid</code><br><code>message</code><br><code>message</code><br><code>open</code><br><code>show</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">更多事件</a></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES语法(持续更新)</title>
    <url>/2020/09/24/ES6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="let和var"><a href="#let和var" class="headerlink" title="let和var"></a>let和var</h1><p>事实上var的设计可以看成JavaScript语言设计上的错误,但是这种错误多半不能修复和移除,因为需要向后兼容.</p>
<ul>
<li>大概十年前,Brendan Eich就决定修复这个问题,于是他添加了一个新的关键字:let</li>
<li>我们可以将let看成更加完美的var</li>
</ul>
<h2 id="var问题分析"><a href="#var问题分析" class="headerlink" title="var问题分析"></a>var问题分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">4</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">5</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925103505.png" alt="运行结果"></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="为什么点击每一个按钮的打印结果都为-第五个按钮被点击"><a href="#为什么点击每一个按钮的打印结果都为-第五个按钮被点击" class="headerlink" title="为什么点击每一个按钮的打印结果都为 第五个按钮被点击?"></a><strong>为什么点击每一个按钮的打印结果都为</strong> <code>第五个按钮被点击</code><strong>?</strong></h4><p>​    这是因为当给btns[i]添加click事件时,其事件内部使用该变量i,当循环继续执行,事件内部引用的i的值被修改了,所以才会在打印时全部都是第五个按钮被点击</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如果像上面那样,在事件添加完毕后,将i的值修改为3,那么所有按钮的打印结果都为<code>第3个按钮被点击</code></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一-使用闭包"><a href="#方案一-使用闭包" class="headerlink" title="方案一:使用闭包"></a>方案一:使用闭包</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">        btns[num].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+num+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925105049.png" alt="运行结果"></p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p><strong>为什么能使用闭包来解决该问题?</strong></p>
<p>​    这个就类似于Java中的值传递和引用传递,当你不使用闭包时,你所有按钮事件内部的i是同一个i,也就是它们的i的引用地址是相同的,那么你修改了i的值,因为你引用的都是同一个i,那么得到那个结果也就不足为奇了。</p>
<p>​    如果使用了闭包,就类似于,你给每一个按钮添加事件时,将i传入进去,函数内部使用局部变量num用来保存i的值(<strong>函数是一个作用域</strong>),那么我使用的就是num的值,而不是i的引用,所以你修改了i的值,不关num的事,所以最后的输出结果为所期待的结果</p>
<h4 id="方案二-使用let"><a href="#方案二-使用let" class="headerlink" title="方案二:使用let"></a>方案二:使用let</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span> + i + <span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  i = <span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925111537.png" alt="运行结果"></p>
<h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>ES6中加入了let,let它是有if和for的块级作用域。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>ES5之前因为if和for都没有块级作用域的概念,所以在很多使用,我们必须借助于function的作用域来解决应用外面变量的问题。</li>
<li>ES6中加入了let,let它是有if和for的块级作用域。</li>
</ul>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>在很多语言中都已经存在,主要的作用是将某个变量修饰成常量。</li>
<li>在JavaScript中也是如此,使用const修饰的标识符为常量,不可再次赋值。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>当我们修饰的标识符不会被再次赋值时,就可以使用const来保证数据的安全性。</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>被赋值的常量不可被再次赋值</li>
<li>在初始化常量时必须赋值</li>
<li>常量定义的对象不能修改,指的是该对象的引用不能修改,对象内的属性值是可以修改的</li>
</ol>
<h1 id="对象字面量的增强写法"><a href="#对象字面量的增强写法" class="headerlink" title="对象字面量的增强写法"></a>对象字面量的增强写法</h1><p><strong>什么叫做字面量?</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line">普通创建对象是这样创建的: const obj &#x3D; new Object()</span><br><span class="line">字面量就是: const obj &#x3D; &#123;&#125;</span><br><span class="line">这个大括号就叫做字面量</span><br></pre></td></tr></table></figure>
<h2 id="属性的增强写法"><a href="#属性的增强写法" class="headerlink" title="属性的增强写法"></a>属性的增强写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    age : age,</span><br><span class="line">    name : name,</span><br><span class="line">    height : height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    age,</span><br><span class="line">    name,</span><br><span class="line">    height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上两种写法最后的结果是等价的</span></span><br></pre></td></tr></table></figure>
<h2 id="函数的增强写法"><a href="#函数的增强写法" class="headerlink" title="函数的增强写法"></a>函数的增强写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    eat()&#123;</span><br><span class="line">		<span class="comment">//方法体        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上两种写法最后的结果是等价的</span></span><br></pre></td></tr></table></figure>
<h1 id="循环语法"><a href="#循环语法" class="headerlink" title="循环语法"></a>循环语法</h1><h2 id="普通for循环"><a href="#普通for循环" class="headerlink" title="普通for循环"></a>普通for循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用for-in-循环"><a href="#使用for-in-循环" class="headerlink" title="使用for  in 循环"></a>使用for  in 循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用for-of循环"><a href="#使用for-of循环" class="headerlink" title="使用for of循环"></a>使用for of循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h1><ul>
<li>使用单引号‘ ’</li>
<li>使用``,相较于‘ ’而言，``可以直接换行，而不用加+号</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本操作(一)</title>
    <url>/2020/09/21/Vue%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h1><h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a>Mustache语法</h2><p>使用双大括号,也就是mustache语法</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name + message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name + <span class="string">&#x27; &#x27;</span> + message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;  &#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;age * <span class="number">2</span>&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;君&#x27;</span>,</span><br><span class="line">      age: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757346/Vue相关/Vue的基本操作/1_uq1zcr.png" alt="运行结果"></p>
<h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><p>不期望某个地方的值是响应式的,就可以使用该指令</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2  v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757514/Vue相关/Vue的基本操作/2_tjrvbj.png" alt="运行结果"></p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;url&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-html=<span class="string">&quot;url&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757974/Vue相关/Vue的基本操作/3_zn2do2.png" alt="运行结果"></p>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>使用较少,因为不够灵活</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-text=<span class="string">&quot;message&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600758176/Vue相关/Vue的基本操作/4_rortqw.png" alt="运行结果"></p>
<h2 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h2><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600758367/Vue相关/Vue的基本操作/5_xns1np.png" alt="运行结果"></p>
<h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><p>cloak:斗篷</p>
<p>作用:当vue对象未创建时,将会显示v-cloak属性,而当vue对象创建完成以后,属性将自动删除,那么如果vue对象还未创建,可能发生页面上显示这个结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;h2&gt;</span><br></pre></td></tr></table></figure>
<p>而我们并不期望显示这个结果,而是如果当时vue对象未创建,直接不显示就好</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak]&#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-cloak&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果因为该代码的结果图不好表现,所以没有截图</p>
<h1 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h1><h2 id="v-bind指令基本使用"><a href="#v-bind指令基本使用" class="headerlink" title="v-bind指令基本使用"></a>v-bind指令基本使用</h2><p><strong>作用</strong></p>
<p>动态绑定属性</p>
<ul>
<li>比如动态绑定a元素的href属性</li>
<li>比如动态绑定img元素的src属性</li>
</ul>
<p><strong>缩写(语法糖)</strong></p>
<p>:</p>
<p><strong>预期</strong></p>
<p>any(with argument) | Object(without argument)</p>
<p><strong>参数</strong></p>
<p>attrOrProp(optional)</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;img :src=<span class="string">&quot;imgUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    &lt;!--等同于&lt;img v-bind:src=<span class="string">&quot;imgUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        imgUrl: <span class="string">&#x27;https://img30.360buyimg.com/babel/s1180x940_jfs/t1/147101/20/8922/101180/5f685a77Eac4e4d8f/cbc61d2e465fde2c.jpg.webp&#x27;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600760783/Vue相关/Vue的基本操作/6_vfzcbn.png" alt="运行结果"></p>
<h2 id="v-bind动态绑定class"><a href="#v-bind动态绑定class" class="headerlink" title="v-bind动态绑定class"></a>v-bind动态绑定class</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>在:class=”” 中直接使用对象</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>在:class=””中使用方法</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;getClass()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        getClass:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="built_in">this</span>.isActive&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!--请注意,数组内部如果元素加<span class="string">&#x27;&#x27;</span>,会将其当做字符串解析,如果不加<span class="string">&#x27;&#x27;</span>,则会当作变量去查找解析--&gt;</span><br><span class="line">    &lt;!--这样写,那么就不是动态的呢--&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-bind动态绑定style"><a href="#v-bind动态绑定style" class="headerlink" title="v-bind动态绑定style"></a>v-bind动态绑定style</h2><p>多用于组件的在多个地方的自定义的动态设置组件的样式</p>
<h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;key(属性名): value(属性值)&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;!--如果属性值不加单引号,会将属性值当做变量--&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: &#x27;50px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ2 + &#x27;px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ2 + &#x27;px&#x27;,color: colorZ&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;getStyles()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            fontSizeZ: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">            fontSizeZ2: <span class="number">50</span>,</span><br><span class="line">            colorZ: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getStyles:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>: <span class="built_in">this</span>.fontSizeZ2 + <span class="string">&#x27;px&#x27;</span>,<span class="attr">color</span>: <span class="built_in">this</span>.colorZ&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924141740.png" alt="运行结果"></p>
<h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;[baseStyle]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            baseStyle: &#123;</span><br><span class="line">                color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                fontSize: <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924141657.png" alt="运行结果"></p>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。模板是为了描述视图的结构。在模板中放入太多的逻辑会让模板过重且难以维护。这就是为什么 Vue.js 将绑定表达式限制为一个表达式。如果需要多于一个表达式的逻辑，应当使用<strong>计算属性</strong>。</p>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>拼接两个变量</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message + <span class="string">&#x27; &#x27;</span> + message2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125; &#123;&#123;message2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;getAllMessage()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;allMessage&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            message2: <span class="string">&#x27;Bye,Vue&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getAllMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 计算属性,给函数取名称时最好按照变量的命名方式</span></span><br><span class="line">        computed: &#123;</span><br><span class="line">            allMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924163151.png" alt="运行结果"></p>
<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>计算一个数组里面,所有书籍对象的总价格</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;总价格: &#123;&#123;totalPrice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            books: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;101&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;Java&#x27;</span>,</span><br><span class="line">                    price: <span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;102&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">                    price: <span class="number">100</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;103&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;C++&#x27;</span>,</span><br><span class="line">                    price: <span class="number">400</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;104&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;Python&#x27;</span>,</span><br><span class="line">                    price: <span class="number">300</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 遍历的三种方式</span></span><br><span class="line">                <span class="comment">//第一种</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span><br><span class="line">                    total += <span class="built_in">this</span>.books[i].price;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第二种</span></span><br><span class="line">               <span class="comment">/* for (let i in this.books) &#123;</span></span><br><span class="line"><span class="comment">                    total += this.books[i].price;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="comment">//第三种</span></span><br><span class="line">               <span class="comment">/* for (let book of this.books) &#123;</span></span><br><span class="line"><span class="comment">                    total += book.price;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="keyword">return</span> total;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924164456.png" alt="运行结果"></p>
<h2 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h2><p>计算属性一般都是只读属性,所以只有get方法,因为只有get方法,所以可以简写</p>
<p>而这又解释了为什么在调用计算属性的时候不用加()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        message2: <span class="string">&#x27;Bye,Vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        <span class="comment">// 简写</span></span><br><span class="line">        <span class="comment">// allMessage: function () &#123;</span></span><br><span class="line">        <span class="comment">//     return this.message+ &#x27; &#x27; + this.message2</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完整写法</span></span><br><span class="line">        <span class="comment">// 计算属性一般是没有set方法的,只读属性</span></span><br><span class="line">         allMessage: &#123;</span><br><span class="line">             get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2;</span><br><span class="line">             &#125;,</span><br><span class="line">             set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">const</span> messages = newValue.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                 <span class="built_in">this</span>.message = messages[<span class="number">0</span>];</span><br><span class="line">                 <span class="built_in">this</span>.message2 = messages[<span class="number">1</span>];</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="计算属性和Methods的对比"><a href="#计算属性和Methods的对比" class="headerlink" title="计算属性和Methods的对比"></a>计算属性和Methods的对比</h2><ul>
<li>methods方法和computed计算属性，两种方式的最终结果确实是完全相同</li>
<li>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。</li>
<li>methods方法，每当触发重新渲染时，调用方法将总会再次执行函数。</li>
<li>对于任何复杂逻辑，你都应当使用计算属性</li>
</ul>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="v-on介绍"><a href="#v-on介绍" class="headerlink" title="v-on介绍"></a>v-on介绍</h2><ul>
<li>作用: 绑定事件监听器</li>
<li>缩写: @</li>
<li>预期: Function | Inline Statement | Object</li>
<li>参数: event</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;counter++&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;counter--&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        increment()&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter++;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement()&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h2><p>当通过methods中定义方法,以供@click调用时,需要<strong>注意参数问题:</strong></p>
<ul>
<li>情况一: 如果该方法不需要额外参数,那么方法后的()可以不添加。<ul>
<li>但是需要注意: 如果方法本身中有一个参数,那么会默认将原生事件event参数传递进去。</li>
</ul>
</li>
<li>情况二: 如果需要同时传入某个参数,同时需要event时,可以通过$event传入事件。</li>
</ul>
<p><strong>代码:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!--事件调用的方法没有参数--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn1click&quot;</span>&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn1click()&quot;</span>&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    -----------------------------------------------------</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;!--在事件定义时,写函数时省略了小括号,但是方法本身是需要一个参数的,这个时候vue</span><br><span class="line">    会默认将浏览器产生的event事件对象作为参数传入到方法--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click(&#x27;test&#x27;)&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click()&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    ------------------------------------------------------</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;!--方法定义时,我们需要event对象,同时又需要其他参数--&gt;</span><br><span class="line">    &lt;!--在调用方法时,如何手动的获取到浏览器产生的event对象: $event--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click()&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click(&#x27;test&#x27;)&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click(&#x27;test&#x27;, $event)&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    ------------------------------------------------------</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btn1click() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn1Click&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            btn2click(event) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn2Click&quot;</span> + <span class="string">&quot;-----&quot;</span> + event);</span><br><span class="line">            &#125;,</span><br><span class="line">            btn3click(option,event)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn3wuClick&quot;</span> + <span class="string">&quot;-----option:&quot;</span> + option+<span class="string">&quot;------event:&quot;</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果:</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200928163634.png" alt="运行结果"></p>
<p><strong>注意:如果方法需要参数,传入的参数为String类型,那么需要加上<code>&#39; &#39;</code>,如果不加的话,vue会将其当做变量去data中进行查找,如果查找不到将会报错</strong></p>
<h2 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h2><ul>
<li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li>
<li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li>
<li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li>
<li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li>
<li><code>.native</code> - 监听组件根元素的原生事件。</li>
<li><code>.once</code> - 只触发一次回调。</li>
<li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li>
<li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li>
<li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li>
<li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li>
</ul>
<p><strong>示例:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; red: isRed &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: size + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">&quot;someThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="v-on事件"><a href="#v-on事件" class="headerlink" title="v-on事件"></a>v-on事件</h2><p><a href="https://www.junpzx.cn/2020/09/28/JavaScript%E4%BA%8B%E4%BB%B6/#more">点击查看</a></p>
<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><h2 id="v-model介绍"><a href="#v-model介绍" class="headerlink" title="v-model介绍"></a>v-model介绍</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<blockquote>
<p><strong>注意</strong>：<code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
</blockquote>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li>
</ul>
<blockquote>
<p><strong>注意</strong>：对于需要使用<a href="https://zh.wikipedia.org/wiki/输入法">输入法</a> (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 <code>input</code> 事件。</p>
</blockquote>
<h2 id="v-model基本使用"><a href="#v-model基本使用" class="headerlink" title="v-model基本使用"></a>v-model基本使用</h2><h3 id="文本（input）"><a href="#文本（input）" class="headerlink" title="文本（input）"></a>文本（input）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多行文本（textarea）"><a href="#多行文本（textarea）" class="headerlink" title="多行文本（textarea）"></a>多行文本（textarea）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：在文本区域插值 (<code>&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</p>
</blockquote>
<h3 id="复选框（checkbox）"><a href="#复选框（checkbox）" class="headerlink" title="复选框（checkbox）"></a>复选框（checkbox）</h3><h4 id="单个复选框绑定到boolean值："><a href="#单个复选框绑定到boolean值：" class="headerlink" title="单个复选框绑定到boolean值："></a>单个复选框绑定到boolean值：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多个复选框，绑定到同一个数组："><a href="#多个复选框，绑定到同一个数组：" class="headerlink" title="多个复选框，绑定到同一个数组："></a>多个复选框，绑定到同一个数组：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="单选按钮（radio）"><a href="#单选按钮（radio）" class="headerlink" title="单选按钮（radio）"></a>单选按钮（radio）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    picked: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="选择框（select）"><a href="#选择框（select）" class="headerlink" title="选择框（select）"></a>选择框（select）</h3><h4 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p>
</blockquote>
<h4 id="多选时-绑定到一个数组-："><a href="#多选时-绑定到一个数组-：" class="headerlink" title="多选时 (绑定到一个数组)："></a>多选时 (绑定到一个数组)：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-6&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>用 <code>v-for</code> 渲染的动态选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    options: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;One&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Two&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Three&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是有时我们可能想把值绑定到 Vue 实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，并且这个 property 的值可以不是字符串。</p>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">true-value</span>=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">false-value</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment">// 当没有选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p>
</blockquote>
<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>
<h3 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; &#x27;object&#x27;</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h3><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h3><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门</title>
    <url>/2020/09/21/Vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么?"></a>Vue.js是什么?</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h2 id="Vue是一个渐进式框架-什么是渐进式的呢"><a href="#Vue是一个渐进式框架-什么是渐进式的呢" class="headerlink" title="Vue是一个渐进式框架,什么是渐进式的呢?"></a>Vue是一个渐进式框架,什么是渐进式的呢?</h2><ul>
<li>渐进式意味着你可以将Vue作为你应用的一部分嵌入其中,带来更丰富的交互体验</li>
<li>或者如果你希望将更多的业务逻辑使用Vue实现,那么Vue的核心库以及其生态系统</li>
<li>比如Code+Vue-router+Vuex,也可以满足你各种各样的需求</li>
</ul>
<h2 id="Vue有很多特点和Web开发中常用的高级功能"><a href="#Vue有很多特点和Web开发中常用的高级功能" class="headerlink" title="Vue有很多特点和Web开发中常用的高级功能:"></a>Vue有很多特点和Web开发中常用的高级功能:</h2><ul>
<li>解耦视图和数据</li>
<li>可复用组件</li>
<li>前端路由技术</li>
<li>状态管理</li>
<li>虚拟DOM</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>直接CDN导入(CDN会选择距离最近的服务器进行下载,会提高下载效率)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本,包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 生产环境版本,优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载和引入</p>
<p>开发环境   <a href="https://vue.js.org/js/vue.js">https://vue.js.org/js/vue.js</a></p>
<p>生产环境   <a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p>
</li>
<li><p>npm安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Vue的基本使用"><a href="#Vue的基本使用" class="headerlink" title="Vue的基本使用"></a>Vue的基本使用</h1><h2 id="案例一-Hello-Vue"><a href="#案例一-Hello-Vue" class="headerlink" title="案例一:Hello Vue"></a>案例一:Hello Vue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let用于修饰变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// const用于修饰常量</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&quot;vue&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 编程范式: 声明式编程</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//用于挂载要管理的元素</span></span><br><span class="line">        data: &#123; <span class="comment">// 定义数据</span></span><br><span class="line">            message: <span class="string">&#x27;你好呀,pzx!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用js的做法(编程范式: 命令式编程)</span></span><br><span class="line">    <span class="comment">//1.创建div元素,设置id属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义变量叫message</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.将message变量放在前面的div元素中显示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.修改message的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.将message的值重新赋值给div</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600669908/Vue相关/Vue入门/1_wsql5b.png" alt="运行结果"></p>
<p><strong>代码做了什么事情:</strong></p>
<ol>
<li>首先创建了一个Vue对象</li>
<li>创建Vue对象的时候,传入了一些options:{}<ul>
<li>{}中包含了el属性:该属性决定了这个Vue对象挂载到哪一个元素上</li>
<li>{}中包含了data属性:该属性通常会存储一些数据<ul>
<li>这些数据可以是我们直接定义出来的,比如像上面那样</li>
<li>也可能是来自网络,从服务器加载出来的</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="案例二-Vue的列表显示"><a href="#案例二-Vue的列表显示" class="headerlink" title="案例二:Vue的列表显示"></a>案例二:Vue的列表显示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in tags&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            tags: [<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600671118/Vue相关/Vue入门/2_b7haeu.png" alt="运行结果"></p>
<p>这个地方主要使用<strong>v-for</strong>指令,而且它还是响应式的</p>
<ul>
<li>也就是当数组中的数据发生变化时,界面会自动改变</li>
</ul>
<h2 id="案例三-计数器"><a href="#案例三-计数器" class="headerlink" title="案例三:计数器"></a>案例三:计数器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!--    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;!--    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter-1 &lt; 0 ? counter=0 : counter--;&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;add&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;subtraction&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;yi</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.counter++;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;+已被点击&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            subtraction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.counter<span class="number">-1</span> &lt; <span class="number">0</span>?<span class="built_in">this</span>.counter=<span class="number">0</span>:<span class="built_in">this</span>.counter--;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;-已被点击&quot;</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600674786/Vue相关/Vue入门/3_dqgp6p.png" alt="运行结果"></p>
<p><strong>新的属性: methods,该属性用于在Vue对象中定义方法</strong></p>
<p><strong>新的指令: @click(等同于v-on:click,@click为前面的语法糖),该指令用于监听某个元素的点击事件,并且需要指定当发生点击时,执行的方法(方法通常是methods中定义的方法)</strong></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA、WebStrom最新版破解教程</title>
    <url>/2020/09/19/IDEA%E3%80%81WebStrom%E6%9C%80%E6%96%B0%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="激活方法"><a href="#激活方法" class="headerlink" title="激活方法"></a>激活方法</h1><h2 id="1、下载完成后，双击-ideaIU-2020-2-exe-打开安装软件；"><a href="#1、下载完成后，双击-ideaIU-2020-2-exe-打开安装软件；" class="headerlink" title="1、下载完成后，双击 ideaIU-2020.2.exe,打开安装软件；"></a>1、下载完成后，双击 <code>ideaIU-2020.2.exe</code>,打开安装软件；</h2><blockquote>
<p>PS: 确保电脑没有安装老版本软件，如有请卸载。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/1_m4b8on.png" alt=""></p>
<h2 id="2、-安装目录选择；"><a href="#2、-安装目录选择；" class="headerlink" title="2、 安装目录选择；"></a><strong>2、</strong> 安装目录选择；</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/2_juogad.png" alt=""></p>
<h2 id="3、-按自己电脑配置勾选："><a href="#3、-按自己电脑配置勾选：" class="headerlink" title="3、 按自己电脑配置勾选："></a><strong>3、</strong> 按自己电脑配置勾选：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/3_cewijo.png" alt=""></p>
<h2 id="4、-点击-next-安心等待其安装完成："><a href="#4、-点击-next-安心等待其安装完成：" class="headerlink" title="4、 点击 next, 安心等待其安装完成："></a><strong>4、</strong> 点击 <code>next</code>, 安心等待其安装完成：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/4_erf7vj.png" alt=""></p>
<h2 id="5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件"><a href="#5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件" class="headerlink" title="5、 安装完成后，勾选 Run IntelliJ IDEA，点击 finish 运行软件:"></a><strong>5、</strong> 安装完成后，勾选 <code>Run IntelliJ IDEA</code>，点击 <code>finish</code> 运行软件:</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/5_pxaqbd.png" alt=""></p>
<h2 id="6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate"><a href="#6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate" class="headerlink" title="6、 会先弹出一个注册框，勾选 Evaluate for free, 点击 Evaluate:"></a><strong>6、</strong> 会先弹出一个注册框，勾选 <code>Evaluate for free</code>, 点击 <code>Evaluate</code>:</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/6_l7v8mh.png" alt=""></p>
<h2 id="7、-2020-版本文件夹中的激活补丁破解补丁拖入IDEA-界面中"><a href="#7、-2020-版本文件夹中的激活补丁破解补丁拖入IDEA-界面中" class="headerlink" title="7、 2020 版本文件夹中的激活补丁破解补丁拖入IDEA 界面中"></a><strong>7、</strong> 2020 版本文件夹中的激活补丁<em><a href="https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg">破解补丁</a></em>拖入IDEA 界面中</h2><p>下载链接：<a href="https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg">https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg</a></p>
<p>提取码：0000</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511961/idea、webstorm最新版破解教程/7_o7c2z1.png" alt=""></p>
<p> <strong>补丁，拖不进去，请重启 IDEA ，新建一个Java 项目，写一个空的 main 方法，再次试试</strong></p>
<p> <strong>注意：激活补丁，拖进去之后，激活补丁的位置不要更换，不要删除。否则激活之后还会失效，</strong></p>
<p> <strong>注意：激活补丁，拖进去，等于是程序，帮你去写一个激活补丁的位置，你换补丁jar位置，或者，删除补丁jar，就找不到激活补丁了</strong></p>
<h2 id="8、拖入补丁后会弹框，点击-restart-重启-idea："><a href="#8、拖入补丁后会弹框，点击-restart-重启-idea：" class="headerlink" title="8、拖入补丁后会弹框，点击 restart 重启 idea："></a>8、拖入补丁后会弹框，点击 <code>restart</code> 重启 <strong>idea</strong>：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/8_ttpxq1.png" alt=""></p>
<h2 id="9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装："><a href="#9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装：" class="headerlink" title="9、 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 Activation Code，通过注册码来激活，点击为IDEA安装："></a>9、 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 <code>Activation Code</code>，通过注册码来激活，点击<code>为IDEA安装</code>：</h2><p><strong>安装参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HbVMaxqQrTt4UvDUk8fhyFT7uRdv48bqJsQMwVFp53YH9PZC9l+ZxAgnA60cLwwhURw&#x2F;e4DcZZtle4tQzur4yWRk35qghES4JLFlmKty&#x2F;UNiYh6RZyXeCNPTCvIqxT9HR2YKqQT93be6AfLTcbJwPSLO201g+HbMbg6+aK1MUJI</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/10_skts9u.png" alt=""></p>
<h2 id="10、-点击是，重启-IDEA-即可"><a href="#10、-点击是，重启-IDEA-即可" class="headerlink" title="10、 点击是，重启 IDEA 即可"></a><strong>10、</strong> 点击<code>是</code>，重启 <strong>IDEA</strong> 即可</h2><h1 id="验证是否激活成功"><a href="#验证是否激活成功" class="headerlink" title="验证是否激活成功"></a>验证是否激活成功</h1><p>验证步骤如下：</p>
<h2 id="1、-进入-IDEA-界面后，点击-Help-gt-Register-查看："><a href="#1、-进入-IDEA-界面后，点击-Help-gt-Register-查看：" class="headerlink" title="1、 进入 IDEA 界面后，点击 Help -&gt; Register 查看："></a><strong>1、</strong> 进入 <strong>IDEA</strong> 界面后，点击 <code>Help</code> -&gt; <code>Register</code> 查看：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511960/idea、webstorm最新版破解教程/11_sbvbve.png" alt=""></p>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>WebStorm</tag>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo+GitHub 搭建个人免费博客教程</title>
    <url>/2020/09/17/%E4%BD%BF%E7%94%A8%20Hexo+GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>
<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>
<p>此博客搬运至 : <a href="https://zhuanlan.zhihu.com/p/60578464">知乎-“crystal”</a></p>
<h1 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h1><h2 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h2><ul>
<li><a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages">What is GitHub Pages? - GitHub Help</a></li>
</ul>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h2><ul>
<li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li>
</ul>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h2 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h2><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/1_sfumsc.jpg" alt="Hexo+GitHub Pages发文流程"></p>
<h2 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h2><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>
<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>
<h1 id="三、安装教程"><a href="#三、安装教程" class="headerlink" title="三、安装教程"></a>三、安装教程</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><h3 id="1-1-注意事项"><a href="#1-1-注意事项" class="headerlink" title="1.1 注意事项"></a>1.1 注意事项</h3><ul>
<li>输入代码时，核对准确，最好切换成英文输入法；</li>
<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>
<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>
<li>小白请严格按步骤进行，不要跳！</li>
</ul>
<h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600399124/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/10_wlxyrv.jpg" alt="查看版本信息"></p>
<h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2.连接 Github"></a>2.连接 Github</h2><p>使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>
<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/2_xkmsjc.jpg" alt="设置SSH keys"></p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/3_npv1ub.jpg" alt="验证连接"></p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3.创建 Github Pages 仓库"></a>3.创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/4_vzys4g.jpg" alt="创建仓库"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4.本地安装 Hexo 博客程序"></a>4.本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1 安装 Hexo"></a>4.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/5_bjyr9t.jpg" alt="安装Hexo命令"></p>
<h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2 Hexo 初始化和本地预览"></a>4.2 Hexo 初始化和本地预览</h3><p><strong>初始化并安装所需组件：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>
<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>
<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398980/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/6_q9rdks.jpg" alt="预览"></p>
<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>
<p>Hexo 博客文件夹目录结构如下：</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/7_sp5gdj.jpg" alt=""></p>
<h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5.部署 Hexo 到 GitHub Pages"></a>5.部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6.绑定域名（可选）"></a>6.绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>
<p>我们使用 <a href="https://homenew.console.aliyun.com/">阿里云</a> 进行注册,如果是新用户的话,com域名差不多50RMB左右,cn域名10RMB左右。</p>
<h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="6.1 域名注册和解析"></a>6.1 域名注册和解析</h3><ul>
<li>域名注册和解析教程：</li>
</ul>
<p>在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398236/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE_hjjrkx.png" alt=""></p>
<h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="6.2 绑定域名到 Hexo 博客"></a>6.2 绑定域名到 Hexo 博客</h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com，保存名称为">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>
<p>清除缓存等文件并重新发布网站：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>
<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>
<h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="6.3 开启 HTTPS"></a>6.3 开启 HTTPS</h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/8_udy9jz.jpg" alt="开启Https"></p>
<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>
<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>
<hr>
<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>
<h3 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p>
<p>注意：冒号后要加一个空格！</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Hexo-设置显示文章摘要，首页不显示全文"><a href="#Hexo-设置显示文章摘要，首页不显示全文" class="headerlink" title="Hexo 设置显示文章摘要，首页不显示全文"></a>Hexo 设置显示文章摘要，首页不显示全文</h3><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `` 进行分段。</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/9_vgrnk5.jpg" alt="查看更多"></p>
<h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h3><p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>
<h3 id="修改并部署后没有效果"><a href="#修改并部署后没有效果" class="headerlink" title="修改并部署后没有效果"></a>修改并部署后没有效果</h3><p>使用 <code>hexo clean</code> 清理后重新部署。</p>
<h3 id="开启-HTTPS-后访问网站显示连接不安全？"><a href="#开启-HTTPS-后访问网站显示连接不安全？" class="headerlink" title="开启 HTTPS 后访问网站显示连接不安全？"></a>开启 HTTPS 后访问网站显示连接不安全？</h3><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>
<h3 id="Mac-安装-Hexo-报错无法安装"><a href="#Mac-安装-Hexo-报错无法安装" class="headerlink" title="Mac 安装 Hexo 报错无法安装"></a>Mac 安装 Hexo 报错无法安装</h3><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>
<h3 id="npm-下载速度慢，甚至完全没反应"><a href="#npm-下载速度慢，甚至完全没反应" class="headerlink" title="npm 下载速度慢，甚至完全没反应"></a>npm 下载速度慢，甚至完全没反应</h3><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>
<p>临时更换方法：在 npm 安装命令后面加上：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>
<h3 id="Hexo命令报以下错误"><a href="#Hexo命令报以下错误" class="headerlink" title="Hexo命令报以下错误"></a>Hexo命令报以下错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.js:35 throw new TypeError(&#39;Console expects a writable stream instance&#39;);</span><br></pre></td></tr></table></figure>
<p>该错误为nodejs的版本不够高,需要更换成最新版!</p>
<h1 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h1><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>
<p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
