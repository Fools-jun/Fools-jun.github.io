<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git常用命令</title>
    <url>/posts/7065.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201221142624.png" alt="git流程图"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- Workspace：工作区</span><br><span class="line">- Index / Stage：暂存区</span><br><span class="line">- Repository：仓库区（或本地仓库）</span><br><span class="line">- Remote：远程仓库</span><br></pre></td></tr></table></figure>
<h3 id="1-创建仓库命令"><a href="#1-创建仓库命令" class="headerlink" title="1.创建仓库命令"></a>1.创建仓库命令</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>
<h3 id="2-配置命令"><a href="#2-配置命令" class="headerlink" title="2.配置命令"></a>2.配置命令</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>
<h3 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3.增加/删除文件"></a>3.增加/删除文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream-to=origin/远程分支名</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h3 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h3 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h3 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8.远程同步"></a>8.远程同步</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]git</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
<h3 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9.撤销"></a>9.撤销</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="10-其他"><a href="#10-其他" class="headerlink" title="10.其他"></a>10.其他</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手与四次挥手</title>
    <url>/posts/15553.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种断点我们叫作套接字（socket），它的定义为端口号拼接到IP地址即构成了套接字，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。</p>
</blockquote>
<h2 id="TCP报文头部"><a href="#TCP报文头部" class="headerlink" title="TCP报文头部"></a>TCP报文头部</h2><ul>
<li>源端口和目的端口，各占2个字节,分别写入源端口和目的端口。</li>
<li>序号，占4个字节，<strong>TCP连接中传送的字节流中的每个字节都按顺序编号</strong>。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始。</li>
<li>确认号，占4个字节，<strong>是期望收到对方下一个报文的第一个数据字节的序号</strong>。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，<strong>这表明B正确的收到了A发送的到序号700为止的数据</strong>。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701。</li>
<li>数据偏移，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远。</li>
<li>保留，占6位，保留今后使用，但目前应都为0。</li>
<li>紧急URG，当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据。</li>
<li>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1。</li>
<li>推送PSH，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1。</li>
<li>复位RST，当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接。</li>
<li>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1。</li>
<li>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放。</li>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受。</li>
<li>检验和，占2字节，校验首部和数据这两部分。</li>
<li>紧急指针，占2字节，指出本报文段中的紧急数据的字节数。</li>
<li>选项，长度可变，定义一些其他的可选的参数。</li>
</ul>
<h2 id="TCP连接的建立（三次握手）"><a href="#TCP连接的建立（三次握手）" class="headerlink" title="TCP连接的建立（三次握手）"></a>TCP连接的建立（三次握手）</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210322100555.gif" alt="三次握手动图"></p>
<blockquote>
<p><strong>最开始的时候客户端和服务器都是处于CLOSED状态。主动打开连接的为客户端，被动打开连接的是服务器。</strong></p>
</blockquote>
<ol>
<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态。</li>
<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</li>
<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。</li>
<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</li>
<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。<br> <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210322114039.png" alt="三次握手"></li>
</ol>
<p>简而言之，三次握手类比于A与B打电话：</p>
<ol>
<li>A说：听的到吗？</li>
<li>B说: 听得到，你听得到吗？</li>
<li>A说： 听到了！</li>
</ol>
<p>那么这样，就建立起来了一个连接。</p>
<h2 id="为什么TCP客户端最后还要发送一次确认呢？"><a href="#为什么TCP客户端最后还要发送一次确认呢？" class="headerlink" title="为什么TCP客户端最后还要发送一次确认呢？"></a>为什么TCP客户端最后还要发送一次确认呢？</h2><blockquote>
<p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>
<p>如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p>
<p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p>
</blockquote>
<p>在这个地方，请不要纠结如果第三次失败怎么办，如果大家都像你这样纠结的话，那么就陷入死循环了，如果当时设计者像你这样纠结的话，就不会有http和tcp了。</p>
<h2 id="TCP连接的释放（四次挥手）"><a href="#TCP连接的释放（四次挥手）" class="headerlink" title="TCP连接的释放（四次挥手）"></a>TCP连接的释放（四次挥手）</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210322114044.gif" alt="四次挥手动图"></p>
<blockquote>
<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。</p>
</blockquote>
<ol>
<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li>
<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li>
<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li>
<li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>
<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗ *∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li>
<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210322114048.png" alt="四次挥手"></p>
<p>简而言之，四次挥手类比于A与B打电话：</p>
<ol>
<li>A说：我说完了</li>
<li>B说：我知道了</li>
<li>B说：xxxxx，我说完了</li>
<li>A说：我知道了</li>
</ol>
<p>那么这样，就结束了本次连接。</p>
<h2 id="为什么客户端最后还要等待2MSL"><a href="#为什么客户端最后还要等待2MSL" class="headerlink" title="为什么客户端最后还要等待2MSL?"></a>为什么客户端最后还要等待2MSL?</h2><blockquote>
<p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>
<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>
<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>
<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。<br>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
</blockquote>
<h2 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h2><blockquote>
<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/posts/54372.html</url>
    <content><![CDATA[<h1 id="1-将本地项目初始化到远程仓库中"><a href="#1-将本地项目初始化到远程仓库中" class="headerlink" title="1.将本地项目初始化到远程仓库中"></a>1.将本地项目初始化到远程仓库中</h1><h2 id="方法1-无敌暴力法"><a href="#方法1-无敌暴力法" class="headerlink" title="方法1: 无敌暴力法"></a>方法1: 无敌暴力法</h2><p>clone项目到本地，然后复制文件上传</p>
<h2 id="方法2-强行合并法"><a href="#方法2-强行合并法" class="headerlink" title="方法2: 强行合并法"></a>方法2: 强行合并法</h2><ol>
<li><p>将本地项目初始化为git仓库，并将项目中的文件上传到新建的本地git仓库中，如果本地项目已经是一个git仓库了，请跳过这一步。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;描述&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将本地仓库和远程仓库进行关联。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>将远程仓库中的数据拉取到本地仓库中</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
<p> 如果含有共同的文件时需要：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge origin&#x2F;master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
</li>
<li><p>将本地仓库的数据推送到远程仓库中</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p> 用 <code>git push</code> 命令，实际上是把当前分支 <code>master</code> 推送到远程。</p>
<blockquote>
<p>注：由于远程库是空的，我们第一次推送 <code>master</code> 分支时，加上了 <code>-u</code> 参数，Git不但会把本地的 <code>master</code> 分支内容推送的远程新的 <code>master</code> 分支，还会把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
</blockquote>
</li>
</ol>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>XSD与DTD区别和联系</title>
    <url>/posts/40227.html</url>
    <content><![CDATA[<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>以下内容来自<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">维基百科</a>：</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/XML">XML</a>文件的<strong>文档类型定义</strong>（Document Type Definition）可以看成一个或者多个XML文件的模板，在这里可以定义XML文件中的元素、元素的属性、元素的排列方式、元素包含的内容等等。</p>
<p>DTD（Document Type Definition）概念缘于SGML，每一份SGML文件，均应有相对应的DTD。对XML文件而言，DTD并非特别需要，well-formed XML就不需要有DTD。DTD有四个组成如下：</p>
<ul>
<li>元素（Elements）</li>
<li>属性（Attribute）</li>
<li>实体（Entities）</li>
<li>注释（Comments）</li>
</ul>
<p>由于DTD限制较多，使用时较不方便，近来已渐被<a href="https://zh.wikipedia.org/wiki/XML_Schema">XML Schema</a>所取代。</p>
</blockquote>
<p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</p>
<p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p>
<h2 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h2><ul>
<li>元素声明语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称　元素內容&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>属性声明语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称、属性名称、属性值类型、属性的内定值&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>实体声明语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称　实体内容&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注释语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 注解內容 --&gt;</span><br></pre></td></tr></table></figure>
<h1 id="XSD"><a href="#XSD" class="headerlink" title="XSD"></a>XSD</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>以下内容来自<a href="https://zh.wikipedia.org/wiki/XML_Schema">维基百科</a>：</p>
<blockquote>
<p><strong>XSD (XML Schema Definition)</strong>是<a href="https://zh.wikipedia.org/wiki/World_Wide_Web_Consortium">W3C</a>于2001年5月发布的推荐标准，指出如何形式描述XML文档的元素。XSD是许多<a href="https://zh.wikipedia.org/wiki/XML_Schema_语言">XML Schema 语言</a>中的一支。XSD是首先分离于XML本身的schema语言，故获取W3C的推荐地位。</p>
<p>像所有<a href="https://zh.wikipedia.org/wiki/XML_Schema_语言">XML Schema 语言</a>一样，XSD用来描述一组规则──一个XML文件必须遵守这些规则，才能根据该schema‘合法（Valid）’。</p>
<p>然而，与其他<a href="https://zh.wikipedia.org/wiki/XML_Schema_语言">XML Schema 语言</a>不同，XSD意图设计为在确认一个文档的有效性时，将会产生满足特定<a href="https://zh.wikipedia.org/wiki/數據類型">数据类型</a>的一个信息集合。这种后验证的<a href="https://zh.wikipedia.org/wiki/XML信息集">XML信息集</a>可用来开发XML文件处理软件。</p>
</blockquote>
<h2 id="XSD名称的来源"><a href="#XSD名称的来源" class="headerlink" title="XSD名称的来源"></a>XSD名称的来源</h2><p>因为有其他XML schema 语言存在，故在引用这W3C建议的语言时，使用XML Schema或W3C XML Schema，Schema永远前缀大写。</p>
<p>“XML Schema”在2001年5月成为W3C推荐标准。由于“XML Schema”作为一种W3C的推荐标准的名字与广义的<a href="https://zh.wikipedia.org/wiki/XML_Schema_语言">XML Schema 语言</a>存在名称上的混淆，用户社区的一部分人采用了“WXS”来称呼它， 用户社区的另一部分人采用“<strong>XSD</strong>”（<strong>X</strong>ML <strong>S</strong>chema <strong>D</strong>efinition<a href="https://zh.wikipedia.org/wiki/首字母縮略字">首字母缩略字</a>）来称呼它。W3C发布的1.1标准采用了“<strong>XSD</strong>”作为官方称呼。</p>
<h2 id="Schema与schema文档"><a href="#Schema与schema文档" class="headerlink" title="Schema与schema文档"></a>Schema与schema文档</h2><p>技术上说<strong>schema</strong>是元数据的一个抽象集合，包含一套<strong>schema component</strong>: 主要是元素与属性的声明、复杂与简单数据类型的定义。这些schema component通常是在处理一批<strong>schema document</strong>时被创建。schema文档包含着schema component的源语言定义。在日常使用中，一个schema文档常被称作一个schema。</p>
<p>Schema文档通过名字空间组织起来：所有的被命名的schema component属于一个目标名字空间；这个目标名字空间是schema文档作为整体的一个属性。schema文档可以包含进来（include）使用同一名字空间的其它schema文档，也可以导入（import）使用不同名字空间的schema文档。</p>
<p>当一个实例文档针对一个schema来验证有效性时（这一过程称为<em>assessment</em>），用来验证有效性的schema可以作为参数提供给验证器，也可以在实例文档中作为两种特殊属性之一直接提供：</p>
<ul>
<li><code>xsi:schemaLocation</code></li>
<li><code>xsi:noNamespaceSchemaLocation</code>.这种机制要求客户启动验证以充分相信这个文档，知道文档对正确的schema是有效的。</li>
</ul>
<p>“xsi”是名字空间”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;的传统前缀。">http://www.w3.org/2001/XMLSchema-instance&quot;的传统前缀。</a></p>
<p>XML Schema Documents通常有<a href="https://zh.wikipedia.org/wiki/文件扩展名">文件扩展名</a>“.xsd”. XSD还没有专门的<a href="https://zh.wikipedia.org/wiki/互联网媒体类型">互联网媒体类型</a>，因此按照 RFC 3023使用”application/xml”或”text/xml” .</p>
<h2 id="Schema-component"><a href="#Schema-component" class="headerlink" title="Schema component"></a>Schema component</h2><p>主要的schema component有:</p>
<ul>
<li><strong>元素声明</strong>（Element declaration）, 定义了元素的性质。包括：元素名字、目标名字空间；一个非常重要的性质是元素的类型，它限制了元素包含哪些属性与子元素。在XSD 1.1标准中，可以根据属性的值来有条件定义元素类型。一个元素可以属于一个替换群（substitution group），如果元素E在元素H的替换群中，那么schema许可H出现的地方E都可以出现。元素可以有完整性（integrity）约束：唯一性（uniqueness）约束确定特定值在该元素为根的子树中是独一无二的；引用（referential）约束确定值必须匹配一些其它元素的标识符。元素声明可以是全局的或局部的，允许同一个名字被用于一个实例文档的不同部分的不相关的元素。</li>
<li><strong>属性声明</strong>（Attribute declaration）,定义了属性的性质。包括：属性名字、目标名字空间，属性类型限制了属性可以取哪些值，也可以指出属性的缺省值或固定值（fixed value，即属性只能取这个值）。</li>
<li><strong>简单与复杂数据类型</strong>（Simple and complex type）.详见下节</li>
<li><strong>模型群</strong>（model group）与<strong>属性群</strong>（attribute group）定义。这实际上是宏（macro）：被命名的元素的群与属性的群，可在许多数据类型定义中被重用。</li>
<li><strong>属性使用</strong>（attribute use）表示复杂数据类型与属性声明的关系，指出属性是必需的还是可选的，在什么时候使用这种数据类型。</li>
<li><strong>元素粒子</strong>（element particle）类似于表示复杂类型与元素的关系，指出元素在上下文中出现的最大与最小次数。类似于元素粒子，内容模型可以包括<strong>模型群粒子</strong>，在语法上相当于非终结符：定义了允许的元素序列的选择与重复的单位。此外，<strong>通配符粒子</strong>表示了一套元素或元素序列。</li>
</ul>
<p>其它更专门的schema component包括annotations, assertions, notations, 以及包含了schema整体信息的<strong>schema component</strong>.</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>简单数据类型（simple type）包含了可以出现在元素或属性的文本值。这是XSD与DTD的最大区别。</p>
<p>XSD提供了一套19个基本数据类型：</p>
<ul>
<li><code>anyURI</code></li>
<li><code>base64Binary</code></li>
<li><code>boolean</code></li>
<li><code>date</code></li>
<li><code>dateTime</code></li>
<li><code>decimal</code></li>
<li><code>double</code></li>
<li><code>duration</code></li>
<li><code>float</code></li>
<li><code>hexBinary</code></li>
<li><code>gDay</code></li>
<li><code>gMonth</code></li>
<li><code>gMonthDay</code></li>
<li><code>gYear</code></li>
<li><code>gYearMonth</code></li>
<li><code>NOTATION</code></li>
<li><code>QName</code></li>
<li><code>string</code></li>
<li><code>time</code>).</li>
</ul>
<p>可以从这些基本数据类型通过三种机制构建三种数据类型：</p>
<ul>
<li>restriction (减少值集的范围),</li>
<li>list (允许一个值的序列),</li>
<li>union (允许从几个数据类型中选择值).</li>
</ul>
<p>XSD规范定义了25个导出数据类型。用户可以在schema中进一步定义自己的导出类型。</p>
<p>Restriction机制包括指出最大最小值、<a href="https://zh.wikipedia.org/wiki/正则表达式">正则表达式</a>、限制字符串的长度、限制十进制数的位数等。XSD 1.1又增加了assertions, 即通过一个[XPath 2.0]]表达式给出任意约束的能力。</p>
<p>复杂数据类型描述了一个元素的许可内容。包括这个元素、属性、子元素的许可内容。复杂类型定义由一套属性使用与一个内容模型组成。内容模型可以是：</p>
<ul>
<li>只有元素的内容（element-only content）, 不允许有文本（但可以有空白符或者子元素可以有文本）;</li>
<li>简单内容（simple content）, 允许有文本，不允许有子元素;</li>
<li>空内容（empty content）, 文本与子元素都不被允许;</li>
<li>混合内容（mixed content）, 文本与子元素都可以有.</li>
</ul>
<p>复杂数据类型可以从别的复杂类型导出：</p>
<ul>
<li>restriction方法，不允许基类型允许的一些元素、属性或者值</li>
<li>extension方法，允许额外的属性或元素出现。</li>
</ul>
<p>XSD 1.1又增加了assertion方法来约束复杂类型, 即通过一个[XPath 2.0]]表达式必须求值为真</p>
<h2 id="Schema-既验信息集（Post-Schema-Validation-Infoset）"><a href="#Schema-既验信息集（Post-Schema-Validation-Infoset）" class="headerlink" title="Schema 既验信息集（Post-Schema-Validation Infoset）"></a>Schema 既验信息集（Post-Schema-Validation Infoset）</h2><p>基于 Schema 的验证完成后，可以按照 Schema 所隐含的数据模型来表达文档的结构与内容。XML Schema 数据模型包括：</p>
<ul>
<li>词汇（元素与属性名称集）</li>
<li>内容模型（关联与结构）</li>
<li>数据类型</li>
</ul>
<p>这些信息的集合即为 Schema 既验信息集（Post-Schema-Validation Infoset （PSVI））。对于有效的 XML，PSVI 给它赋以特定的“类型”，从而便于以对象方式来处理整个文档，并应用面向对象程序设计（OOP）范式。</p>
<h2 id="XML-Schema的次要用途"><a href="#XML-Schema的次要用途" class="headerlink" title="XML Schema的次要用途"></a>XML Schema的次要用途</h2><p>XML Schema的主要用途是形式描述XML文档，然而最终的schema除了简单验证文档外还有许多其他用途。</p>
<h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>Schema可用于生成代码，这称作{[tsl|en|XML Data Binding}}。这些代码允许XML文档的内容作为编程环境中的对象。</p>
<h3 id="XML文件结构文档的生成"><a href="#XML文件结构文档的生成" class="headerlink" title="XML文件结构文档的生成"></a>XML文件结构文档的生成</h3><p>Schema可用于产生人可读的文档来描述一个XML文件的结构。这在作者利用了标记元素（annotation element）时非常有用。</p>
<h2 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h2><p>一个Schema的简易示例，描述某个指定的国家，是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xs</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Country&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">&quot;Country&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;population&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:decimal&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一份遵从这个视图的XML文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">country</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;country.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>France<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">population</span>&gt;</span>59.7<span class="tag">&lt;/<span class="name">population</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="DTD和XSD的区别和联系"><a href="#DTD和XSD的区别和联系" class="headerlink" title="DTD和XSD的区别和联系"></a>DTD和XSD的区别和联系</h1><p><strong>以下内容转载至知乎-<a href="https://www.zhihu.com/question/38843167/answer/78782017">wuxinliulei</a></strong></p>
<p>DTD(Document Type Definition) 是一套关于标记符的语法规则。<br>它是XML1.0版规格的一部分,是XML文件的验证机制,属于XML文件组成的一部分。DTD 是一种保证XML文档格式正确的有效方法，可通过比较XML文档和DTD文件来看文档是否符合规范，元素和标签使用是否正确。XML文件提供应用程序一个 数据交换的格式,DTD正是让XML文件能成为数据交换标准,因为不同的公司只需定义好标准DTD,各公司都能依DTD建立XML文件,并且进行验证,如 此就可以轻易的建立标准和交换数据，这样满足了网络共享和数据交互。DTD文件是一个ASCII文本文件，后缀名为.dtd。</p>
<h2 id="1-为什么需要dtd，xsd-这种xml文档定义描述？"><a href="#1-为什么需要dtd，xsd-这种xml文档定义描述？" class="headerlink" title="1.为什么需要dtd，xsd 这种xml文档定义描述？"></a>1.为什么需要dtd，xsd 这种xml文档定义描述？</h2><p>对于一个格式良好的XML文档，我们只能保证这个文档的格式符合XML规范，但是元素与元素之间的关系、元素与属性的关系，属性的取值是否正确，我们就无法得知了。对于一个格式良好的文档，如果仅仅是在有限的应用中使用，或者作为数据的存储传输，那么也能很好的满足我们的应用。但是如果要让其他用户理解你的XML文档，或者和其他的应用进行数据交换，那么就有必要提供一种机制，来保证我们所写的XML文档和别人所写的XML文档其结构是相同的，元素与元素之间的关系是正确的，属性的取值也是符合要求的。</p>
<h2 id="2-在XML当中引入DTD有哪些方式？"><a href="#2-在XML当中引入DTD有哪些方式？" class="headerlink" title="2.在XML当中引入DTD有哪些方式？"></a><strong>2.在XML当中引入DTD有哪些方式？</strong></h2><pre><code>**我们可以直接在XML文档中定义DTD，也可以通过URI引用外部的DTD文件，或者同时采用这两种方式。**
 ### ①XML文档中内部定义DTD
  内部的 DOCTYPE 声明，通过下面的语法包装在一个 DOCTYPE 声明中： 
</code></pre><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt; 　</span><br></pre></td></tr></table></figure>
<p>　　带有 DTD 的 XML 文档实例 　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; 　</span><br><span class="line">&lt;!DOCTYPE note [ 　</span><br><span class="line">　&lt;!ELEMENT note (to,from,heading,body)&gt; 　</span><br><span class="line">　&lt;!ELEMENT to (#PCDATA)&gt; 　</span><br><span class="line">　&lt;!ELEMENT from (#PCDATA)&gt; 　</span><br><span class="line">　&lt;!ELEMENT heading (#PCDATA)&gt; 　</span><br><span class="line">　&lt;!ELEMENT body (#PCDATA)&gt; 　　</span><br><span class="line">]&gt; 　</span><br><span class="line"></span><br><span class="line">&lt;note&gt;</span><br><span class="line">     &lt;to&gt;Tove&lt;&#x2F;to&gt; 　　</span><br><span class="line">     &lt;from&gt;Jani&lt;&#x2F;from&gt; 　</span><br><span class="line">   　&lt;heading&gt;Reminder&lt;&#x2F;heading&gt; 　</span><br><span class="line">   　&lt;body&gt;Don&#39;t forget me this weekend&lt;&#x2F;body&gt; 　</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上 DTD 解释如下：</strong></p>
<p>!DOCTYPE note (第二行)定义此文档是 note 类型的文档。 　<br>!ELEMENT note (第三行)定义 note 元素有四个元素：”to、from、heading,、body” 　<br>!ELEMENT to (第四行)定义 to 元素为 “#PCDATA” 类型 　　<br>!ELEMENT from (第五行)定义 from 元素为 “#PCDATA” 类型 　<br>!ELEMENT heading (第六行)定义 heading 元素为 “#PCDATA” 类型 　<br>!ELEMENT body (第七行)定义 body 元素为 “#PCDATA” 类型</p>
<p>   再举一个例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;gb2312&quot; standalone=&quot;yes&quot;&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE greeting [</span></span><br><span class="line"><span class="meta">   &lt;!ELEMENT greeting (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta"> ]&gt;</span></span><br></pre></td></tr></table></figure>
<p>  文档类型声明由&lt;! 开始，后面紧跟一个关键字DOCTYPE，然后是文档根元素的名称，接下来是标记生命块，标记声明块是放在左中括号 [ 和右中括号 ] 之间的，由一个或者多个标记声明构成，最后由&gt; 结束。<br>   在DTD当中，所有关键字都是大写的，就像在这里看到的ELEMENT、#PCDATA一样，在后面我们还会看到其他的关键字。不过在DTD中定义的元素和属性的大小写是可以任意指定的，但是要注意，XML文档是大小写相关的，所以一旦给一个元素命名吗，那么整个文档中都要使用相同的大小写。例如：greeting 和Greeting是两个不同的元素名。</p>
<pre><code> 在XML文档中定义DTD，比较直观，修改也比较方便，而且不用担心XML处理器找不到DTD，但是它也有一些缺点：
1.在文档中定义DTD会导致文档本身的长度增加，在传输数据市，即使不需要验证文档的有效性，这些声明也会随文档一起传输。
2.如果多个XML文档需要共用一个DTD，我们就需要在每个文档中加入DTD，这是相当繁琐的。
</code></pre><p>要解决上面两个问题，我们将dtd放到一个单独的文件中去定义，在XML文档中，通过URI外部引用<br>（有没有发现写程序的时候的#include 和import也有同样的功效重用代码）</p>
<h3 id="②-外部文档声明"><a href="#②-外部文档声明" class="headerlink" title="② 外部文档声明"></a>② 外部文档声明</h3><pre><code> 假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中： 
</code></pre><p><code>&lt;!DOCTYPE 根元素 SYSTEM &quot;外部DTD文件的URI&quot;&gt;</code>　　<br><strong>SYSTEM关键字表示文档使用的是私有的DTD文件</strong>，“外部DTD文件的URI”可以是相对URI或者绝对URI，相对URI是相对文档类型声明所在文档的位置。<br>比如</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE greeting SYSTEM &quot;hello.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>我们将DTD的定义放到了hello.dtd文件中，注意要将hello.dtd放在和XML文档同一目录下，这样XML处理器才能找到这个文件。在给DTD文件取名字的时候，文件名可以随便取，但扩展名一般为.dtd<br>如果位于不同位置的多个XML文档要使用同一个DTD，我们可以使用绝对URI来指明DTD文件的地址。假定hello.dtd位于</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">http://www.guowuxin.org/xml/hello.dtd</span><br></pre></td></tr></table></figure>
<p> 我们可以在文档类型声明中使用此URI</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE greeting SYSTEM &quot;http://www.guowuxin.org/xml/hello.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>如果是一种企业或者行业领域标准，则不建议使用SYSTEM，而是使用public修饰<br><code>&lt;!DOCTYPE 根元素的名字 PUBLIC “DTD的名称&quot; “外部DTD文件的URI&quot;&gt;</code><br>PUBLIC关键字用于声明公共的DTD，并且这个DTD还有一个名称，“DTD的名称” 也称为公共标识符</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot; &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>比如上面是servlet2.3中web.xml的DTD<br>根元素web-app</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUBILC &quot;-//所有者//DTD文档描述的类型//ISO639语言标识符&quot; “外部DTD文件URI”</span><br></pre></td></tr></table></figure>
<p>下面这个 XML 文档和上面的第一个 XML 文档相同，但是拥有一个外部的 DTD: 　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; 　</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt; 　</span><br><span class="line"> 　&lt;to&gt;Tove&lt;&#x2F;to&gt; 　</span><br><span class="line"> 　&lt;from&gt;Jani&lt;&#x2F;from&gt; 　</span><br><span class="line"> 　&lt;heading&gt;Reminder&lt;&#x2F;heading&gt; 　</span><br><span class="line"> 　&lt;body&gt;Don&#39;t forget me this weekend!&lt;&#x2F;body&gt; 　</span><br><span class="line">&lt;&#x2F;note&gt; 　</span><br></pre></td></tr></table></figure>
<p>　这是包含 DTD 的 “note.dtd” 文件： 　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt; 　</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt; 　　</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt; 　</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt; 　</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt; </span><br></pre></td></tr></table></figure>
<p>通过 DTD，每一个 XML 文件均可携带一个有关其自身格式的描述，独立的团体可一致地使用某个标准的 DTD 来交换数据。应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。 　<br>   还可以使用 DTD 来验证自身的数据。</p>
<h2 id="3-DTD的优势"><a href="#3-DTD的优势" class="headerlink" title="3.DTD的优势"></a>3.DTD的优势</h2><p>每一个XML文档都可携带一个DTD，用来对该文档格式进行描述，测试该文档是否为有效的XML文档。<br>既然DTD有外部和内部之分，当然就可以为某个独 立的团体定义一个公用的外部DTD，那么多个XML文档就都可以共享使用该DTD，使得数据交换更为有效。甚至在某些文档中还可以使内部DTD和外部 DTD相结合。<br>在应用程序中也可以用某个DTD来检测接收到的数据是否符合某个标准。<br>对于XML文档而言，虽然DTD不是必须的，但它为文档的编制带来了方便。加强了文档标记内参数的一致性，使XML语法分析器能够确认文档。</p>
<p>如果不使用DTD来对XML文档进行定义，那么XML语法分析器将无法对该文档进行确认。 　　</p>
<p>每个XML文档都只有一个根元素，其它的子元素都包含在该根元素中。<br>因此在DTD中对根元素的声明是必不可少的。</p>
<p>元素声明的一般形式如下： 　</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root[ 　　&lt;!-- 子元素 --&gt; ]&gt; 　</span><br></pre></td></tr></table></figure>
<p>DOCTYPE是“document type”（文档类型）的简写，DOCTYPE声明必须放在文档最顶部，在所有代码和标识之上，DOCTYPE声明是必不可少的关键组成部分。DTD语法 要求DOCTYPE必须要大写，而且DOCTYPE和元素之间必须要有空格隔开，<strong>如在以上代码中DOCTYPE和根元素root之间要有空格隔开。</strong></p>
<h2 id="4-DTD的缺陷"><a href="#4-DTD的缺陷" class="headerlink" title="4.DTD的缺陷"></a>4.DTD的缺陷</h2><p>利用DTD验证有效性的解析器，就能够立即对文档的完整性进行可靠的检查。DTD虽然比较实用，但DTD也有不少的缺陷。 　　</p>
<ol>
<li>DTD有自己的特殊语法，其本身不是XML文档； 　</li>
<li>DTD只提供了有限的数据类型，用户无法自定义类型； 　</li>
<li>DTD不支持域名机制。</li>
</ol>
<p><strong>servlet标准在2.5开始就放弃使用dtd，改用了xsd</strong></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>DTD</tag>
        <tag>XSD</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式语法</title>
    <url>/posts/48428.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>以下内容摘抄至<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">维基百科</a>:</p>
<blockquote>
<p><strong>正则表达式</strong>（英语：Regular Expression，常简写为regex、regexp或RE），又称<strong>正则表示式</strong>、<strong>正则表示法</strong>、<strong>规则表达式</strong>、<strong>常规表示法</strong>，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p>
<p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。</p>
</blockquote>
<h2 id="为什么使用正则表达式"><a href="#为什么使用正则表达式" class="headerlink" title="为什么使用正则表达式?"></a>为什么使用正则表达式?</h2><p>典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。</p>
<p>通过使用正则表达式，可以：</p>
<ul>
<li>测试字符串内的模式。<br>  例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li>
<li>替换文本。<br>  可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li>
<li>基于模式匹配从字符串中提取子字符串。<br>  可以查找文档内或输入域内特定的文本。</li>
</ul>
<p>例如，您可能需要搜索整个网站，删除过时的材料，以及替换某些 HTML 格式标记。在这种情况下，可以使用正则表达式来确定在每个文件中是否出现该材料或该 HTML 格式标记。此过程将受影响的文件列表缩小到包含需要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料。最后，可以使用正则表达式来搜索和替换标记。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<p>例如：</p>
<ul>
<li><strong><code>runoo+b</code></strong>，可以匹配 runoob、runooob、runoooooob 等，<code>+</code>号代表前面的字符必须至少出现一次（1次或多次）。</li>
<li><strong><code>runoo*b</code></strong>，可以匹配 runob、runoob、runoooooob 等，<code>*</code> 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li>
<li><strong><code>colou?r</code></strong> 可以匹配 color 或者 colour，<code>?</code> 问号代表前面的字符最多只可以出现一次（0次、或1次）。</li>
</ul>
<p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>
<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[ABC]</code></td>
<td>匹配 <strong><code>[...]</code></strong> 中的所有字符，例如 <strong><code>[aeiou]</code></strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</td>
</tr>
<tr>
<td><code>[^ABC]</code></td>
<td>匹配除了 <strong><code>[...]</code></strong> 中字符的所有字符，例如 <strong><code>[^aeiou]</code></strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</td>
</tr>
<tr>
<td><code>[A-Z]</code></td>
<td>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配除换行符<code>（\n、\r）</code>之外的任何单个字符，相等于 <code>[^\n\r]</code>。</td>
</tr>
<tr>
<td><code>[\s\S]</code></td>
<td>匹配所有。<code>\s</code>是匹配所有空白符，包括换行，<code>\S</code> 非空白符，包括换行。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配字母、数字、下划线。等价于<code>[A-Za-z0-9_]</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\cx</code></td>
<td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>匹配一个换页符。等价于 <code>\x0c 和 \cL</code>。</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>匹配一个换行符。等价于 <code>\x0a 和 \cJ</code>。</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>匹配一个回车符。等价于<code>\x0d 和 \cM</code>。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[ \f\n\r\t\v]</code>。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>匹配一个制表符。等价于<code>\x09 和 \cI</code>。</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>匹配一个垂直制表符。等价于 <code>\x0b</code>和 <code>\cK</code>。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong><code>runoo*b</code></strong> 中的 <strong>*</strong>，简单的说就是表示任何字符串的意思。如果要查找字符串中的 <strong>*</strong> 符号，则需要对 <strong>*</strong> 进行转义，即在其前加一个 <strong><code>\</code></strong>，<strong><code>runo*ob</code></strong> 匹配字符串 <strong><code>runo*ob</code></strong>。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符<strong>\</strong> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">特别字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则<code>$</code> 也匹配 ‘\n’ 或 ‘\r’。要匹配<code>$</code>字符本身，请使用 <code>\$</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>( )</code></td>
<td style="text-align:center">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用<code>\(</code>和<code>\)</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">匹配前面的子表达式零次或多次。要匹配 <code>*</code> 字符，请使用 <code>\*</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center">匹配前面的子表达式一次或多次。要匹配 <code>+</code> 字符，请使用 <code>\+</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">匹配除换行符 <code>\n</code> 之外的任何单字符。要匹配 <code>.</code> ，请使用 <code>\.</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>[</code></td>
<td style="text-align:center">标记一个中括号表达式的开始。要匹配 <code>[</code>，请使用<code>\[</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>?</code></td>
<td style="text-align:center">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配<code>?</code>字符，请使用 <code>\?</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>\</code></td>
<td style="text-align:center">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。<code>&#39;\n&#39;</code>匹配换行符。序列<code>&#39;\\&#39;</code>匹配 <code>&quot;\&quot;</code>，而 <code>&#39;\(&#39;</code>则匹配 <code>&quot;(&quot;</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:center">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 <code>^</code>字符本身，请使用 <code>\^</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>&#123;</code></td>
<td style="text-align:center">标记限定符表达式的开始。要匹配 <code>&#123;</code>，请使用 <code>\&#123;</code>。</td>
</tr>
<tr>
<td style="text-align:center"><code>竖线​</code></td>
<td style="text-align:center">指明两项之间的一个选择。要匹配 <code>竖线</code>，请使用 <code>\竖线</code>。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注:表格最后一行的竖线为|,因为Markdown语法经常将竖线渲染成表格,所以拿中文代替</strong></p>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 <strong><code>*</code></strong> 或 <strong><code>+</code></strong> 或 <strong><code>?</code></strong> 或 <strong><code>&#123;n&#125;</code></strong> 或 <strong><code>&#123;n,&#125;</code></strong> 或 <strong><code>&#123;n,m&#125;</code></strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配 “z” 以及 “zoo”。* 等价于<code>&#123;0,&#125;</code>。</td>
</tr>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">匹配前面的子表达式一次或多次。例如，<code>&#39;zo+&#39;</code>能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。<code>+</code> 等价于<code>&#123;1,&#125;</code>。</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code></td>
<td style="text-align:left">匹配前面的子表达式零次或一次。例如，<code>&quot;do(es)?&quot;</code> 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。<code>?</code> 等价于 <code>&#123;0,1&#125;</code>。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n&#125;</code></td>
<td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。例如，<code>&#39;o&#123;2&#125;&#39;</code> 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n,&#125;</code></td>
<td style="text-align:left">n 是一个非负整数。至少匹配n 次。例如，<code>&#39;o&#123;2,&#125;&#39;</code> 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。<code>&#39;o&#123;1,&#125;&#39;</code>等价于 <code>&#39;o+&#39;</code>。<code>&#39;o&#123;0,&#125;&#39;</code>则等价于<code>&#39;o*&#39;</code>。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n,m&#125;</code></td>
<td style="text-align:left">m 和 n 均为非负整数，其中<code>n &lt;= m</code>。最少匹配 n 次且最多匹配 m 次。例如，<code>&quot;o&#123;1,3&#125;&quot;</code> 将匹配 “fooooood” 中的前三个 o。<code>&#39;o&#123;0,1&#125;&#39;</code>等价于 <code>&#39;o?&#39;</code>。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody>
</table>
</div>
<p>以下正则表达式匹配一个正整数，<strong><code>[1-9]</code></strong>设置第一个数字不是 0，<strong><code>[0-9]*</code></strong> 表示任意多个数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;[1-9][0-9]*&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>   	<span class="comment">// 匹配不到</span></span><br><span class="line"><span class="number">1</span>		<span class="comment">// 匹配到</span></span><br><span class="line"><span class="number">10</span>		<span class="comment">// 匹配到</span></span><br><span class="line"><span class="number">123</span>		<span class="comment">// 匹配到</span></span><br><span class="line"><span class="number">1234</span>	<span class="comment">// 匹配到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。</p>
<p>这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ? 字符，因为使用 ? 会将整数限制到只有两位数。</p>
<p>如果你想设置 0~99 的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;[0-9]&#123;1,2&#125;&#x2F;</span><br></pre></td></tr></table></figure>
<p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99 的章节编号仍只匹配开头两位数字。</p>
<p>改进下，匹配 1~99 的正整数表达式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;[1-9][0-9]?&#x2F;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;[1-9][0-9]&#123;0,1&#125;&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong><code>*</code>和<code>+</code>限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</strong></p>
<p>例如，您可能搜索 HTML 文档，以查找在 <strong><code>h1</code></strong> 标签内的内容。HTML 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;星辰大海&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>
<p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&lt;.*&gt;&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配<code>&lt;h1&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&lt;.*?&gt;&#x2F;</span><br></pre></td></tr></table></figure>
<p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&lt;\w+?&gt;&#x2F;</span><br></pre></td></tr></table></figure>
<p>通过在 <strong><code>*</code></strong>、<strong><code>+</code></strong> 或 <strong><code>?</code></strong> 限定符之后放置 <strong><code>?</code></strong>，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</p>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，<strong><code>^</code></strong> 和 <strong><code>$</code></strong> 分别指字符串的开始与结束，<strong><code>\b</code></strong> 描述单词的前或后边界，<strong><code>\B</code></strong> 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，<code>^</code>还会与 <code>n</code> 或 <code>r</code> 之后的位置匹配。</td>
</tr>
<tr>
<td style="text-align:left">$$`</td>
<td style="text-align:left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，<code>$$ 还会与</code>n<code>或</code>r` 之前的位置匹配。</td>
</tr>
<tr>
<td style="text-align:left"><code>b</code></td>
<td style="text-align:left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td style="text-align:left"><code>B</code></td>
<td style="text-align:left">非单词边界匹配。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <code>^*</code> 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <code>^</code>字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong><code>$</code></strong> 字符。</p>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;^Chapter [1-9][0-9]&#123;0,1&#125;&#x2F;</span><br></pre></td></tr></table></figure>
<p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;^Chapter [1-9][0-9]&#123;0,1&#125;$&#x2F;</span><br></pre></td></tr></table></figure>
<p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;\bCha&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;ter\b&#x2F;</span><br></pre></td></tr></table></figure>
<p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;\Bapt&#x2F;</span><br></pre></td></tr></table></figure>
<p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong><code>\B</code></strong> 非单词边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong><code>()</code></strong> 将所有选择项括起来，相邻的选择项之间用 <strong><code>|</code></strong> 分隔。</p>
<p><strong><code>()</code></strong> 表示捕获分组，<strong><code>()</code></strong> 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>
<p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong><code>?:</code></strong> 放在第一个选项前来消除这种副作用。</p>
<p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong><code>?=</code></strong> 和 <strong><code>?!</code></strong>，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>
<h3 id="以下列出-、-lt-、-、-lt-的使用区别"><a href="#以下列出-、-lt-、-、-lt-的使用区别" class="headerlink" title="以下列出 ?=、?&lt;=、?!、?&lt;!的使用区别"></a>以下列出 <code>?=、?&lt;=、?!、?&lt;!</code>的使用区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源字符串:</span><br><span class="line">123456google789123baidu456junpzx789</span><br></pre></td></tr></table></figure>
<p><strong><code>exp1(?=exp2)</code></strong>：查找 exp2 前面的 exp1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式: baidu(?&#x3D;[\d+])</span><br><span class="line">查找结果: baidu</span><br><span class="line">解释: 查找数字前面的baidu字符串</span><br></pre></td></tr></table></figure>
<p><strong><code>(?&lt;=exp2)exp1</code></strong>：查找 exp2 后面的 exp1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式: (?&lt;&#x3D;[\d+])junpzx</span><br><span class="line">查找结果: junpzx</span><br><span class="line">解释: 查找数字后面的junpzx字符串</span><br></pre></td></tr></table></figure>
<p><strong><code>exp1(?!exp2)</code></strong>：查找后面不是 exp2 的 exp1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式: 123(?![0-9]+)</span><br><span class="line">查找结果: 789和baidu中间的123</span><br><span class="line">解释: 查找123后面不是数字的串</span><br></pre></td></tr></table></figure>
<p><strong><code>(?&lt;!exp2)exp1</code></strong>：查找前面不是 exp2 的 exp1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式: (?&lt;![\d+])456</span><br><span class="line">查找结果: baidu和junpzx中间的456</span><br><span class="line">解释: 查找前面不是数字的456</span><br></pre></td></tr></table></figure>
<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong><code>\n</code></strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <strong><code>?</code>:</strong>、<strong><code>?=</code></strong> 或 <strong><code>?!</code></strong> 来重写捕获，忽略对相关匹配的保存。</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>MockJS语法</title>
    <url>/posts/1114.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>mock是一个模拟数据生成器，旨在帮助前端独立于后端进行开发，帮助编写单元测试。mock有如下功能</p>
<ul>
<li>根据数据模板生成模板数据</li>
<li>模拟ajax请求，生成请求数据</li>
<li>基于html模板生成模拟数据</li>
</ul>
<h2 id="2-下载安装"><a href="#2-下载安装" class="headerlink" title="2.下载安装"></a>2.下载安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用mock</span></span><br><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mcok = Mock.mock(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h2><p>mock的语法规范包含两层规范</p>
<ul>
<li>数据模板 （DTD）</li>
<li>数据占位符 （DPD）</li>
</ul>
<h3 id="1-数据模板DTD"><a href="#1-数据模板DTD" class="headerlink" title="1).数据模板DTD"></a>1).数据模板DTD</h3><p>模板规则: ‘name|rule’:value</p>
<ul>
<li>name：属性名</li>
<li>rule：属性规则</li>
<li>value：属性值</li>
</ul>
<p>属性名和规则之间用|隔开，规则是可以选的。<br>一共七个rule</p>
<ol>
<li>‘name|mix-max’:value</li>
<li>‘name|count’:value</li>
<li>‘name|mix-max.dmix-dmax’:value</li>
<li>‘name|min-max.dcount’:value</li>
<li>‘name|count.dmin-dmax’:value</li>
<li>‘name|count.dcount’:value</li>
<li>‘name|+step’:value</li>
</ol>
<p>生成规则需要根据属性值的类型才能确定<br>属性值可以含有@占位符<br>属性值还可以指定最终值的初始值和类型</p>
<h4 id="属性值为String"><a href="#属性值为String" class="headerlink" title="属性值为String"></a>属性值为String</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name1|1-3&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,       <span class="comment">//重复生成1到3个a</span></span><br><span class="line">    <span class="string">&#x27;name2|2&#x27;</span>:<span class="string">&#x27;b&#x27;</span>            <span class="comment">//生成bb</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="属性值是Number"><a href="#属性值是Number" class="headerlink" title="属性值是Number"></a>属性值是Number</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name1|+1&#x27;</span>:<span class="number">4</span>,         <span class="comment">//生成4，如果循环每次加1</span></span><br><span class="line">    ‘name2|<span class="number">1</span><span class="number">-7</span><span class="string">&#x27;:2,        //生成一个数字，1到7之间</span></span><br><span class="line"><span class="string">    &#x27;</span>name3|<span class="number">1</span><span class="number">-4.5</span><span class="number">-8</span><span class="string">&#x27;:1     </span></span><br><span class="line"><span class="string">    //生成一个小数，整数部分1到4，小数部分5到8位</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>
<h4 id="属性值是Boolean"><a href="#属性值是Boolean" class="headerlink" title="属性值是Boolean"></a>属性值是Boolean</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name|1&#x27;</span>:<span class="literal">true</span>,          <span class="comment">//生成一个布尔值，各一半</span></span><br><span class="line">    <span class="string">&#x27;name1|1-3&#x27;</span>:<span class="literal">true</span>        <span class="comment">//1/4是true，3/4是false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="属性值是Object"><a href="#属性值是Object" class="headerlink" title="属性值是Object"></a>属性值是Object</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    d:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name|1-3&#x27;</span>:obj,      <span class="comment">//随机从obj中寻找1到3个属性，新对象</span></span><br><span class="line">    <span class="string">&#x27;name|2&#x27;</span>:obj         <span class="comment">//随机从onj中找到两个属性，新对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="属性值是Array"><a href="#属性值是Array" class="headerlink" title="属性值是Array"></a>属性值是Array</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name1|1&#x27;</span>:arr,          <span class="comment">//从数组里随机取出1个值</span></span><br><span class="line">    <span class="string">&#x27;name2|2&#x27;</span>:arr,          <span class="comment">//数组重复count次，这里count为2</span></span><br><span class="line">    <span class="string">&#x27;name3|1-3&#x27;</span>:arr,        <span class="comment">//数组重复1到3次</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="属性值是Function"><a href="#属性值是Function" class="headerlink" title="属性值是Function"></a>属性值是Function</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:fun(<span class="number">10</span>)         <span class="comment">//返回函数的返回值20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="属性值是RegExp"><a href="#属性值是RegExp" class="headerlink" title="属性值是RegExp"></a>属性值是RegExp</h4><p>根据正则表达式反向生成对应的字符串，用于生成自定义格式的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    ‘name1<span class="string">&#x27;:/[a-z][A-Z]/,</span></span><br><span class="line"><span class="string">    &#x27;</span>name2<span class="string">&#x27;:/\d&#123;1,3&#125;/</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>会根据各自的正则表达式进行适配，并且随机返回</p>
<h3 id="2-数据占位符DPD"><a href="#2-数据占位符DPD" class="headerlink" title="2).数据占位符DPD"></a>2).数据占位符DPD</h3><p>关于占位符，占位符只是在属性值是字符串的时候，在字符串里占个位置，并不会出现在最终的属性值中。<br>占位符的格式为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@占位符</span><br></pre></td></tr></table></figure>
<p><strong>关于占位符需要知道以下几点</strong></p>
<ol>
<li>用@标识符标识后面的字符串是占位符</li>
<li>占位符的值是从Mock.Random方法中引用的</li>
<li>可以通过Mock.Random.extend()来扩展自定义占位符</li>
<li>占位符可以引用数据模板中的属性</li>
<li>占位符优先引用数据模板中的属性</li>
<li>占位符支持相对路径和决定路径</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var data &#x3D; Mock.mock(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        name1:&#39;@FIRST&#39;,</span><br><span class="line">        name2:&#39;@LAST&#39;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>语法大概是这样，random会重点分析的。</p>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="1-Mock-mock"><a href="#1-Mock-mock" class="headerlink" title="1).Mock.mock()"></a>1).Mock.mock()</h3><p>这是mock的核心方法，用于生成模拟数据，前边的例子中我们都已经见识过了。<br><strong>Mock.mock(rurl,rtype,template|function(opt))</strong></p>
<ul>
<li>rurl:ajax请求的地址</li>
<li>rtype:ajax请求的类型，如’GET’,’POST’</li>
<li>template:数据模板，就是之前那些个例子</li>
<li>function:生成相应数据的函数</li>
</ul>
<p>具体的应用情况在下边：</p>
<ol>
<li>Mock.mock(template)</li>
<li>Mock.mock(rurl,template)，模拟ajax,匹配接收到url的ajax请求，把template对应的数据返回返回</li>
<li>Mock.mock(rurl,function(opt)),模拟ajax,会把函数执行的结果作为ajax回调返回</li>
<li>Mock.mock(rurl,rtype,template) 同上，只是对ajax的类型有要求</li>
<li>Mock.mock(rurl,rtype,function) 同上</li>
</ol>
<h3 id="2-Mock-setup-setting"><a href="#2-Mock-setup-setting" class="headerlink" title="2).Mock.setup(setting)"></a>2).Mock.setup(setting)</h3><p>配置拦截ajax请求的行为，支持的配置项有timeout。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.setup(&#123;</span><br><span class="line">    timeout:<span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">    timeout:<span class="string">&#x27;200-500</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>这个现在仅用于配置ajax请求，以后可能会扩展</p>
<h3 id="3-Mock-valid-template-data"><a href="#3-Mock-valid-template-data" class="headerlink" title="3).Mock.valid(template,data)"></a>3).Mock.valid(template,data)</h3><p>这个函数用来判断，数据模板和数据是否一样，</p>
<h3 id="4-Mock-toJSONShema-template"><a href="#4-Mock-toJSONShema-template" class="headerlink" title="4).Mock.toJSONShema(template)"></a>4).Mock.toJSONShema(template)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var template &#x3D; Mock.mock(&#123;</span><br><span class="line">    &#39;name|1-3&#39;:5</span><br><span class="line">&#125;)</span><br><span class="line">var tjs &#x3D; Mock.toJSONSchema(tempalte);</span><br></pre></td></tr></table></figure>
<p>把template风格的模板转成<a href="http://json-schema.org/">JSON Schema</a>。</p>
<h3 id="5-Mock-Random"><a href="#5-Mock-Random" class="headerlink" title="5).Mock.Random"></a>5).Mock.Random</h3><p>这是一个工具类，用于生成各种类型的数据。<br><strong>Mock.Random的方法在模板数据中被称为占位符，之前说过的</strong></p>
<p>用法示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Random = Mock.Random;</span><br><span class="line"><span class="keyword">var</span> em1 = Mock.email();</span><br><span class="line"><span class="keyword">var</span> em2 = Mock.mock(<span class="string">&#x27;@email&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> em3 = Mock.mock(&#123;</span><br><span class="line">    email:<span class="string">&#x27;@email&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>Mock.Random提供的方法</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">Method</th>
</tr>
</thead>
<tbody>
<tr>
<td>Basic</td>
<td style="text-align:center">boolean natural integer float character string date datename now</td>
</tr>
<tr>
<td>Date</td>
<td style="text-align:center">date datetime time now</td>
</tr>
<tr>
<td>Image</td>
<td style="text-align:center">image dataImage</td>
</tr>
<tr>
<td>Color</td>
<td style="text-align:center">color hex rgb rgba hsl</td>
</tr>
<tr>
<td>Text</td>
<td style="text-align:center">paragraph sentence word title cparagraph csentence cword ctitle</td>
</tr>
<tr>
<td>Name</td>
<td style="text-align:center">first last name cfirst clast cname</td>
</tr>
<tr>
<td>Web</td>
<td style="text-align:center">url domain email ip tld</td>
</tr>
<tr>
<td>Address</td>
<td style="text-align:center">area region city county zip</td>
</tr>
<tr>
<td>Helper</td>
<td style="text-align:center">capitalize upper lower pick shuffle</td>
</tr>
<tr>
<td>Miscellaneous</td>
<td style="text-align:center">guid id</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h4><h5 id="Random-boolean-min-max-current"><a href="#Random-boolean-min-max-current" class="headerlink" title="Random.boolean(min,max,current)"></a>Random.boolean(min,max,current)</h5><p>随机生成布尔值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bool1 = Random.boolean();      <span class="comment">//true false各一半</span></span><br><span class="line"><span class="keyword">var</span> bool2 = Random.boolean(<span class="number">1</span>,<span class="number">2</span>，<span class="literal">false</span>)    <span class="comment">//1/3的可能性是false 2/3是true</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-natural-min-max"><a href="#Random-natural-min-max" class="headerlink" title="Random.natural(min,max)"></a>Random.natural(min,max)</h5><p>随机生成一个自然数，什么叫自然数，就是大于等于0的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> natural1 = Random.natural();       <span class="comment">//默认值最大为 9007199254740992</span></span><br><span class="line"><span class="keyword">var</span> natural2 = Random.natural(<span class="number">4</span>);         <span class="comment">//随机出来的最小值是4</span></span><br><span class="line"><span class="keyword">var</span> natural3 = Random.natural(<span class="number">6</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-Integer-min-max"><a href="#Random-Integer-min-max" class="headerlink" title="Random.Integer(min,max)"></a>Random.Integer(min,max)</h5><p>生成一个随机的整数，可以是负数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integer1 = Random.integer();</span><br><span class="line"><span class="keyword">var</span> integer2 = Random.integer(<span class="number">-10</span>);        <span class="comment">//随机最小值是-10</span></span><br><span class="line"><span class="keyword">var</span> integer3 = Random.integer(<span class="number">-10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-float-min-max-dmin-dmax"><a href="#Random-float-min-max-dmin-dmax" class="headerlink" title="Random.float(min,max,dmin ,dmax)"></a>Random.float(min,max,dmin ,dmax)</h5><p>随机生成一个小数浮点数,四个参数分别为，整数部分最小值最大值，小数部分最小值最大值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> float1 = Random.float();</span><br><span class="line"><span class="keyword">var</span> float2 = Random.float(<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> float3 = Random.float(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Random-character-pool"><a href="#Random-character-pool" class="headerlink" title="Random.character(pool)"></a>Random.character(pool)</h5><p>随机生成一个字符,pool的值可以是：</p>
<ul>
<li>upper: 26个大写字母</li>
<li>lower: 26个小写字母</li>
<li>number: 0到9十个数字</li>
<li>sympol: “!@#$%^&amp;*()[]”</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> character1 = Random.character();</span><br><span class="line"><span class="keyword">var</span> character2 = Random.character(<span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> character3 = Random.character(<span class="string">&#x27;upper&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> character4 = Random.character(<span class="string">&#x27;symbol&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-string-pool-min-max"><a href="#Random-string-pool-min-max" class="headerlink" title="Random.string(pool,min,max)"></a>Random.string(pool,min,max)</h5><p>随机生成一个字符串，pool的值同上边四个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = Random.string();                <span class="comment">//长度3到7位</span></span><br><span class="line"><span class="keyword">var</span> str2 = Random.string(<span class="number">5</span>);               <span class="comment">//长度5位</span></span><br><span class="line"><span class="keyword">var</span> str3 = Random.string(<span class="string">&#x27;lower&#x27;</span>,<span class="number">7</span>);       <span class="comment">//长度7位，小写</span></span><br><span class="line"><span class="keyword">var</span> str4 = Random.string(<span class="number">4</span>,<span class="number">6</span>);             <span class="comment">//长度4到</span></span><br><span class="line"><span class="keyword">var</span> str5 = Random.string(<span class="string">&#x27;新的字符串会从这里选择4到5位&#x27;</span>,<span class="number">4</span>,<span class="number">6</span>);   <span class="comment">//从第一个参数里选择4到5位</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-range-start-stop-step"><a href="#Random-range-start-stop-step" class="headerlink" title="Random.range(start,stop,step)"></a>Random.range(start,stop,step)</h5><p>返回一个整型数组</p>
<ul>
<li>start,可选，数组起始值，闭区间</li>
<li>stop,必选，数据结束值，开区间</li>
<li>step,可选，数据每一项间隔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = Random.range(<span class="number">10</span>);     <span class="comment">//[0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="keyword">var</span> range2 = Random.range(<span class="number">14</span>,<span class="number">20</span>);  <span class="comment">//[14,15,16,17,18,19]</span></span><br><span class="line"><span class="keyword">var</span> range3 = Random.range(<span class="number">3</span>,<span class="number">13</span>,<span class="number">2</span>); <span class="comment">//[3,5,7,9,11]</span></span><br></pre></td></tr></table></figure>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><h5 id="Random-date-format"><a href="#Random-date-format" class="headerlink" title="Random.date(format)"></a>Random.date(format)</h5><p>返回一个随机日期的字符串<br>format的格式是‘yyyy-MM-dd’,可以随机组合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = Random.date();</span><br><span class="line"><span class="keyword">var</span> date2 = Random.date(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> date3 = Random.date(<span class="string">&#x27;y-M-d&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> date4 = Random.date(<span class="string">&#x27;yy-MM-dd&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-time-format"><a href="#Random-time-format" class="headerlink" title="Random.time(format)"></a>Random.time(format)</h5><p>返回时间字符串<br>format的格式是‘HH-mm-ss’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = Random.time();</span><br><span class="line"><span class="keyword">var</span> time2 = Random.time(<span class="string">&#x27;HH-mm-ss&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> time3 = Random.time(<span class="string">&#x27;J-m-s&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-datetime-format"><a href="#Random-datetime-format" class="headerlink" title="Random.datetime(format)"></a>Random.datetime(format)</h5><p>上边两个的结合版</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dt1 = Random.datetime();</span><br><span class="line"><span class="keyword">var</span> dt2 = Random.datetime(<span class="string">&#x27;yyyy-MM-dd HH-mm-ss&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-now-unit-format"><a href="#Random-now-unit-format" class="headerlink" title="Random.now(unit,format)"></a>Random.now(unit,format)</h5><p>返回当前时间的字符串</p>
<h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><blockquote>
<p>一般情况下，使用dataImage更好,因为更简单，但是如果要生成高度自定义的图片，则最好用image。另外，dataImage生成的是base64编码</p>
</blockquote>
<h5 id="Random-image-size-background-foreground-formattext"><a href="#Random-image-size-background-foreground-formattext" class="headerlink" title="Random.image(size,background,foreground,formattext)"></a>Random.image(size,background,foreground,formattext)</h5><ul>
<li>size 图片宽高，格式是’宽x高’</li>
<li>background:图片的背景色，默认值#000000</li>
<li>foreground：图片的文字前景色，默认#FFFFFF</li>
<li>format：图片的格式，默认’.png’</li>
<li>text:图片上的默认文字，默认值为参数size</li>
</ul>
<p>其中size的取值范围是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">&#x27;300x250&#x27;</span>, <span class="string">&#x27;250x250&#x27;</span>, <span class="string">&#x27;240x400&#x27;</span>, <span class="string">&#x27;336x280&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;180x150&#x27;</span>, <span class="string">&#x27;720x300&#x27;</span>, <span class="string">&#x27;468x60&#x27;</span>, <span class="string">&#x27;234x60&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;88x31&#x27;</span>, <span class="string">&#x27;120x90&#x27;</span>, <span class="string">&#x27;120x60&#x27;</span>, <span class="string">&#x27;120x240&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;125x125&#x27;</span>, <span class="string">&#x27;728x90&#x27;</span>, <span class="string">&#x27;160x600&#x27;</span>, <span class="string">&#x27;120x600&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;300x600&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>图片的格式可以选择.png .gif .jpg</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> image1 = Random.image();</span><br><span class="line"><span class="keyword">var</span> image2 = Random.image(<span class="string">&#x27;128x90&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> image3 = Random.image(<span class="string">&#x27;120x660&#x27;</span>,<span class="string">&#x27;#ccc&#x27;</span>);    <span class="comment">//前景色#ccc</span></span><br><span class="line"><span class="keyword">var</span> image4 = Random.image(<span class="string">&#x27;226x280&#x27;</span>,<span class="string">&#x27;#eee&#x27;</span>,<span class="string">&#x27;第三个参数是文字不是前景色&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> image5 = Random.image(<span class="string">&#x27;66x31&#x27;</span>,<span class="string">&#x27;#ddd&#x27;</span>,<span class="string">&#x27;#123456&#x27;</span>,<span class="string">&#x27;四个参数的时候第三个参数是前景色&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> image6 = Random.image(<span class="string">&#x27;240x400&#x27;</span>,<span class="string">&#x27;#333&#x27;</span>,<span class="string">&#x27;#1483dc&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>,<span class="string">&#x27;全部参数的情况下&#x27;</span>); </span><br></pre></td></tr></table></figure>
<h5 id="Random-dataImage-size-text"><a href="#Random-dataImage-size-text" class="headerlink" title="Random.dataImage(size,text)"></a>Random.dataImage(size,text)</h5><p>返回一段base64编码，两个参数同上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> di1 = Random.dataImage();</span><br><span class="line"><span class="keyword">var</span> di2 = Random.datImage(<span class="string">&#x27;300x600&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> di3 = Random.dataImage(<span class="string">&#x27;180x150&#x27;</span>,<span class="string">&#x27;hahahaha&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><h5 id="Random-color"><a href="#Random-color" class="headerlink" title="Random.color()"></a>Random.color()</h5><p>有好几个相关的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = Random.color(); 格式<span class="string">&#x27;#rrggbb&#x27;</span></span><br><span class="line"><span class="keyword">var</span> hex = Random.hex();   <span class="comment">//好像和color没什么不同</span></span><br><span class="line"><span class="keyword">var</span> rgb = Random.rgb();   <span class="comment">//生成格式如rgb(133,233,244)</span></span><br><span class="line"><span class="keyword">var</span> rgba = Random.rgba(); <span class="comment">//生成个事如rgba(111,222,233,0.5)</span></span><br><span class="line"><span class="keyword">var</span> hsl = Random.hsl();   <span class="comment">//生成格式(345,82,71)</span></span><br></pre></td></tr></table></figure>
<h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><h5 id="Random-paragraph-in-max-len"><a href="#Random-paragraph-in-max-len" class="headerlink" title="Random.paragraph(in,max,len)"></a>Random.paragraph(in,max,len)</h5><p>随机生成一段文本，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> para1 = Random.paragraph();    <span class="comment">//随机生成一短文本，范围3到7</span></span><br><span class="line"><span class="keyword">var</span> para2 = Random.paragraph(<span class="number">10</span>);  <span class="comment">//随机生成长度是10的文本</span></span><br><span class="line"><span class="keyword">var</span> para3 = Random.paragraph(<span class="number">9</span>,<span class="number">12</span>); <span class="comment">//随机生成9到11位长度的文本</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-sentence-min-max-len"><a href="#Random-sentence-min-max-len" class="headerlink" title="Random.sentence(min,max,len)"></a>Random.sentence(min,max,len)</h5><p>随机生成一个句子，第一个单词的首字母大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sen1 = Random.sentence();        <span class="comment">//默认长度12到18</span></span><br><span class="line"><span class="keyword">var</span> sen2 = Random.sentence(<span class="number">10</span>);      <span class="comment">//随机生成一个单词个数为10的句子</span></span><br><span class="line"><span class="keyword">var</span> sen3 = Random.sentence(<span class="number">5</span>,<span class="number">10</span>);    <span class="comment">//随机生成一个5到9单词个数的句子</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-word-min-max-len"><a href="#Random-word-min-max-len" class="headerlink" title="Random.word(min,max,len)"></a>Random.word(min,max,len)</h5><p>随机生成一个单词</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word1 = Random.word();          <span class="comment">//默认长度3到10</span></span><br><span class="line"><span class="keyword">var</span> word2 = Random.word(<span class="number">7</span>);         <span class="comment">//随机生成长度是7的单词</span></span><br><span class="line"><span class="keyword">var</span> word3 = Random.word(<span class="number">2</span>,<span class="number">12</span>);      <span class="comment">//随机生成2到11位长度的单词</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-title-min-max-len"><a href="#Random-title-min-max-len" class="headerlink" title="Random.title(min,max,len)"></a>Random.title(min,max,len)</h5><p>随机生成一段标题，每个单词的首字母大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> title1 = Random.title();        <span class="comment">//title中的单词个数</span></span><br><span class="line"><span class="keyword">var</span> title2 = Random.title(<span class="number">6</span>);       <span class="comment">//title六个单词</span></span><br><span class="line"><span class="keyword">var</span> title3 = Random.title(<span class="number">7</span>,<span class="number">12</span>);    <span class="comment">//title7到11个单词</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外还有四个方法，四个方法前边加一个</p>
<p>c,Random.cparagraph, 返回中文文本</p>
<p>Random.csentence, 返回中文句子</p>
<p>Random.cword, 返回中文文字</p>
<p>Random.ctitle. 返回中文标题</p>
</blockquote>
<h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = Random.first()         随机生成常见英文名</span><br><span class="line"><span class="keyword">var</span> last = Random.last()           随机生成常见英文姓</span><br><span class="line"><span class="keyword">var</span> name = Random.name()           随机生成常见英文姓名</span><br><span class="line"><span class="keyword">var</span> cfirst = Random.cfirst()       随机生成常见中文姓</span><br><span class="line"><span class="keyword">var</span> clast = Random.clast()         随机生成常见中文名</span><br><span class="line"><span class="keyword">var</span> cname = Random.cname()         随机生成一个常见中文姓名</span><br></pre></td></tr></table></figure>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><h5 id="Random-url-protocol-host"><a href="#Random-url-protocol-host" class="headerlink" title="Random.url(protocol,host)"></a>Random.url(protocol,host)</h5><p>随机生成一个url<br>protocol可选参数，表示网络协议，如http。<br>host表示域名和端口号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url1 = Random.url();</span><br><span class="line"><span class="keyword">var</span> url2 = Random.url(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url3 = Random.url(<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;58.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-protocol"><a href="#Random-protocol" class="headerlink" title="Random.protocol()"></a>Random.protocol()</h5><p>随机生成一个域名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> protocol = Random.protocol()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>protocol可以选的值，’http’、’ftp’、’gopher’、’mailto’、’mid’、’cid’、’news’、’nntp’、’prospero’、’telnet’、’rlogin’、’tn3270’、’wais’。</p>
</blockquote>
<h5 id="Random-domin"><a href="#Random-domin" class="headerlink" title="Random.domin()"></a>Random.domin()</h5><p>随机生成一个域名</p>
<h5 id="Random-tld"><a href="#Random-tld" class="headerlink" title="Random.tld()"></a>Random.tld()</h5><p>随机生成一个顶级域名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> domain = Random.domain()</span><br><span class="line"><span class="keyword">var</span> tld = Random.tld()</span><br></pre></td></tr></table></figure>
<h5 id="Random-email-domain"><a href="#Random-email-domain" class="headerlink" title="Random.email(domain)"></a>Random.email(domain)</h5><p>随机生成一个email地址，domain表示域名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> email1 = Random.email();</span><br><span class="line"><span class="keyword">var</span> email2 = Random.email(<span class="string">&#x27;58.com&#x27;</span>)     <span class="comment">//生成xxxx@58.com</span></span><br></pre></td></tr></table></figure>
<h5 id="Random-ip"><a href="#Random-ip" class="headerlink" title="Random.ip()"></a>Random.ip()</h5><p>随机生成一个ip地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ip = Random.ip()</span><br></pre></td></tr></table></figure>
<h4 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h4><h5 id="Random-region"><a href="#Random-region" class="headerlink" title="Random.region()"></a>Random.region()</h5><p>随机生成一个中国的大区，如华北，西南</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> region = Random.region();</span><br></pre></td></tr></table></figure>
<h5 id="Random-province"><a href="#Random-province" class="headerlink" title="Random.province()"></a>Random.province()</h5><p>随机生成一个中国省直辖市自治区特别行政区</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> province = Random.province()</span><br></pre></td></tr></table></figure>
<h5 id="Random-city-prefix"><a href="#Random-city-prefix" class="headerlink" title="Random.city(prefix)"></a>Random.city(prefix)</h5><p>随机生成一个中国城市，prefix布尔值，表示是否标注所在省</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> city1 = Random.city();</span><br><span class="line"><span class="keyword">var</span> city2 = Random.city(ture);</span><br></pre></td></tr></table></figure>
<h5 id="Random-country-prefix"><a href="#Random-country-prefix" class="headerlink" title="Random.country(prefix)"></a>Random.country(prefix)</h5><p>随机生成一个中国县，prefix布尔值，表示是否显示所属的省市</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> county1 = Random.county();</span><br><span class="line"><span class="keyword">var</span> county2 = Random.county(ture);</span><br></pre></td></tr></table></figure>
<h5 id="Random-zip"><a href="#Random-zip" class="headerlink" title="Random.zip()"></a>Random.zip()</h5><p>随机生成一个六位数邮政编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zip = Random.zip();</span><br></pre></td></tr></table></figure>
<h4 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h4><h5 id="Random-capitlize-word"><a href="#Random-capitlize-word" class="headerlink" title="Random.capitlize(word)"></a>Random.capitlize(word)</h5><p>把第一个字母转成大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> capitalize = Random.capitalize(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Random-upper-str"><a href="#Random-upper-str" class="headerlink" title="Random.upper(str)"></a>Random.upper(str)</h5><p>转成大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> upper = Random.upper(<span class="string">&#x27;zhang&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-lower-str"><a href="#Random-lower-str" class="headerlink" title="Random.lower(str)"></a>Random.lower(str)</h5><p>转成小写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lower = Random.lower(<span class="string">&#x27;JINGWEI&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Random-pick-arr"><a href="#Random-pick-arr" class="headerlink" title="Random.pick(arr)"></a>Random.pick(arr)</h5><p>从数组中随机选取一个元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> pick = Random.pick(arr);</span><br></pre></td></tr></table></figure>
<h5 id="Random-shuffle-arr"><a href="#Random-shuffle-arr" class="headerlink" title="Random.shuffle(arr);"></a>Random.shuffle(arr);</h5><p>打乱数组的顺序并返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> shuffle = Random.shuffle(arr);</span><br></pre></td></tr></table></figure>
<h4 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h4><h5 id="Random-guid"><a href="#Random-guid" class="headerlink" title="Random.guid()"></a>Random.guid()</h5><p>随机生成一个GUID</p>
<h5 id="Random-id"><a href="#Random-id" class="headerlink" title="Random.id()"></a>Random.id()</h5><p>随机生成一个18位身份证id</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> guid = Random.guid();</span><br><span class="line"><span class="keyword">var</span> id = Random.id();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>MockJS</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI七层模型与TCP/IP四层的区别/联系</title>
    <url>/posts/15594.html</url>
    <content><![CDATA[<h2 id="什么是OSI"><a href="#什么是OSI" class="headerlink" title="什么是OSI"></a>什么是OSI</h2><p>OSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互连模型。ISO为了更好的使网络应用更为普及，推出了OSI参考模型。其含义就是推荐所有公司使用这个规范来控制网络。这样所有公司都有相同的规范，就能互联了。<br>OSI定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层），即ISO开放互连系统参考模型。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210126101946.png" alt="OSI七层模型及其解释"></p>
<p>每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种能力，它通过接口提供给更高一层。各层所提供的服务与这些服务是怎么实现的无关。</p>
<p>众所周知，OSI参考模型是学术上和法律上的国际标准，是完整的权威的网络参考模型。而TCP/IP参考模型是事实上的国际标准，即现实生活中被广泛使用的网络参考模型。</p>
<h2 id="OSI七层和TCP-IP四层的关系"><a href="#OSI七层和TCP-IP四层的关系" class="headerlink" title="OSI七层和TCP/IP四层的关系"></a>OSI七层和TCP/IP四层的关系</h2><p>OSI引入了服务、接口、协议、分层的概念，TCP/IP借鉴了OSI的这些概念建立TCP/IP模型。</p>
<p>OSI先有模型，后有协议，先有标准，后进行实践；而TCP/IP则相反，先有协议和应用再提出了模型，且是参照的OSI模型。</p>
<p>OSI是一种理论下的模型，而TCP/IP已被广泛使用，成为网络互联事实上的标准。</p>
<ul>
<li>TCP：transmission control protocol 传输控制协议</li>
<li>UDP：user data protocol 用户数据报协议</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>OSI七层网络模型</th>
<th>TCP/IP四层概念模型</th>
<th>对应网络协议</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用层（Application）</td>
<td>应用层</td>
<td><strong>HTTP</strong>、TFTP, <strong>FTP</strong>, NFS, WAIS、SMTP</td>
</tr>
<tr>
<td>表示层（Presentation）</td>
<td>应用层</td>
<td>Telnet, Rlogin, SNMP, Gopher</td>
</tr>
<tr>
<td>会话层（Session）</td>
<td>应用层</td>
<td><strong>SMTP</strong>, <strong>DNS</strong></td>
</tr>
<tr>
<td>传输层（Transport）</td>
<td>传输层</td>
<td>TCP, UDP</td>
</tr>
<tr>
<td>网络层（Network）</td>
<td>网络层</td>
<td>IP, ICMP, ARP, RARP, AKP, UUCP</td>
</tr>
<tr>
<td>数据链路层（Data Link）</td>
<td>数据链路层</td>
<td>FDDI, Ethernet, Arpanet, PDN, SLIP, PPP</td>
</tr>
<tr>
<td>物理层（Physical）</td>
<td>数据链路层</td>
<td>IEEE 802.1A, IEEE 802.2到IEEE 802.11</td>
</tr>
</tbody>
</table>
</div>
<h2 id="OSI七层和TCP-IP的区别"><a href="#OSI七层和TCP-IP的区别" class="headerlink" title="OSI七层和TCP/IP的区别"></a>OSI七层和TCP/IP的区别</h2><ul>
<li>TCP/IP他是一个协议簇；而OSI（开放系统互联）则是一个模型，且TCP/IP的开发时间在OSI之前。</li>
<li>TCP/IP是由一些交互性的模块做成的分层次的协议，其中每个模块提供特定的功能；OSi则指定了哪个功能是属于哪一层的。</li>
<li>TCP/IP是五层结构，而OSI是七层结构。OSI的最高三层在TCP中用应用层表示。</li>
</ul>
<p><strong>注：TCP/IP分层有两种分法，四层是把物理层和数据链路层合一起叫网络接口层， 五层是拆开了</strong></p>
<p>附一张经典图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210126103224.jpg" alt=""></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>OSI</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC远程调用</title>
    <url>/posts/50885.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>以下内容摘抄至<a href="https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8">维基百科</a></p>
<blockquote>
<p>在分布式计算<strong>，远程过程调用</strong>（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过<strong>发送请求-接受回应</strong>进行信息交互的系统。</p>
<p>如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>，例：Java RMI。</p>
<p>RPC是一种进程间通信的模式，程序分布在不同的地址空间里。如果在同一主机里，RPC可以通过不同的虚拟地址空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的物理地址进行交互。许多技术（常常是不兼容）都是基于这种概念而实现的。</p>
</blockquote>
<h1 id="本地过程调用"><a href="#本地过程调用" class="headerlink" title="本地过程调用"></a>本地过程调用</h1><p>RPC就是要像调用本地的函数一样去调远程函数。在研究RPC前，我们先看看本地调用是怎么调的。假设我们要调用函数Multiply来计算lvalue * rvalue的结果:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = l * r;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lvalue = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> rvalue = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> l_times_r = Multiply(lvalue, rvalue);</span><br></pre></td></tr></table></figure>
<p>那么在第8行时，我们实际上执行了以下操作：</p>
<ol>
<li>将 lvalue 和 rvalue 的值压栈</li>
<li>进入Multiply函数，取出栈中的值10 和 20，将其赋予 l 和 r</li>
<li>执行第2行代码，计算 l * r ，并将结果存在 y</li>
<li>将 y 的值压栈，然后从Multiply返回</li>
<li>第8行，从栈中取出返回值 200 ，并赋值给 l_times_r</li>
</ol>
<p>以上5步就是执行本地调用的过程。（注：以上步骤只是为了说明原理。事实上编译器经常会做优化，对于参数和返回值少的情况会直接将其存放在寄存器，而不需要压栈弹栈的过程，甚至都不需要调用call，而直接做inline操作。仅就原理来说，这5步是没有问题的。）</p>
<h1 id="远程过程调用"><a href="#远程过程调用" class="headerlink" title="远程过程调用"></a>远程过程调用</h1><ol>
<li>客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到栈（stack）中。</li>
<li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 marshalling。（常见方式：XML、JSON、二进制编码）</li>
<li>客户端本地操作系统发送信息至服务器。（可通过自定义TCP协议或HTTP传输）</li>
<li>服务器系统将信息传送至服务端stub（server stub）。</li>
<li>服务端stub（server stub）解析信息。该过程叫 unmarshalling。</li>
<li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210125172400.png" alt="RPC远程过程调用流程图"></p>
<p>以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们的代理对象，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如jdk的Socket，最后通过底层网络实现实现数据的传输。</p>
<p>这个过程中最重要的就是<strong>序列化</strong>和<strong>反序列化</strong>了，因为数据传输的数据包必须是二进制的，你直接丢一个Java对象过去，人家可不认识，你必须把Java对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为Java对象。</p>
<h2 id="远程过程调用带来的新问题"><a href="#远程过程调用带来的新问题" class="headerlink" title="远程过程调用带来的新问题"></a>远程过程调用带来的新问题</h2><p>在远程调用时，我们需要执行的函数体是在远程的机器上的，也就是说，Multiply是在另一个进程中执行的。这就带来了几个新问题：</p>
<ol>
<li><strong>Call ID映射</strong>。我们怎么告诉远程机器我们要调用Multiply，而不是Add或者FooBar呢？在本地调用中，函数体是直接通过函数指针来指定的，我们调用Multiply，编译器就自动帮我们调用它相应的函数指针。但是在远程调用中，函数指针是不行的，因为两个进程的地址空间是完全不一样的。所以，在RPC中，所有的函数都必须有自己的一个ID。这个ID在所有进程中都是唯一确定的。客户端在做远程过程调用时，必须附上这个ID。然后我们还需要在客户端和服务端分别维护一个 {函数 &lt;—&gt; Call ID} 的对应表。两者的表不一定需要完全相同，但相同的函数对应的Call ID必须相同。当客户端需要进行远程调用时，它就查一下这个表，找出相应的Call ID，然后把它传给服务端，服务端也通过查表，来确定客户端需要调用的函数，然后执行相应函数的代码。</li>
<li><strong>序列化和反序列化</strong>。客户端怎么把参数值传给远程的函数呢？在本地调用中，我们只需要把参数压到栈里，然后让函数自己去栈里读就行。但是在远程过程调用时，客户端跟服务端是不同的进程，不能通过内存来传递参数。甚至有时候客户端和服务端使用的都不是同一种语言（比如服务端用C++，客户端用Java或者Python）。这时候就需要客户端把参数先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。这个过程叫序列化和反序列化。同理，从服务端返回的值也需要序列化反序列化的过程。</li>
<li><strong>网络传输</strong>。远程调用往往用在网络上，客户端和服务端是通过网络连接的。所有的数据都需要通过网络传输，因此就需要有一个网络传输层。网络传输层需要把Call ID和序列化后的参数字节流传给服务端，然后再把序列化后的调用结果传回客户端。只要能完成这两者的，都可以作为传输层使用。因此，它所使用的协议其实是不限的，能完成传输就行。尽管大部分RPC框架都使用TCP协议，但其实UDP也可以，而gRPC干脆就用了HTTP2。Java的Netty也属于这层的东西。</li>
</ol>
<h2 id="实现RPC框架"><a href="#实现RPC框架" class="headerlink" title="实现RPC框架"></a>实现RPC框架</h2><p>有了这以上三个机制，就能实现RPC了，具体过程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client端 </span></span><br><span class="line"><span class="comment">// int l_times_r = Call(ServerAddr, Multiply, lvalue, rvalue)</span></span><br><span class="line"><span class="number">1.</span> 将这个调用映射为Call ID。这里假设用最简单的字符串当Call ID的方法</span><br><span class="line"><span class="number">2.</span> 将Call ID，lvalue和rvalue序列化。可以直接将它们的值以二进制形式打包</span><br><span class="line"><span class="number">3.</span> 把<span class="number">2</span>中得到的数据包发送给ServerAddr，这需要使用网络传输层</span><br><span class="line"><span class="number">4.</span> 等待服务器返回结果</span><br><span class="line"><span class="number">5.</span> 如果服务器调用成功，那么就将结果反序列化，并赋给l_times_r</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server端</span></span><br><span class="line"><span class="number">1.</span> 在本地维护一个Call ID到函数指针的映射call_id_map，可以用map&lt;String, Method&lt;&gt;&gt;</span><br><span class="line"><span class="number">2.</span> 等待请求</span><br><span class="line"><span class="number">3.</span> 得到一个请求后，将其数据包反序列化，得到Call ID</span><br><span class="line"><span class="number">4.</span> 通过在call_id_map中查找，得到相应的函数指针</span><br><span class="line"><span class="number">5.</span> 将lvalue和rvalue反序列化后，在本地调用Multiply函数，得到结果</span><br><span class="line"><span class="number">6.</span> 将结果序列化后通过网络返回给Client</span><br></pre></td></tr></table></figure>
<p>所以要实现一个RPC框架，其实只需要按以上流程实现就基本完成了。</p>
<p>其中：</p>
<ul>
<li>Call ID映射可以直接使用函数字符串，也可以使用整数ID。映射表一般就是一个哈希表。</li>
<li>序列化反序列化可以自己写，也可以使用Protobuf或者FlatBuffers之类的。</li>
<li>网络传输库可以自己写socket，或者用asio，ZeroMQ，Netty之类。</li>
</ul>
<h1 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h1><ul>
<li>RPC形式的API组织形态是类和方法，或者说领域和行为。</li>
<li>因此API的命名往往是一个动词，比如GetUserInfo和CreateUser。</li>
<li>因为URI会非常多而且往往没有一些约定规范，所以需要有详细的文档。</li>
<li>也是因为无拘无束，HTTP方法基本只用GET和POST，设计起来比较简单。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>接口文档工具之Swagger2</title>
    <url>/posts/4810.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>相信无论是前端还是后端开发，都或多或少地被接口文档折磨过。前端经常抱怨后端给的接口文档与实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用后端，都期望有一个好的接口文档。但是这个接口文档对于程序员来说，就跟注释一样，经常会抱怨别人写的代码没有写注释，然而自己写起代码起来，最讨厌的，也是写注释。所以仅仅只通过强制来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118141339.png" alt=""></p>
<p>发现了痛点就要去找解决方案。解决方案用的人多了，就成了标准的规范，这就是Swagger的由来。通过这套规范，你只需要按照它的规范去定义接口及接口相关的信息。再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发模式，在开发新版本或者迭代版本的时候，只需要更新Swagger描述文件，就可以自动生成接口文档和客户端服务端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p>
<p>但即便如此，对于许多开发来说，编写这个yml或json格式的描述文件，本身也是有一定负担的工作，特别是在后面持续迭代开发的时候，往往会忽略更新这个描述文件，直接更改代码。久而久之，这个描述文件也和实际项目渐行渐远，基于该描述文件生成的接口文档也失去了参考意义。所以作为Java届服务端的大一统框架Spring，迅速将Swagger规范纳入自身的标准，建立了Spring-swagger项目，后面改成了现在的Springfox。通过在项目中引入Springfox，可以扫描相关的代码，生成该描述文件，进而生成与代码一致的接口文档和客户端代码。这种通过代码生成接口文档的形式，在后面需求持续迭代的项目中，显得尤为重要和高效。</p>
<h1 id="二、使用文档"><a href="#二、使用文档" class="headerlink" title="二、使用文档"></a>二、使用文档</h1><h2 id="1-Maven中添加依赖"><a href="#1-Maven中添加依赖" class="headerlink" title="1.Maven中添加依赖"></a>1.Maven中添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2注入配置"><a href="#2注入配置" class="headerlink" title="2注入配置"></a>2注入配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pzx.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ParameterBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.ModelRef;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Parameter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Swagger2Config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Swagger2的配置文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> JunPzx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> 2021/01/18 10:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createOpenApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder ticketPar = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .globalOperationParameters(pars)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.pzx.sys&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build().groupName(<span class="string">&quot;系统管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createUusApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder ticketPar = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ticketPar.name(<span class="string">&quot;Authorization&quot;</span>).description(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">                .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>)).parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>).build();</span><br><span class="line">        pars.add(ticketPar.build());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .globalOperationParameters(pars)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.pzx.user&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build().groupName(<span class="string">&quot;统一用户资源管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;统一用户资源管理平台API接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>ApiInfo:api文档的基本信息</li>
<li>Docket:配置框架的工作方式<ul>
<li>apiInfo():配置基本说明信息</li>
<li>apis(): 配置api选择方式(包,类注解,方法注解)</li>
<li>paths():配置扫描路径(所有,正则匹配)</li>
</ul>
</li>
</ul>
<h2 id="3-定义实例"><a href="#3-定义实例" class="headerlink" title="3.定义实例"></a>3.定义实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;这个类的标签&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;描述接口作用&quot;, notes = &quot;对接口的额外说明&quot;, response = String.class)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;te&quot;, value = &quot;解析该参数作用..&quot;, required = true, dataType = &quot;String&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/ok&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ok</span> <span class="params">(String te)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4.效果图"></a>4.效果图</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118113334.png" alt=""></p>
<h2 id="5-注解说明"><a href="#5-注解说明" class="headerlink" title="5.注解说明"></a>5.注解说明</h2><blockquote>
<p>@ApiOperation：用在请求的方法上，说明方法的用途、作用<br>value=“说明方法的用途、作用”<br>notes=“方法的备注说明”</p>
<p>@ApiImplicitParam ：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<br>name：参数名<br>value：参数的汉字说明、解释<br>required：参数是否必须传<br>paramType：参数放在哪个地方</p>
<ul>
<li>header —&gt; 请求参数的获取：@RequestHeader</li>
<li>query —&gt; 请求参数的获取：@RequestParam</li>
<li>path（用于restful接口）–&gt; 请求参数的获取：@PathVariable</li>
<li>body（不常用）</li>
<li>form（不常用）</li>
</ul>
<p>dataType：参数类型，默认String，其它值dataType=“Integer”</p>
<p>defaultValue：参数的默认值</p>
</blockquote>
<p><a href="https://www.junpzx.cn/posts/63365.html#more">Swagger2注解文档</a></p>
<h1 id="三、创建注释模板"><a href="#三、创建注释模板" class="headerlink" title="三、创建注释模板"></a>三、创建注释模板</h1><ol>
<li><p>打开setting —&gt; Editor —&gt; Live Templates</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118135946.png" alt=""></p>
</li>
<li><p>点击右侧的加号,创建<code>userDefine分组</code></p>
</li>
<li><p>选中新建的分组,点击加号,选中创建模板</p>
</li>
<li><p>编辑模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;&quot;, notes = &quot;&quot;,response=$resultType$.class,httpMethod=&quot;Get&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(value = &#123;$params$&#125;)</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118135940.png" alt=""></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27; @ApiImplicitParam(name=\&quot;&#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\&quot;,value=\&quot;\&quot;,required = true, dataType = \&quot;参数类型\&quot;, paramType = \&quot;header or body or form or path \&quot;),\\n&#x27;:&#x27;\&quot;,value=\&quot;\&quot;,required = true, dataType = \&quot;参数类型\&quot;, paramType = \&quot;header or body or form or path \&quot;)&#x27;)&#125;; return result&quot;</span>, methodParameters()) </span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118135934.png" alt=""></p>
</li>
<li><p>使用,在方法内部输入刚才设定的快捷代码,然后将生成的copy到方法上,修改对应的参数</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118140903.png" alt=""></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210118140821.png" alt=""></p>
</li>
</ol>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger2注解说明</title>
    <url>/posts/63365.html</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">注解</th>
<th style="text-align:left">属性</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Api</code></td>
<td style="text-align:left">用于类上，说明该类的作用。可以标记一个Controller类做为swagger 文档资源示例：<code>@Api</code>(value = “xxx”, description = “xxx”)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">value</td>
<td style="text-align:left">url的路径值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">tags</td>
<td style="text-align:left">如果设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">description</td>
<td style="text-align:left">对api资源的描述</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">basePath</td>
<td style="text-align:left">基本路径可以不配置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">position</td>
<td style="text-align:left">如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">produces</td>
<td style="text-align:left">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">consumes</td>
<td style="text-align:left">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">protocols</td>
<td style="text-align:left">Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">authorizations</td>
<td style="text-align:left">高级特性认证时配置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">hidden</td>
<td style="text-align:left">配置为true 将在文档中隐藏</td>
</tr>
<tr>
<td style="text-align:center"><code>@ApiOperation</code></td>
<td style="text-align:left">用于方法上，说明方法的作用，每一个url资源的定义示例：<code>@ApiOperation</code>(value = “xxx”,httpMethod=”POST”, notes= “xxx”,response=String.class)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">value</td>
<td style="text-align:left">url的路径值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">tags</td>
<td style="text-align:left">如果设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">notes</td>
<td style="text-align:left">对api资源的描述</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">position</td>
<td style="text-align:left">如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">produces</td>
<td style="text-align:left">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">consumes</td>
<td style="text-align:left">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">protocols</td>
<td style="text-align:left">Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">authorizations</td>
<td style="text-align:left">高级特性认证时配置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">hidden</td>
<td style="text-align:left">配置为true 将在文档中隐藏</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">response</td>
<td style="text-align:left">返回的对象</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">responseContainer</td>
<td style="text-align:left">这些对象是有效的 “List”, “Set” or “Map”.，其他无效</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">httpMethod</td>
<td style="text-align:left">“GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">code</td>
<td style="text-align:left">http的状态码 默认 200</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">extensions</td>
<td style="text-align:left">扩展属性</td>
</tr>
<tr>
<td style="text-align:center">@ApiParam</td>
<td style="text-align:left">用于方法、参数、字段上，请求属性示例： public ResponseEntity<User> createUser(@RequestBody @ApiParam(value = “Created user object”, required = true)  User user)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">name</td>
<td style="text-align:left">属性名称</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">value</td>
<td style="text-align:left">属性值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">defaultValue</td>
<td style="text-align:left">默认属性值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">allowableValues</td>
<td style="text-align:left">可以不配置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">required</td>
<td style="text-align:left">是否属性必填</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">access</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">allowMultiple</td>
<td style="text-align:left">默认为false</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">hidden</td>
<td style="text-align:left">隐藏该属性</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">example</td>
<td style="text-align:left">示例</td>
</tr>
<tr>
<td style="text-align:center">@ApiResponse</td>
<td style="text-align:left">用于方法上，响应配置示例：@ApiResponse(code = 400, message = “Invalid user supplied”)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">code</td>
<td style="text-align:left">http的状态码</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">message</td>
<td style="text-align:left">描述</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">response</td>
<td style="text-align:left">默认响应类 Void</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">reference</td>
<td style="text-align:left">参考ApiOperation中配置</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">responseHeaders</td>
<td style="text-align:left">参考 ResponseHeader 属性配置说明</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">responseContainer</td>
<td style="text-align:left">参考ApiOperation中配置</td>
</tr>
<tr>
<td style="text-align:center">@ApiResponses</td>
<td style="text-align:left">用于方法上，响应集配置示例： @ApiResponses({ @ApiResponse(code = 400, message = “Invalid Order”) })</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">value</td>
<td style="text-align:left">多个ApiResponse配置</td>
</tr>
<tr>
<td style="text-align:center">@ResponseHeader</td>
<td style="text-align:left">用于方法上，响应头设置示例：@ResponseHeader(name=”head1”,description=”response head conf”)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">name</td>
<td style="text-align:left">响应头名称</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">description</td>
<td style="text-align:left">头描述</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">response</td>
<td style="text-align:left">默认响应类 Void</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">responseContainer</td>
<td style="text-align:left">参考ApiOperation中配置</td>
</tr>
<tr>
<td style="text-align:center">@ApiImplicitParams</td>
<td style="text-align:left">用于方法上，包含一组参数说明</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">@ApiImplicitParam</td>
<td style="text-align:left">用于方法上，用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">paramType</td>
<td style="text-align:left">参数放在哪个地方:     - header 参数在request headers 里边提交（@RequestHeader）- query 直接跟参数完成自动映射赋值（@RequestParam）- path 用于restful接口，以地址的形式提交数(@PathVariable)      - body 以流的形式提交 仅支持POST(@RequestBody)- form 以form表单的形式提交 仅支持POST</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">name</td>
<td style="text-align:left">参数名</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">value</td>
<td style="text-align:left">参数的汉字说明、解释</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">dataType</td>
<td style="text-align:left">参数类型，默认String，其它值dataType=”Integer”  ，无用</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">required</td>
<td style="text-align:left">是否必要</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">defaultValue</td>
<td style="text-align:left">参数的默认值</td>
</tr>
<tr>
<td style="text-align:center">@ApiModel</td>
<td style="text-align:left">用于类上，描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">@ApiModelProperty</td>
<td style="text-align:left">用于方法、字段上，描述一个model的属性</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">@ApiIgnore</td>
<td style="text-align:left">用于类，属性，方法上，忽略某项api,使用@ApiIgnore</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性之Stream用法</title>
    <url>/posts/56916.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<p><strong>特点：</strong></p>
<p>​    1 . 不是数据结构，不会保存数据。</p>
<p>​    2. 不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p>
<p>​    3. 惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
<h1 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210114104243.png" alt="Stream操作分类"></p>
<ul>
<li>无状态：指元素的处理不受之前元素的影响；</li>
<li>有状态：指该操作只有拿到所有元素之后才能继续下去。</li>
<li>非短路操作：指必须处理所有元素才能得到最终结果；</li>
<li>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</li>
</ul>
<h1 id="三、具体用法"><a href="#三、具体用法" class="headerlink" title="三、具体用法"></a>三、具体用法</h1><h2 id="1-流的常用创建方法"><a href="#1-流的常用创建方法" class="headerlink" title="1.流的常用创建方法"></a>1.流的常用创建方法</h2><p><strong>1.1.使用Collection下的 stream() 和 parallelStream() 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br></pre></td></tr></table></figure>
<p><strong>1.2.使用Arrays 中的 stream() 方法，将数组转成流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] nums = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>
<p><strong>1.3.使用Stream中的静态方法：of()、iterate()、generate()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">6</span>);</span><br><span class="line">stream2.forEach(System.out::println); <span class="comment">// 0 2 4 6 8 10</span></span><br><span class="line"> </span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p><strong>1.4.使用 BufferedReader.lines() 方法，将每行内容转成流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\test_stream.txt&quot;</span>));</span><br><span class="line">Stream&lt;String&gt; lineStream = reader.lines();</span><br><span class="line">lineStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p><strong>1.5.使用 Pattern.splitAsStream() 方法，将字符串分隔成流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;a,b,c,d&quot;</span>);</span><br><span class="line">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="2-流的中间操作"><a href="#2-流的中间操作" class="headerlink" title="2.流的中间操作"></a>2.流的中间操作</h2><h3 id="2-1-筛选与切片"><a href="#2-1-筛选与切片" class="headerlink" title="2.1 筛选与切片"></a>2.1 筛选与切片</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filter</td>
<td style="text-align:center">过滤流中的某些元素</td>
</tr>
<tr>
<td style="text-align:center">limit(n)</td>
<td style="text-align:center">获取n个元素</td>
</tr>
<tr>
<td style="text-align:center">skip(n)</td>
<td style="text-align:center">跳过n元素，配合limit(n)可实现分页</td>
</tr>
<tr>
<td style="text-align:center">distinct</td>
<td style="text-align:center">通过流中元素的 hashCode() 和 equals() 去除重复元素</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">14</span>);</span><br><span class="line"> </span><br><span class="line">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class="number">5</span>) <span class="comment">//6 6 7 9 8 10 12 14 14</span></span><br><span class="line">        .distinct() <span class="comment">//6 7 9 8 10 12 14</span></span><br><span class="line">        .skip(<span class="number">2</span>) <span class="comment">//9 8 10 12 14</span></span><br><span class="line">        .limit(<span class="number">2</span>); <span class="comment">//9 8</span></span><br><span class="line">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="2-2-映射"><a href="#2-2-映射" class="headerlink" title="2.2 映射"></a>2.2 映射</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">map</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</td>
</tr>
<tr>
<td style="text-align:center">flatMap</td>
<td style="text-align:center">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将每个元素转成一个新的且不带逗号的元素</span></span><br><span class="line">Stream&lt;String&gt; s1 = list.stream().map(s -&gt; s.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">s1.forEach(System.out::println); <span class="comment">// abc  123</span></span><br><span class="line"> </span><br><span class="line">Stream&lt;String&gt; s3 = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">    <span class="comment">//将每个元素转换成一个stream</span></span><br><span class="line">    String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">    <span class="keyword">return</span> s2;</span><br><span class="line">&#125;);</span><br><span class="line">s3.forEach(System.out::println); <span class="comment">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-排序"><a href="#2-3-排序" class="headerlink" title="2.3 排序"></a>2.3 排序</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sorted()</td>
<td style="text-align:center">自然排序，流中元素需实现Comparable接口</td>
</tr>
<tr>
<td style="text-align:center">sorted(Comparator com)</td>
<td style="text-align:center">定制排序，自定义Comparator排序器</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现Compareable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br><span class="line"> </span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">        (o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="2-4-消费"><a href="#2-4-消费" class="headerlink" title="2.4 消费"></a>2.4 消费</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">peek</td>
<td style="text-align:center">如同于map，能得到流中的每一个元素。但map接收的是一个Function表达式，有返回值；<br />而peek接收的是Consumer表达式，没有返回值。</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line"> </span><br><span class="line">studentList.stream()</span><br><span class="line">        .peek(o -&gt; o.setAge(<span class="number">100</span>))</span><br><span class="line">        .forEach(System.out::println);   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;            </span><br></pre></td></tr></table></figure>
<h2 id="3-流的终止操作"><a href="#3-流的终止操作" class="headerlink" title="3.流的终止操作"></a>3.流的终止操作</h2><h3 id="3-1-匹配、聚合操作"><a href="#3-1-匹配、聚合操作" class="headerlink" title="3.1 匹配、聚合操作"></a>3.1 匹配、聚合操作</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">allMatch</td>
<td style="text-align:center">接收一个 Predicate 函数，当流中每个元素都符合该断言时才返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:center">noneMatch</td>
<td style="text-align:center">接收一个 Predicate 函数，当流中每个元素都不符合该断言时才返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:center">anyMatch</td>
<td style="text-align:center">接收一个 Predicate 函数，只要流中有一个元素满足该断言则返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:center">findFirst</td>
<td style="text-align:center">返回流中第一个元素</td>
</tr>
<tr>
<td style="text-align:center">findAny</td>
<td style="text-align:center">返回流中的任意元素</td>
</tr>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">返回流中元素的总个数</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">返回流中元素最大值</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">返回流中元素最小值</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">boolean</span> allMatch = list.stream().allMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>);  <span class="comment">//true</span></span><br><span class="line"> </span><br><span class="line">Integer findFirst = list.stream().findFirst().get(); <span class="comment">//1</span></span><br><span class="line">Integer findAny = list.stream().findAny().get(); <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> count = list.stream().count(); <span class="comment">//5</span></span><br><span class="line">Integer max = list.stream().max(Integer::compareTo).get(); <span class="comment">//5</span></span><br><span class="line">Integer min = list.stream().min(Integer::compareTo).get(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-规约操作"><a href="#3-2-规约操作" class="headerlink" title="3.2 规约操作"></a>3.2 规约操作</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></td>
<td style="text-align:center">第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为<br />流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二<br />个参数为流中的第三个元素；依次类推。</td>
</tr>
<tr>
<td style="text-align:center"><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></td>
<td style="text-align:center">流程跟上面一样，只是第一次执行时，accumulator函数的第一个参数为identity，而<br />第二个参数为流中的第一个元素。</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code></td>
<td style="text-align:center">在串行流(stream)中，该方法跟第二个方法一样，即第三个参数combiner不会起作用。<br />在并行流(parallelStream)中,我们知道流被fork join出多个线程进行执行，此时每个线<br />程的执行流程就跟第二个方法reduce(identity,accumulator)一样，而第三个参数combiner函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法reduce(accumulator)流程进行规约。</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//经过测试，当元素个数小于24时，并行时线程数等于元素个数，当大于等于24时，并行时线程数为16</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>);</span><br><span class="line"> </span><br><span class="line">Integer v = list.stream().reduce((x1, x2) -&gt; x1 + x2).get();</span><br><span class="line">System.out.println(v);   <span class="comment">// 300</span></span><br><span class="line"> </span><br><span class="line">Integer v1 = list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">System.out.println(v1);  <span class="comment">//310</span></span><br><span class="line"> </span><br><span class="line">Integer v2 = list.stream().reduce(<span class="number">0</span>,</span><br><span class="line">        (x1, x2) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stream accumulator: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">            <span class="keyword">return</span> x1 - x2;</span><br><span class="line">        &#125;,</span><br><span class="line">        (x1, x2) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stream combiner: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">            <span class="keyword">return</span> x1 * x2;</span><br><span class="line">        &#125;);</span><br><span class="line">System.out.println(v2); <span class="comment">// -300</span></span><br><span class="line"> </span><br><span class="line">Integer v3 = list.parallelStream().reduce(<span class="number">0</span>,</span><br><span class="line">        (x1, x2) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;parallelStream accumulator: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">            <span class="keyword">return</span> x1 - x2;</span><br><span class="line">        &#125;,</span><br><span class="line">        (x1, x2) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;parallelStream combiner: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">            <span class="keyword">return</span> x1 * x2;</span><br><span class="line">        &#125;);</span><br><span class="line">System.out.println(v3); <span class="comment">//197474048</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-收集操作"><a href="#3-3-收集操作" class="headerlink" title="3.3 收集操作"></a>3.3 收集操作</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">collect</td>
<td style="text-align:center">接收一个Collector实例，将流中元素收集成另外一个数据结构。</td>
</tr>
</tbody>
</table>
</div>
<p>Collector<T, A, R> 是一个接口，有以下5个抽象方法：</p>
<ul>
<li><code>Supplier&lt;A&gt; supplier()</code>：创建一个结果容器A</li>
<li><code>BiConsumer&lt;A, T&gt; accumulator()</code>：消费型接口，第一个参数为容器A，第二个参数为流中元素T。</li>
<li><code>BinaryOperator&lt;A&gt; combiner()</code>：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各                                                                 个子进程的运行结果(accumulator函数操作后的容器A)进行合并。</li>
<li><code>Function&lt;A, R&gt; finisher()</code>：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。</li>
<li><code>Set&lt;Characteristics&gt; characteristics()</code>：返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<ul>
<li>CONCURRENT：表示此收集器支持并发。</li>
<li>UNORDERED：表示该收集操作不会保留流中元素原有的顺序。</li>
<li>IDENTITY_FINISH：表示finisher参数只是标识而已，可忽略。</li>
</ul>
</li>
</ul>
<h4 id="3-3-1-Collector-工具库：Collectors"><a href="#3-3-1-Collector-工具库：Collectors" class="headerlink" title="3.3.1.Collector 工具库：Collectors"></a>3.3.1.Collector 工具库：Collectors</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;cc&quot;</span>, <span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;Student&gt; list = Arrays.asList(s1, s2, s3);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//装成list</span></span><br><span class="line">List&lt;Integer&gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); <span class="comment">// [10, 20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成set</span></span><br><span class="line">Set&lt;Integer&gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); <span class="comment">// [20, 10]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//转成map,注:key不能相同，否则报错</span></span><br><span class="line">Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); <span class="comment">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//字符串分隔符连接</span></span><br><span class="line">String joinName = list.stream().map(Student::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>)); <span class="comment">// (aa,bb,cc)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//聚合操作</span></span><br><span class="line"><span class="comment">//1.学生总数</span></span><br><span class="line">Long count = list.stream().collect(Collectors.counting()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//2.最大年龄 (最小的minBy同理)</span></span><br><span class="line">Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">//3.所有人的年龄</span></span><br><span class="line">Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); <span class="comment">// 40</span></span><br><span class="line"><span class="comment">//4.平均年龄</span></span><br><span class="line">Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); <span class="comment">// 13.333333333333334</span></span><br><span class="line"><span class="comment">// 带上以上所有方法</span></span><br><span class="line">DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));</span><br><span class="line">System.out.println(<span class="string">&quot;count:&quot;</span> + statistics.getCount() + <span class="string">&quot;,max:&quot;</span> + statistics.getMax() + <span class="string">&quot;,sum:&quot;</span> + statistics.getSum() + <span class="string">&quot;,average:&quot;</span> + statistics.getAverage());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">Map&lt;Integer, List&lt;Student&gt;&gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line"><span class="comment">//多重分组,先根据类型分再根据年龄分</span></span><br><span class="line">Map&lt;Integer, Map&lt;Integer, List&lt;Student&gt;&gt;&gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line"><span class="comment">//分成两部分，一部分大于10岁，一部分小于等于10岁</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&gt; v.getAge() &gt; <span class="number">10</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//规约</span></span><br><span class="line">Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); <span class="comment">//40</span></span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-Collectors-toList-解析"><a href="#3-3-2-Collectors-toList-解析" class="headerlink" title="3.3.2 Collectors.toList() 解析"></a>3.3.2 Collectors.toList() 解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toList 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CollectorImpl&lt;&gt;((Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class="keyword">new</span>, List::add,</span><br><span class="line">            (left, right) -&gt; &#123;</span><br><span class="line">                left.addAll(right);</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;, CH_ID);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//为了更好地理解，我们转化一下源码中的lambda表达式</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class="line">    Supplier&lt;List&lt;T&gt;&gt; supplier = () -&gt; <span class="keyword">new</span> ArrayList();</span><br><span class="line">    BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator = (list, t) -&gt; list.add(t);</span><br><span class="line">    BinaryOperator&lt;List&lt;T&gt;&gt; combiner = (list1, list2) -&gt; &#123;</span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;;</span><br><span class="line">    Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher = (list) -&gt; list;</span><br><span class="line">    Set&lt;Collector.Characteristics&gt; characteristics = Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Collector&lt;T, List&lt;T&gt;, List&lt;T&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Supplier <span class="title">supplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> supplier;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BiConsumer <span class="title">accumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> accumulator;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BinaryOperator <span class="title">combiner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> combiner;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Function <span class="title">finisher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> finisher;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> characteristics;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDK8</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea常用快捷键整理</title>
    <url>/posts/28406.html</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl + C</td>
<td style="text-align:center">复制</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + V</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + X</td>
<td style="text-align:center">剪切 或者 删除一行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + D</td>
<td style="text-align:center">复制一行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + W</td>
<td style="text-align:center">选中,连续按会有其他效果,如果光标在梅花括号旁,则会选中该括号作用域中的所有代码;如果光标在行尾,则是选中整行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + G</td>
<td style="text-align:center">跳转到指定行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + F</td>
<td style="text-align:center">搜索</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + R</td>
<td style="text-align:center">替换</td>
</tr>
<tr>
<td style="text-align:center">Alt + 回车</td>
<td style="text-align:center">导入包,自动修正</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + N</td>
<td style="text-align:center">查找类</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Shift + N</td>
<td style="text-align:center">查找文件</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + O</td>
<td style="text-align:center">优化导入的类和包</td>
</tr>
<tr>
<td style="text-align:center">Alt + Insert</td>
<td style="text-align:center">生成代码(如get,set方法,构造函数等)</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + E</td>
<td style="text-align:center">最近打开的文件</td>
</tr>
<tr>
<td style="text-align:center">Alt + Shift + C</td>
<td style="text-align:center">最近的更改</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + P</td>
<td style="text-align:center">方法参数提示</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + H</td>
<td style="text-align:center">显示类结构图</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Q</td>
<td style="text-align:center">显示注释文档</td>
</tr>
<tr>
<td style="text-align:center">Alt + 1</td>
<td style="text-align:center">快速打开或隐藏工程面板</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + F12</td>
<td style="text-align:center">列出该类的所有方法</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + L</td>
<td style="text-align:center">整理代码格式</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + left/right</td>
<td style="text-align:center">返回至上次浏览的位置</td>
</tr>
<tr>
<td style="text-align:center">Alt + left/right</td>
<td style="text-align:center">切换代码视图</td>
</tr>
<tr>
<td style="text-align:center">Alt+ Up/Down</td>
<td style="text-align:center">在方法间快速移动定位</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Shift + Up/Down</td>
<td style="text-align:center">代码向上/下移动</td>
</tr>
<tr>
<td style="text-align:center">F2 或 Shift + F2</td>
<td style="text-align:center">高亮错误或警告快速定位</td>
</tr>
<tr>
<td style="text-align:center">Ctrl＋O</td>
<td style="text-align:center">可以选择父类的方法进行重写</td>
</tr>
<tr>
<td style="text-align:center">Ctrl ＋ Alt ＋ B</td>
<td style="text-align:center">可以跳转到抽象方法的实现</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/posts/47193.html</url>
    <content><![CDATA[<p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，下面大致介绍一下其语法。</p>
<h2 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - +. &gt;"></a>一、基本符号：* - +. &gt;</h2><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p>
<h2 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h2><p>1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<p>2.相当于标签闭合</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题 #</span></span><br><span class="line"><span class="section">## 二级标题 ##</span></span><br><span class="line"><span class="section">### 三级标题 ###</span></span><br><span class="line"><span class="section">#### 四级标题 ####</span></span><br><span class="line"><span class="section">##### 五级标题 #####</span></span><br><span class="line"><span class="section">###### 六级标题 #####</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111142108.png" alt="#标题效果"></p>
<h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//形式一</span><br><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">+</span> b</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line">//形式二</span><br><span class="line"><span class="bullet">-</span> d</span><br><span class="line"><span class="bullet">-</span> e</span><br><span class="line"><span class="bullet">-</span> f</span><br><span class="line">//形式三</span><br><span class="line"><span class="bullet">*</span> g</span><br><span class="line"><span class="bullet">*</span> h</span><br><span class="line"><span class="bullet">*</span> i</span><br></pre></td></tr></table></figure>
<p>以上三种形式，效果其实都是一样的：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111142324.png" alt="无序列表效果"></p>
<h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//正常形式</span><br><span class="line"><span class="bullet">1.</span> abc</span><br><span class="line"><span class="bullet">2.</span> bcd</span><br><span class="line"><span class="bullet">3.</span> cde</span><br><span class="line">//错序效果</span><br><span class="line"><span class="bullet">2.</span> fgh</span><br><span class="line"><span class="bullet">3.</span> ghi</span><br><span class="line"><span class="bullet">5.</span> hij</span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111142714.png" alt="有序列表效果"></p>
<blockquote>
<p>如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，<br>错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5</p>
</blockquote>
<h3 id="3-嵌套列表"><a href="#3-嵌套列表" class="headerlink" title="3.嵌套列表"></a>3.嵌套列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//无序列表嵌套</span><br><span class="line"><span class="bullet">+</span> 123</span><br><span class="line"><span class="bullet">    +</span> abc</span><br><span class="line"><span class="bullet">    +</span> bcd</span><br><span class="line"><span class="bullet">    +</span> cde</span><br><span class="line"><span class="bullet">+</span> 465</span><br><span class="line"><span class="bullet">+</span> 789</span><br><span class="line">//有序列表嵌套</span><br><span class="line"><span class="bullet">1.</span> abcd</span><br><span class="line"><span class="bullet">    1.</span> abcde</span><br><span class="line"><span class="bullet">    2.</span> abcde</span><br><span class="line"><span class="bullet">    3.</span> abcde</span><br><span class="line"><span class="bullet">2.</span> bcde</span><br><span class="line"><span class="bullet">3.</span> cdef</span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111145230.png" alt="嵌套列表效果"></p>
<h2 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p>
<h3 id="1-正常形式"><a href="#1-正常形式" class="headerlink" title="1.正常形式"></a>1.正常形式</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span></span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111145410.png" alt="引用块效果"></p>
<h3 id="2-嵌套区块"><a href="#2-嵌套区块" class="headerlink" title="2.嵌套区块"></a>2.嵌套区块</h3><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 一级引用</span></span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111145718.png" alt="嵌套引用效果"></p>
<h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p>
<h3 id="1-少量代码"><a href="#1-少量代码" class="headerlink" title="1.少量代码"></a>1.少量代码</h3><p>少量代码，单行使用，直接用`包裹起来就行了</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">` shaoliangdaima,danhangshiyong `</span></span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111150011.png" alt="少量代码代码块效果"></p>
<h3 id="2-大量代码"><a href="#2-大量代码" class="headerlink" title="2.大量代码"></a>2.大量代码</h3><p>大量代码，需要多行使用，用```包裹起来</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>    daliangdaima,xuyaoduohangshiyong
    daliangdaima,xuyaoduohangshiyong
    daliangdaima,xuyaoduohangshiyong
    daliangdaima,xuyaoduohangshiyong
    daliangdaima,xuyaoduohangshiyong
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">效果图:</span><br><span class="line"></span><br><span class="line">![大量代码代码块效果](https:&#x2F;&#x2F;gitee.com&#x2F;junpzx&#x2F;blog-img&#x2F;raw&#x2F;master&#x2F;&#x2F;img&#x2F;20210111150325.png)</span><br><span class="line"></span><br><span class="line">## 六、链接</span><br><span class="line"></span><br><span class="line">链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;markdown</span><br><span class="line">[博客](https:&#x2F;&#x2F;www.junpzx.cn &quot;星辰大海&quot;),记录日常学习中，问题的解决方案和学习笔记</span><br></pre></td></tr></table></figure>
</code></pre><p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111150652.png" alt="链接效果"></p>
<h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><p>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">小基友</span>](<span class="link">https://gitee.com/junpzx/blog-img/raw/master//img/20210111151952.jpg &quot;可爱&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111152106.png" alt="图片效果"></p>
<h2 id="八、分割线"><a href="#八、分割线" class="headerlink" title="八、分割线"></a>八、分割线</h2><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="bullet">-</span> - -</span><br><span class="line">------</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong">**</span><span class="strong">****</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">_</span> <span class="emphasis">_ _</span></span></span><br><span class="line"><span class="strong">__</span><span class="strong">____</span></span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111152338.png" alt="分割线效果"></p>
<h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><h3 id="1-强调字体"><a href="#1-强调字体" class="headerlink" title="1.强调字体"></a>1.强调字体</h3><p>一个星号或者是一个下划线包起来，会转换为倾斜，如果是2个，会转换为加粗</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*md*</span>    </span><br><span class="line"><span class="strong">**md**</span></span><br><span class="line"><span class="emphasis">_md_</span>   </span><br><span class="line"> <span class="strong">__md__</span></span><br></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111152509.png" alt="强调字体效果"></p>
<h3 id="2-转义"><a href="#2-转义" class="headerlink" title="2.转义"></a>2.转义</h3><p>基本上和js转义一样,\加需要转义的字符</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\\</span><br><span class="line">\<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">\+</span></span><br><span class="line"><span class="emphasis">\-</span></span><br><span class="line"><span class="emphasis">\`</span></span><br><span class="line"><span class="emphasis">\_</span></span><br></pre></td></tr></table></figure>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3.删除线"></a>3.删除线</h3><p>用~~把需要显示删除线的字符包裹起来</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure>
<h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//例子一</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面三个例子的效果一样，由此可得：</p>
<ol>
<li>表格的格式不一定要对的非常齐,是为了良好的变成风格，尽量对齐是最好的</li>
<li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li>
</ol>
</blockquote>
<p>效果图:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210111152950.png" alt="表格效果"></p>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson的简单使用</title>
    <url>/posts/4168.html</url>
    <content><![CDATA[<p>博客转载至<a href="https://www.jianshu.com/p/67b6da565f81">谁在烽烟彼岸</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象ObjectMapper类是Jackson库的主要类。它称ObjectMapper的原因是因为它将JSON映射到Java对象（反序列化），或将Java对象映射到JSON（序列化）。它使用JsonParser和JsonGenerator的实例实现JSON实际的读/写。</p>
<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Jackson如何将JSON字段与Java字段匹配"><a href="#Jackson如何将JSON字段与Java字段匹配" class="headerlink" title="Jackson如何将JSON字段与Java字段匹配"></a>Jackson如何将JSON字段与Java字段匹配</h2><ul>
<li>方式一: Jackson通过将JSON字段的名称与Java对象中的getter和setter方法相匹配，将JSON对象的字段映射到Java对象中的字段。Jackson删除了getter和setter方法名称的“get”和“set”部分，并将剩余名称的第一个字符转换为小写。</li>
<li>方式二: Jackson还可以通过java反射进行匹配</li>
<li>方式三: 通过注解或者其它方式进行自定义的序列化和反序列化程序。</li>
</ul>
<h2 id="通过ObjectMapper进行转换"><a href="#通过ObjectMapper进行转换" class="headerlink" title="通过ObjectMapper进行转换"></a>通过ObjectMapper进行转换</h2><h3 id="转Java对象"><a href="#转Java对象" class="headerlink" title="转Java对象"></a>转Java对象</h3><ol>
<li><p>将json串转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String carJson = <span class="string">&quot;&#123; \&quot;brand\&quot; : \&quot;Mercedes\&quot;, \&quot;doors\&quot; : 5 &#125;&quot;</span>;</span><br><span class="line">Car car = objectMapper.readValue(carJson, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过reader对象将json串转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String carJson =  <span class="string">&quot;&#123; \&quot;brand\&quot; : \&quot;Mercedes\&quot;, \&quot;doors\&quot; : 4 &#125;&quot;</span>;</span><br><span class="line">Reader reader = <span class="keyword">new</span> StringReader(carJson);</span><br><span class="line">Car car = objectMapper.readValue(reader, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将某个文件中的内容转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;data/car.json&quot;</span>);</span><br><span class="line">Car car = objectMapper.readValue(file, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将某个url中的文件的内容转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;file:data/car.json&quot;</span>);</span><br><span class="line">Car car = objectMapper.readValue(url, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将InputStream中的内容转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;data/car.json&quot;</span>);</span><br><span class="line">Car car = objectMapper.readValue(input, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将byte[]中内容转换成对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String carJson =  <span class="string">&quot;&#123; \&quot;brand\&quot; : \&quot;Mercedes\&quot;, \&quot;doors\&quot; : 5 &#125;&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = carJson.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">Car car = objectMapper.readValue(bytes, Car.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将json串转换成对象数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonArray = <span class="string">&quot;[&#123;\&quot;brand\&quot;:\&quot;ford\&quot;&#125;, &#123;\&quot;brand\&quot;:\&quot;Fiat\&quot;&#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Car[] cars2 = objectMapper.readValue(jsonArray, Car[].class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将json串转换成具体类型的List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonArray = <span class="string">&quot;[&#123;\&quot;brand\&quot;:\&quot;ford\&quot;&#125;, &#123;\&quot;brand\&quot;:\&quot;Fiat\&quot;&#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">List&lt;Car&gt; cars1 = objectMapper.readValue(jsonArray, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将json串转换成具体类型的Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonObject = <span class="string">&quot;&#123;\&quot;brand\&quot;:\&quot;ford\&quot;, \&quot;doors\&quot;:5&#125;&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Map&lt;String, Object&gt; jsonMap = objectMapper.readValue(jsonObject,</span><br><span class="line">    <span class="keyword">new</span> TypeReference&lt;Map&lt;String,Object&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="转Json"><a href="#转Json" class="headerlink" title="转Json"></a>转Json</h3><p>ObjectMapper write有三个方法:</p>
<blockquote>
<ul>
<li>writeValue()</li>
<li>writeValueAsString()</li>
<li>writeValueAsBytes()</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Car car = <span class="keyword">new</span> Car();</span><br><span class="line">car.brand = <span class="string">&quot;BMW&quot;</span>;</span><br><span class="line">car.doors = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//写到文件中</span></span><br><span class="line">objectMapper.writeValue( <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data/output-2.json&quot;</span>), car);</span><br><span class="line"><span class="comment">//写到字符串中</span></span><br><span class="line">String json = objectMapper.writeValueAsString(car);</span><br></pre></td></tr></table></figure>
<h2 id="读取和写入其他数据格式"><a href="#读取和写入其他数据格式" class="headerlink" title="读取和写入其他数据格式"></a>读取和写入其他数据格式</h2><p>使用Jackson可以读取和写入除JSON之外的其他数据格式：</p>
<blockquote>
<ul>
<li>CBOR</li>
<li>MessagePack</li>
<li>YAML</li>
</ul>
</blockquote>
<p>其中这些数据格式比JSON更紧凑，因此在存储时占用的空间更少，并且读取和写入速度比JSON更快。</p>
<h3 id="读写CBOR"><a href="#读写CBOR" class="headerlink" title="读写CBOR"></a>读写CBOR</h3><p>CBOR是一种二进制数据格式，它与JSON兼容，但比JSON更紧凑，因此读写速度更快。Jackson ObjectMapper可以像读写JSON一样读写CBOR。为了使用Jackson读取和写入CBOR，您需要为项目添加额外的Maven依赖项。介绍了添加Jackson CBOR Maven依赖关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException; </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper; </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.cbor.CBORFactory; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CborJacksonExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper(<span class="keyword">new</span> CBORFactory());</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;john@doe.com&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] cborBytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cborBytes = objectMapper.writeValueAsBytes(employee);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// normally, rethrow exception here - or don&#x27;t catch it at all.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee2 = objectMapper.readValue(cborBytes, Employee.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读写MessagePack"><a href="#读写MessagePack" class="headerlink" title="读写MessagePack"></a>读写MessagePack</h3><p>MessagePack是一种文本数据格式，与JSON兼容，但更紧凑，因此读写速度更快。Jackson ObjectMapper可以像读写JSON一样读写MessagePack。为了使用Jackson读写MessagePack，您需要为项目添加额外的Maven依赖项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.msgpack.jackson.dataformat.MessagePackFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePackJacksonExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper(<span class="keyword">new</span> MessagePackFactory());</span><br><span class="line"></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;john@doe.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] messagePackBytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            messagePackBytes = objectMapper.writeValueAsBytes(employee);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// normally, rethrow exception here - or don&#x27;t catch it at all.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee2 = objectMapper.readValue(messagePackBytes, Employee.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;messagePackBytes = &quot;</span> + messagePackBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读写YAML"><a href="#读写YAML" class="headerlink" title="读写YAML"></a>读写YAML</h3><p>YAML是一种文本数据格式，类似于JSON，但使用不同的语法。Jackson ObjectMapper可以像读写JSON一样读写YAML。为了使用Jackson读取和写入YAML，您需要为项目添加额外的Maven依赖项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlJacksonExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper(<span class="keyword">new</span> YAMLFactory());</span><br><span class="line"></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;john@doe.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String yamlString = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            yamlString = objectMapper.writeValueAsString(employee);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// normally, rethrow exception here - or don&#x27;t catch it at all.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee employee2 = objectMapper.readValue(yamlString, Employee.class);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ObjectMapper的设置"><a href="#ObjectMapper的设置" class="headerlink" title="ObjectMapper的设置"></a>ObjectMapper的设置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">//去掉默认的时间戳格式     </span></span><br><span class="line">objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//设置为东八区</span></span><br><span class="line">objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;GMT+8&quot;</span>));</span><br><span class="line"><span class="comment">// 设置输入:禁止把POJO中值为null的字段映射到json字符串中</span></span><br><span class="line">objectMapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, <span class="keyword">false</span>);</span><br><span class="line"> <span class="comment">//空值不序列化</span></span><br><span class="line">objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line"><span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">objectMapper.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"><span class="comment">//序列化时，日期的统一格式</span></span><br><span class="line">objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"><span class="comment">//序列化日期时以timestamps输出，默认true</span></span><br><span class="line">objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//序列化枚举是以toString()来输出，默认false，即默认以name()来输出</span></span><br><span class="line">objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING,<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//序列化枚举是以ordinal()来输出，默认false</span></span><br><span class="line">objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_INDEX,<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//类为空时，不要抛异常</span></span><br><span class="line">objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//反序列化时,遇到未知属性时是否引起结果失败</span></span><br><span class="line">objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line"> <span class="comment">//单引号处理</span></span><br><span class="line">objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//解析器支持解析结束符</span></span><br><span class="line">objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h2><p>ObjectMapper 可以通过自定义解析器来定义解析方法<br>以下是自定义的反序列化的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point_Fastjson_Deserialize</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        JsonNode node = jsonParser.getCodec().readTree(jsonParser);</span><br><span class="line">        Iterator&lt;JsonNode&gt; iterator = node.get(<span class="string">&quot;coordinates&quot;</span>).elements();</span><br><span class="line">        List&lt;Double&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            list.add(iterator.next().asDouble());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(list.get(<span class="number">0</span>), list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pzx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude.Include;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.JsonNodeFactory;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ObjectNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.type.CollectionType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MapperUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO jackSon转换工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> JunPzx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> 2021/01/11 10:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(MapperUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//设置时区</span></span><br><span class="line">        MAPPER.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;GMT+8&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置是否将日期写入时间戳</span></span><br><span class="line">        MAPPER.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 序列化的时候序列对象的不为Null的属性</span></span><br><span class="line">        MAPPER.setSerializationInclusion(Include.NON_NULL);</span><br><span class="line">        <span class="comment">// 如果是空对象的时候,不抛异常</span></span><br><span class="line">        MAPPER.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 美化输出，转换为格式化的json(默认为false,不美化)</span></span><br><span class="line">        MAPPER.configure(SerializationFeature.INDENT_OUTPUT, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 取消时间的转化格式,默认是时间戳,可以取消,同时需要设置要表现的时间格式</span></span><br><span class="line">        MAPPER.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        MAPPER.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="comment">// 反序列化的时候如果多了其他属性,不抛出异常</span></span><br><span class="line">        MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 允许单引号（非标准）</span></span><br><span class="line">        MAPPER.configure(Feature.ALLOW_SINGLE_QUOTES, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MapperUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj转换成json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">obj2json</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        String json = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            json = MAPPER.writeValueAsString(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj转换成str</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">obj2str</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj2json(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj转换成byte[]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">byte</span>[] obj2jsonBytes(T entity) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.writeValueAsBytes(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj转换成node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JsonNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">JsonNode <span class="title">obj2node</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.valueToTree(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj写入file中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filepath 写入的文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity   需要写入的实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;      泛型,实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean(true : Success, false : fail)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">write2jsonFile</span><span class="params">(String filepath, T entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filepath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">                var4.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> write2jsonFile(<span class="keyword">new</span> File(filepath), entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj写入file中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file   写入的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 需要写入的实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型,实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean(true : Success, false : fail)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">write2jsonFile</span><span class="params">(File file, T entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MAPPER.writeValue(file, entity);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException var3) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;File not exists&quot;</span>);</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json转换成obj</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 需要转换的对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">json2obj</span><span class="params">(String json, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(json, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将str转换成obj</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 需要转换的对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">str2obj</span><span class="params">(String json, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json2obj(json, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json字符串转换成map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json 需要转换的json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">json2map</span><span class="params">(String json)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(json, Map.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json字符串转换成map&lt;String,T&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json 需要转换的json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type value的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">json2map</span><span class="params">(String json, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(json, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, T&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将map转换成obj</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  需要转换的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 转换成的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的T类型的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">map2obj</span><span class="params">(Map map, Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.convertValue(map, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定文件中的内容转换成指定的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 需要转换成的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseJSON</span><span class="params">(File file, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(file, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定url的内容转换成指定的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url  链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 需要转换成的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseJSON</span><span class="params">(URL url, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(url, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json串转换成指定元素类型的List</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> T    List的元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">json2list</span><span class="params">(String json, Class&lt;T&gt; T)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CollectionType type = MAPPER.getTypeFactory().constructCollectionType(List.class, T);</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readValue(json, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将str转换成指定元素类型的List</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> T   List的元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">str2list</span><span class="params">(String str, Class&lt;T&gt; T)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json2list(str, T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json串转换成JsonNode</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JsonNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title">json2node</span><span class="params">(String json)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER.readTree(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将str转换成JsonNode</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JsonNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title">str2node</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json2node(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否格式正确的json串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true: 是  false: 否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJsonString</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MAPPER.readTree(json);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;check input string is json format;json : &quot;</span> + json + <span class="string">&quot; ; exception;&quot;</span> + var2.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个数组节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ArrayNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayNode <span class="title">arrayNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonNodeFactory.instance.arrayNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个Object节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ObjectNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectNode <span class="title">objectNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonNodeFactory.instance.objectNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>接口文档工具之ShowDoc简单使用</title>
    <url>/posts/19954.html</url>
    <content><![CDATA[<h2 id="接口文档工具之ShowDoc简单使用"><a href="#接口文档工具之ShowDoc简单使用" class="headerlink" title="接口文档工具之ShowDoc简单使用"></a>接口文档工具之ShowDoc简单使用</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于写API文档这件事，虽然说文本编辑软件或者接口管理软件能在某种程度上提高我们的效率，但我们依然可以试图借助技术的力量，更自动化地生成API文档，释放自己的生产力。<br>为此，showdoc官方提供了一种自动化解决方案。在代码里编写特定格式的程序注释，然后showdoc通过读取这些注释来自动生成文档。由于这种方式不跟特定的语言耦合，因此它的使用范围相当广泛，可以支持c++、java、php、node等等常见的主流语言。<br>采用这种方式，尽管我们在第一次填写注释的时候可能会有些繁琐，但是它后期带来的可维护性是非常高的。代码变动后，不需要再额外登录showdoc，直接在代码里修改注释即可。同时自动化的脚本也可以加入持续集成或者某些自动化工程里，让“写API文档”这件事如”单元测试”般纳入工程工作流里面。</p>
<h2 id="自动生成API文档"><a href="#自动生成API文档" class="headerlink" title="自动生成API文档"></a>自动生成API文档</h2><h3 id="windows下使用"><a href="#windows下使用" class="headerlink" title="windows下使用"></a>windows下使用</h3><ol>
<li><p>如果你的电脑无法运行.sh后缀的文件,那么请安装前置环境</p>
<p>推荐下载git for windows：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 下载后直接双击安装即可。<br>如果从官网下载比较慢，可用考虑下载由第三方开发者维护的国内版(showdoc官方不保证其长期稳定)：<br><a href="https://npm.taobao.org/mirrors/git-for-windows/v2.17.0.windows.1/Git-2.17.0-64-bit.exe">https://npm.taobao.org/mirrors/git-for-windows/v2.17.0.windows.1/Git-2.17.0-64-bit.exe</a></p>
</li>
<li><p>下载ShowDoc官方脚本<a href="https://www.showdoc.cc/script/showdoc_api.sh">https://www.showdoc.cc/script/showdoc_api.sh</a></p>
</li>
<li><p>下载后，将showdoc_api.sh放在你的项目目录下。右击，选择编辑。</p>
<ul>
<li>修改文件开头的三个变量值<ul>
<li>api_key : 需要登录showdoc进入某个项目的设置，点击开放API，便可以看到说明</li>
<li>api_token : 需要登录showdoc进入某个项目的设置，点击开放API，便可以看到说明</li>
<li>url : 如果是使用www.showdoc.cc ，则不需要修改。如果是使用开源版showdoc，则需要将地址改为<a href="http://xx.com/server/index.php?s=/api/open/fromComments">http://xx.com/server/index.php?s=/api/open/fromComments</a> ，其中，别忘记了url里含server目录。</li>
</ul>
</li>
</ul>
</li>
<li><p>填写完毕，保存。然后直接双击运行，脚本会自动递归扫描本目录和子目录的所有文本代码文件，并生成API文档。</p>
</li>
</ol>
<h3 id="Linux-Mac下使用"><a href="#Linux-Mac下使用" class="headerlink" title="Linux/Mac下使用"></a>Linux/Mac下使用</h3><ol>
<li><p>先cd进入你的项目目录，命令行模式下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.showdoc.cc&#x2F;script&#x2F;showdoc_api.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑下载完成的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi showdoc_api.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改文件开头的三个变量值</p>
<ul>
<li>api_key : 需要登录showdoc进入某个项目的设置，点击开放API，便可以看到说明</li>
<li>api_token : 需要登录showdoc进入某个项目的设置，点击开放API，便可以看到说明</li>
<li>url : 如果是使用www.showdoc.cc ，则不需要修改。如果是使用开源版showdoc，则需要将地址改为<a href="http://xx.com/server/index.php?s=/api/open/fromComments">http://xx.com/server/index.php?s=/api/open/fromComments</a> ，其中，别忘记了url里含server目录。</li>
</ul>
</li>
<li><p>保存文件后。执行以下命令，脚本会自动递归扫描本目录和子目录的所有文本代码文件，并生成API文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> chmod +x showdoc_api.sh</span><br><span class="line">.&#x2F;showdoc_api.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * showdoc</span><br><span class="line">    * @catalog 测试文档&#x2F;用户相关</span><br><span class="line">    * @title 用户登录</span><br><span class="line">    * @description 用户登录的接口</span><br><span class="line">    * @method get</span><br><span class="line">    * @url https:&#x2F;&#x2F;www.showdoc.cc&#x2F;home&#x2F;user&#x2F;login</span><br><span class="line">    * @header token 可选 string 设备token </span><br><span class="line">    * @param username 必选 string 用户名 </span><br><span class="line">    * @param password 必选 string 密码  </span><br><span class="line">    * @param name 可选 string 用户昵称  </span><br><span class="line">    * @return &#123;&quot;error_code&quot;:0,&quot;data&quot;:&#123;&quot;uid&quot;:&quot;1&quot;,&quot;username&quot;:&quot;12154545&quot;,&quot;name&quot;:&quot;吴系挂&quot;,&quot;groupid&quot;:2,&quot;reg_time&quot;:&quot;1436864169&quot;,&quot;last_login_time&quot;:&quot;0&quot;&#125;&#125;</span><br><span class="line">    * @return_param groupid int 用户组id</span><br><span class="line">    * @return_param name string 用户昵称</span><br><span class="line">    * @remark 这里是备注信息</span><br><span class="line">    * @number 99</span><br><span class="line">    *&#x2F;</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@catalog</code></td>
<td>生成文档要放到哪个目录。如果只是二级目录，则直接写目录名字。如果是三级目录，而需要写二级目录/三级目录，即用<code>/</code>隔开。如”一层/二层/三层”</td>
</tr>
<tr>
<td><code>@title</code></td>
<td>表示生成的文档标题</td>
</tr>
<tr>
<td><code>@description</code></td>
<td>是文档内容中对接口的描述信息</td>
</tr>
<tr>
<td><code>@method</code></td>
<td>接口请求方式。一般是get或者post</td>
</tr>
<tr>
<td><code>@url</code></td>
<td>接口URL。不要在URL中使用&amp;符号来传递参数。传递参数请写在参数表格中</td>
</tr>
<tr>
<td><code>@header</code></td>
<td>可选。header说明。一行注释对应着表格的一行。用空格或者tab符号来隔开每一列信息。</td>
</tr>
<tr>
<td><code>@param</code></td>
<td>参数表格说明。一行注释对应着表格的一行。用空格或者tab符号来隔开每一列信息。</td>
</tr>
<tr>
<td><code>@json_param</code></td>
<td>可选。当请求参数是json的时候，可增加此标签。请把json内容压缩在同一行内。</td>
</tr>
<tr>
<td><code>@return</code></td>
<td>返回内容。请把返回内容压缩在同一行内。如果是json，程序会自动进行格式化展示。 如果是非json内容，则原样展示。</td>
</tr>
<tr>
<td><code>@return_param</code></td>
<td>返回参数的表格说明。一行注释对应着表格的一行。用空格或者tab符号来隔开每一列信息。</td>
</tr>
<tr>
<td><code>@remark</code></td>
<td>备注信息</td>
</tr>
<tr>
<td><code>@number</code></td>
<td>可选。文档的序号。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h3><p>官方文档:</p>
<blockquote>
<p>请严格按照我们的语法来填写程序注释。如果格式不对，则可能引发未知的解析错误。</p>
<p>出于数据安全考虑，showdoc不允许直接通过代码删除文档。只能新增或者修改。所以，如果你要删除文档，请登录showdoc网页端完成。</p>
<p>本脚本只能通过特定的程序注释来生成文档，使用范围有限。如果你是想通过其他方式自由地生成文档，如通过word、通过博客软件等，请参考我们更自由的开放API：<a href="https://www.showdoc.cc/page/102098">https://www.showdoc.cc/page/102098</a></p>
<p>如果你的项目下太多文件，则可能导致脚本扫描很慢。推荐把脚本放到需要生成注释的那个目录里。一般来讲，一个项目不会所有目录都需要生成文档的</p>
</blockquote>]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>ShowDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea插件之Jrebel激活</title>
    <url>/posts/17262.html</url>
    <content><![CDATA[<h1 id="Idea插件之Jrebel激活"><a href="#Idea插件之Jrebel激活" class="headerlink" title="Idea插件之Jrebel激活"></a>Idea插件之Jrebel激活</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Rebel是一款JVM插件，它使得Java代码修改后不用重启系统，立即生效。IDEA上原生是不支持热部署的，一般更新了 Java 文件后要手动重启 Tomcat 服务器，才能生效，浪费时间浪费生命。</p>
<p>目前对于idea热部署最好的解决方案就是安装JRebel插件。</p>
<h2 id="激活步骤"><a href="#激活步骤" class="headerlink" title="激活步骤"></a>激活步骤</h2><ul>
<li><p>步骤1: 生成一个GUID: <a href="https://www.guidgen.com/">在线生成GUID</a></p>
</li>
<li><p>步骤2: 根据反向代理服务器地址拼接激活地址</p>
<p>服务器地址： <a href="https://jrebel.qekang.com/{GUID}">jrebel.qekang.com/{GUID}</a></p>
<p>PS：如果失效刷新GUID替换就可以！</p>
</li>
<li><p>步骤3: 打开JRebel 激活面板，选择Connect to online licensing service .</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210105135219.png" alt=""></p>
</li>
</ul>
<p>激活成功的界面：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20210105135233.png" alt="激活成功"></p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>安装激活完毕后，下面就可以愉快的玩耍了，激活后，你原本启动项目的右边会出现JRebel启动项目的图标，你就可以通过JRebel启动你的项目，这样你修改完Java代码后，而不再需要重启项目这样繁琐浪费时间的操作了。</p>
<h2 id="相关提示"><a href="#相关提示" class="headerlink" title="相关提示"></a>相关提示</h2><p>上面的激活使用了别人的代理地址，如果别人代理地址下线了，你的激活状态会不可用状态， 哈哈，如果靠谱点，有自己的服务器，可以自己搭建一个自己的反向代理服务。</p>]]></content>
      <categories>
        <category>激活教程</category>
      </categories>
      <tags>
        <tag>Idea</tag>
        <tag>JRebel</tag>
        <tag>XRebel</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之代理模式</title>
    <url>/posts/64715.html</url>
    <content><![CDATA[<h1 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h1><p><strong>亦称：</strong> Proxy</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>代理模式</strong>是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191906.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>为什么要控制对于某个对象的访问呢？ 举个例子： 有这样一个消耗大量系统资源的巨型对象， 你只是偶尔需要使用它， 并非总是需要。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191947.png" alt="数据库查询有可能会非常缓慢"></p>
<p>你可以实现延迟初始化： 在实际有需要时再创建该对象。 对象的所有客户端都要执行延迟初始代码。 不幸的是， 这很可能会带来很多重复代码。</p>
<p>在理想情况下， 我们希望将代码直接放入对象的类中， 但这并非总是能实现： 比如类可能是第三方封闭库的一部分。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>代理模式建议新建一个与原服务对象接口相同的代理类， 然后更新应用以将代理对象传递给所有原始对象客户端。 代理类接收到客户端请求后会创建实际的服务对象， 并将所有工作委派给它。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229192016.png" alt="代理将自己伪装成数据库对象， 可在客户端或实际数据库对象不知情的情况下处理延迟初始化和缓存查询结果的工作"></p>
<p>这有什么好处呢？ 如果需要在类的主要业务逻辑前后执行一些工作， 你无需修改类就能完成这项工作。 由于代理实现的接口与原类相同， 因此你可将其传递给任何一个使用实际服务对象的客户端。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229192039.png" alt="信用卡和现金在支付过程中的用处相同"></p>
<p>信用卡是银行账户的代理， 银行账户则是一大捆现金的代理。 它们都实现了同样的接口， 均可用于进行支付。 消费者会非常满意， 因为不必随身携带大量现金； 商店老板同样会十分高兴， 因为交易收入能以电子化的方式进入商店的银行账户中， 无需担心存款时出现现金丢失或被抢劫的情况。</p>
<h1 id="🤔代理模式结构"><a href="#🤔代理模式结构" class="headerlink" title="🤔代理模式结构"></a>🤔代理模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229192118.png" alt="代理模式结构"></p>
<h1 id="💡代理模式适合应用场景"><a href="#💡代理模式适合应用场景" class="headerlink" title="💡代理模式适合应用场景"></a>💡代理模式适合应用场景</h1><p>使用代理模式的方式多种多样， 我们来看看最常见的几种。</p>
<p>🧨<strong>延迟初始化（虚拟代理）。如果你有一个偶尔使用的重量级服务对象，一直保持该对象运行会消耗系统资源时，可使用代理模式。</strong></p>
<p>🏮你无需在程序启动时就创建该对象， 可将对象的初始化延迟到真正有需要的时候。</p>
<p>🧨<strong>访问控制（保护代理）。如果你只希望特定客户端使用服务对象，这里的对象可以是操作系统中非常重要的部分，而客户端则是各种已启动的程序（包括恶意程序），此时可使用代理模式。</strong></p>
<p>🏮代理可仅在客户端凭据满足要求时将请求传递给服务对象。</p>
<p>🧨<strong>本地执行远程服务（远程代理）。适用于服务对象位于远程服务器上的情形。</strong></p>
<p>🏮在这种情形中， 代理通过网络传递客户端请求， 负责处理所有与网络相关的复杂细节。</p>
<p>🧨<strong>记录日志请求（日志记录代理）。适用于当你需要保存对于服务对象的请求历史记录时。代理可以在向服务传递请求前进行记录。</strong></p>
<p>🏮缓存请求结果 （缓存代理）。 适用于需要缓存客户请求结果并对缓存生命周期进行管理时， 特别是当返回结果的体积非常大时。</p>
<ul>
<li>代理可对重复请求所需的相同结果进行缓存， 还可使用请求参数作为索引缓存的键值。</li>
</ul>
<p>🧨<strong>智能引用。可在没有客户端使用某个重量级对象时立即销毁该对象。</strong></p>
<p>🏮代理会将所有获取了指向服务对象或其结果的客户端记录在案。 代理会时不时地遍历各个客户端， 检查它们是否仍在运行。 如果相应的客户端列表为空， 代理就会销毁该服务对象， 释放底层系统资源。</p>
<p>代理还可以记录客户端是否修改了服务对象。 其他客户端还可以复用未修改的对象。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>如果没有现成的服务接口， 你就需要创建一个接口来实现代理和服务对象的可交换性。 从服务类中抽取接口并非总是可行的， 因为你需要对服务的所有客户端进行修改， 让它们使用接口。 备选计划是将代理作为服务类的子类， 这样代理就能继承服务的所有接口了。</li>
<li>创建代理类， 其中必须包含一个存储指向服务的引用的成员变量。 通常情况下， 代理负责创建服务并对其整个生命周期进行管理。 在一些特殊情况下， 客户端会通过构造函数将服务传递给代理。</li>
<li>根据需求实现代理方法。 在大部分情况下， 代理在完成一些任务后应将工作委派给服务对象。</li>
<li>可以考虑新建一个构建方法来判断客户端可获取的是代理还是实际服务。 你可以在代理类中创建一个简单的静态方法， 也可以创建一个完整的工厂方法。</li>
<li>可以考虑为服务对象实现延迟初始化。</li>
</ol>
<h1 id="⚖️代理模式优缺点"><a href="#⚖️代理模式优缺点" class="headerlink" title="⚖️代理模式优缺点"></a>⚖️代理模式优缺点</h1><p>✔️你可以在客户端毫无察觉的情况下控制服务对象。</p>
<p>✔️如果客户端对服务对象的生命周期没有特殊要求， 你可以对生命周期进行管理。</p>
<p>✔️即使服务对象还未准备好或不存在， 代理也可以正常工作。</p>
<p>✔️<strong>开闭原则</strong>。 你可以在不对服务或客户端做出修改的情况下创建新代理。</p>
<p>❌代码可能会变得复杂， 因为需要新建许多类。</p>
<p>❌服务响应可能会延迟。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>适配器模式能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰模式则能为对象提供加强的接口。</li>
<li>外观模式与代理的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 <em>代理</em>与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与<em>外观</em>不同。</li>
<li>装饰和代理有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于<em>代理</em>通常自行管理其服务对象的生命周期， 而<em>装饰</em>的生成则总是由客户端进行控制。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之享元模式</title>
    <url>/posts/47556.html</url>
    <content><![CDATA[<h1 id="设计模式之原型模式"><a href="#设计模式之原型模式" class="headerlink" title="设计模式之原型模式"></a>设计模式之原型模式</h1><p><strong>亦称：</strong>克隆、Clone、Prototype</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>原型模式</strong>是一种创建型设计模式，使你能够复制已有对象，而又无需使代码依赖它们所属的类。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228140759.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>如果你有一个对象，并希望生成与其完全相同的一个复制品，你该如何实现呢？首先，你必须新建一个属于相同类的对象。然后，你必须遍历原始对象的所有成员变量，并将成员变量值复制到新对象中。</p>
<p>不错！但有个小问题。并非所有对象都能通过这种方式进行复制，因为有些对象可能拥有私有成员变量，它们在对象本身以外是不可见的。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228140859.png" alt="“从外部”复制对象并非总是可行"></p>
<p>直接复制还有另外一个问题。因为你必须知道对象所属的类才能创建复制品，所以代码必须依赖该类。即使你可以接受额外的依赖性，那还有另外一个问题：有时你只知道对象所实现的接口，而不知道其所属的具体类，比如可向方法的某个参数传入实现了某个接口的任何对象。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>原型模式将克隆过程委派给被克隆的实际对象。模式为所有支持克隆的对象声明了一个通用接口，该接口让你能够克隆对象，同时又无需将代码和对象所属类耦合。通常情况下，这样的接口中仅包含一个<code>克隆</code>方法。</p>
<p>所有的类对<code>克隆</code>方法的实现都非常相似。该方法会创建一个当前类的对象，然后将原始对象所有的成员变量值复制到新建的类中。你甚至可以复制私有成员变量，因为绝大部分编程语言都允许对象访问其同类对象的私有成员变量。</p>
<p>支持克隆的对象即为<em>原型</em>。当你的对象有几十个成员变量和几百种类型时，对其进行克隆甚至可以代替子类的构造。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228140937.png" alt="预生成原型可以代替子类的构造"></p>
<p>其运作方式如下：创建一系列不同类型的对象并不同的方式对其进行配置。如果所需对象与预先配置的对象相同，那么你只需克隆原型即可，无需新建一个对象。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p>现实生活中，产品在得到大规模生产前会使用原型进行各种测试。但在这种情况下，原型只是一种被动的工具，不参与任何真正的生产活动。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141009.png" alt="一个细胞的分裂"></p>
<p>由于工业原型并不是真正意义上的自我复制，因此细胞有丝分裂（还记得生物学知识吗？）或许是更恰当的类比。有丝分裂会产生一对完全相同的细胞。原始细胞就是一个原型，它在复制体的生成过程中起到了推动作用。</p>
<h1 id="🤔原型模式结构"><a href="#🤔原型模式结构" class="headerlink" title="🤔原型模式结构"></a>🤔原型模式结构</h1><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141125.png" alt=""></p>
<h2 id="原型注册表实现"><a href="#原型注册表实现" class="headerlink" title="原型注册表实现"></a>原型注册表实现</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141221.png" alt=""></p>
<h1 id="💡原型模式适合应用场景"><a href="#💡原型模式适合应用场景" class="headerlink" title="💡原型模式适合应用场景"></a>💡原型模式适合应用场景</h1><p>🧨<strong>如果你需要复制一些对象，同时又希望代码独立于这些对象所属的具体类，可以使用原型模式。</strong></p>
<p>🏮这一点考量通常出现在代码需要处理第三方代码通过接口传递过来的对象时。即使不考虑代码耦合的情况，你的代码也不能依赖这些对象所属的具体类，因为你不知道它们的具体信息。</p>
<p>原型模式为客户端代码提供一个通用接口，客户端代码可通过这一接口与所有实现了克隆的对象进行交互，它也使得客户端代码与其所克隆的对象具体类独立开来。</p>
<p>🧨<strong>如果子类的区别仅在于其对象的初始化方式，那么你可以使用该模式来减少子类的数量。别人创建这些子类的目的可能是为了创建特定类型的对象。</strong></p>
<p>🏮在原型模式中，你可以使用一系列预生成的、各种类型的对象作为原型。</p>
<p>客户端不必根据需求对子类进行实例化，只需找到合适的原型并对其进行克隆即可。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li><p>创建原型接口，并在其中声明<code>克隆</code>方法。如果你已有类层次结构，则只需在其所有类中添加该方法即可。</p>
</li>
<li><p>原型类必须另行定义一个以该类对象为参数的构造函数。构造函数必须复制参数对象中的所有成员变量值到新建实体中。如果你需要修改子类，则必须调用父类构造函数，让父类复制其私有成员变量值。</p>
<p> 如果编程语言不支持方法重载，那么你可能需要定义一个特殊方法来复制对象数据。在构造函数中进行此类处理比较方便，因为它在调用<code>new</code>运算符后会马上返回结果对象。</p>
</li>
<li><p>克隆方法通常只有一行代码：使用<code>new</code>运算符调用原型版本的构造函数。注意，每个类都必须显式重写克隆方法并使用自身类名调用<code>new</code>运算符。否则，克隆方法可能会生成父类的对象。</p>
</li>
<li><p>你还可以创建一个中心化原型注册表，用于存储常用原型。</p>
<p> 你可以新建一个工厂类来实现注册表，或者在原型基类中添加一个获取原型的静态方法。该方法必须能够根据客户端代码设定的条件进行搜索。搜索条件可以是简单的字符串，或者是一组复杂的搜索参数。找到合适的原型后，注册表应对原型进行克隆，并将复制生成的对象返回给客户端。</p>
<p> 最后还要将对子类构造函数的直接调用替换为对原型注册表工厂方法的调用。</p>
</li>
</ol>
<h1 id="⚖️原型模式优缺点"><a href="#⚖️原型模式优缺点" class="headerlink" title="⚖️原型模式优缺点"></a>⚖️原型模式优缺点</h1><p>✔️你可以克隆对象，而无需与它们所属的具体类相耦合。</p>
<p>✔️你可以克隆预生成原型，避免反复运行初始化代码。</p>
<p>✔️你可以更方便地生成复杂对象。</p>
<p>✔️你可以用继承以外的方式来处理复杂对象的不同配置。</p>
<p>❌克隆包含循环引用的复杂对象可能会非常麻烦。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>在许多设计工作的初期都会使用工厂方法模式（较为简单，而且可以更方便地通过子类进行定制），随后演化为使用抽象工厂模式、原型模式或生成器模式（更灵活但更加复杂）。</li>
<li>抽象工厂模式通常基于一组工厂方法，但你也可以使用原型模式来生成这些类的方法。</li>
<li>原型可用于保存命令模式的历史记录。</li>
<li>大量使用组合模式和装饰模式的设计通常可从对于原型的使用中获益。你可以通过该模式来复制复杂结构，而非从零开始重新构造。</li>
<li>原型并不基于继承，因此没有继承的缺点。另一方面，<em>原型</em>需要对被复制对象进行复杂的初始化。工厂方法基于继承，但是它不需要初始化步骤。</li>
<li>有时候原型可以作为备忘录模式的一个简化版本，其条件是你需要在历史记录中存储的对象的状态比较简单，不需要链接其他外部资源，或者链接可以方便地重建。</li>
<li>抽象工厂、生成器和原型都可以用单例模式来实现。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之享元模式</title>
    <url>/posts/47555.html</url>
    <content><![CDATA[<h1 id="设计模式之享元模式"><a href="#设计模式之享元模式" class="headerlink" title="设计模式之享元模式"></a>设计模式之享元模式</h1><p><strong>亦称：</strong> 缓存、Cache、Flyweight</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>享元模式</strong>是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191235.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图上穿行， 为玩家提供紧张刺激的游戏体验。</p>
<p>开发完成后， 你推送提交了最新版本的程序， 并在编译游戏后将其发送给了一个朋友进行测试。 尽管该游戏在你的电脑上完美运行， 但是你的朋友却无法长时间进行游戏： 游戏总是会在他的电脑上运行几分钟后崩溃。 在研究了几个小时的调试消息记录后， 你发现导致游戏崩溃的原因是内存容量不足。 朋友的设备性能远比不上你的电脑， 因此游戏运行在他的电脑上时很快就会出现问题。</p>
<p>真正的问题与粒子系统有关。 每个粒子 （一颗子弹、 一枚导弹或一块弹片） 都由包含完整数据的独立对象来表示。 当玩家在游戏中鏖战进入高潮后的某一时刻， 游戏将无法在剩余内存中载入新建粒子， 于是程序就崩溃了。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191334.png" alt=""></p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>仔细观察 <code>粒子</code>Particle类， 你可能会注意到颜色 （color） 和精灵图 （sprite）这两个成员变量所消耗的内存要比其他变量多得多。 更糟糕的是， 对于所有的粒子来说， 这两个成员变量所存储的数据几乎完全一样 （比如所有子弹的颜色和精灵图都一样）。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191358.png" alt=""></p>
<p>每个粒子的另一些状态 （坐标、 移动矢量和速度） 则是不同的。 因为这些成员变量的数值会不断变化。 这些数据代表粒子在存续期间不断变化的情景， 但每个粒子的颜色和精灵图则会保持不变。</p>
<p>对象的常量数据通常被称为<em>内在状态</em>， 其位于对象中， 其他对象只能读取但不能修改其数值。 而对象的其他状态常常能被其他对象 “从外部” 改变， 因此被称为<em>外在状态</em>。</p>
<p>享元模式建议不在对象中存储外在状态， 而是将其传递给依赖于它的一个特殊方法。 程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态 （与外在状态相比， 内在状态的变体要少很多）， 因此你所需的对象数量会大大削减。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191419.png" alt=""></p>
<p>让我们回到游戏中。 假如能从粒子类中抽出外在状态， 那么我们只需三个不同的对象 （子弹、 导弹和弹片） 就能表示游戏中的所有粒子。 你现在很可能已经猜到了， 我们将这样一个仅存储内在状态的对象称为享元。</p>
<h2 id="外在状态存储"><a href="#外在状态存储" class="headerlink" title="外在状态存储"></a>外在状态存储</h2><p>那么外在状态会被移动到什么地方呢？ 总得有类来存储它们， 对不对？ 在大部分情况中， 它们会被移动到容器对象中， 也就是我们应用享元模式前的聚合对象中。</p>
<p>在我们的例子中， 容器对象就是主要的 <code>游戏</code>Game对象， 其会将所有粒子存储在名为 <code>粒子</code>particles的成员变量中。 为了能将外在状态移动到这个类中， 你需要创建多个数组成员变量来存储每个粒子的坐标、 方向矢量和速度。 除此之外， 你还需要另一个数组来存储指向代表粒子的特定享元的引用。 这些数组必须保持同步， 这样你才能够使用同一索引来获取关于某个粒子的所有数据。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191452.png" alt=""></p>
<p>更优雅的解决方案是创建独立的情景类来存储外在状态和对享元对象的引用。 在该方法中， 容器类只需包含一个数组。</p>
<p>稍等！ 这样的话情景对象数量不是会和不采用该模式时的对象数量一样多吗？ 的确如此， 但这些对象要比之前小很多。 消耗内存最多的成员变量已经被移动到很少的几个享元对象中了。 现在， 一个享元大对象会被上千个情境小对象复用， 因此无需再重复存储数千个大对象的数据。</p>
<h2 id="享元与不可变性"><a href="#享元与不可变性" class="headerlink" title="享元与不可变性"></a>享元与不可变性</h2><p>由于享元对象可在不同的情景中使用， 你必须确保其状态不能被修改。 享元类的状态只能由构造函数的参数进行一次性初始化， 它不能对其他对象公开其设置器或公有成员变量。</p>
<h2 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h2><p>为了能更方便地访问各种享元， 你可以创建一个工厂方法来管理已有享元对象的缓存池。 工厂方法从客户端处接收目标享元对象的内在状态作为参数， 如果它能在缓存池中找到所需享元， 则将其返回给客户端； 如果没有找到， 它就会新建一个享元， 并将其添加到缓存池中。</p>
<p>你可以选择在程序的不同地方放入该函数。 最简单的选择就是将其放置在享元容器中。 除此之外， 你还可以新建一个工厂类， 或者创建一个静态的工厂方法并将其放入实际的享元类中。</p>
<h1 id="🤔享元模式结构"><a href="#🤔享元模式结构" class="headerlink" title="🤔享元模式结构"></a>🤔享元模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229191625.png" alt="享元设计模式"></p>
<h1 id="💡享元模式适合应用场景"><a href="#💡享元模式适合应用场景" class="headerlink" title="💡享元模式适合应用场景"></a>💡享元模式适合应用场景</h1><p>🧨<strong>仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式**</strong>。**</p>
<p>🏮应用该模式所获的收益大小取决于使用它的方式和情景。 它在下列情况中最有效：</p>
<ul>
<li>程序需要生成数量巨大的相似对象</li>
<li>这将耗尽目标设备的所有内存</li>
<li>对象中包含可抽取且能在多个对象间共享的重复状态。</li>
</ul>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>将需要改写为享元的类成员变量拆分为两个部分：<ul>
<li>内在状态： 包含不变的、 可在许多对象中重复使用的数据的成员变量。</li>
<li>外在状态： 包含每个对象各自不同的情景数据的成员变量</li>
</ul>
</li>
<li>保留类中表示内在状态的成员变量， 并将其属性设置为不可修改。 这些变量仅可在构造函数中获得初始数值。</li>
<li>找到所有使用外在状态成员变量的方法， 为在方法中所用的每个成员变量新建一个参数， 并使用该参数代替成员变量。</li>
<li>你可以有选择地创建工厂类来管理享元缓存池， 它负责在新建享元时检查已有的享元。 如果选择使用工厂， 客户端就只能通过工厂来请求享元， 它们需要将享元的内在状态作为参数传递给工厂。</li>
<li>客户端必须存储和计算外在状态 （情景） 的数值， 因为只有这样才能调用享元对象的方法。 为了使用方便， 外在状态和引用享元的成员变量可以移动到单独的情景类中。</li>
</ol>
<h1 id="⚖️享元模式优缺点"><a href="#⚖️享元模式优缺点" class="headerlink" title="⚖️享元模式优缺点"></a>⚖️享元模式优缺点</h1><p>✔️如果程序中有很多相似对象， 那么你将可以节省大量内存。</p>
<p>❌你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据。</p>
<p>❌ 代码会变得更加复杂。 团队中的新成员总是会问：  “为什么要像这样拆分一个实体的状态？”。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>你可以使用享元模式实现组合模式树的共享叶节点以节省内存。</li>
<li>享元展示了如何生成大量的小型对象， 外观模式则展示了如何用一个对象来代表整个子系统。</li>
<li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元就和单例模式类似了。 但这两个模式有两个根本性的不同。<ol>
<li>只会有一个单例实体， 但是<em>享元</em>类可以有多个实体， 各实体的内在状态也可以不同。</li>
<li><em>单例</em>对象可以是可变的。 享元对象是不可变的。</li>
</ol>
</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之外观模式</title>
    <url>/posts/50692.html</url>
    <content><![CDATA[<h1 id="设计模式之外观模式"><a href="#设计模式之外观模式" class="headerlink" title="设计模式之外观模式"></a>设计模式之外观模式</h1><p><strong>亦称：</strong> 门面模式、Facade</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>外观模式</strong>是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190745.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假设你必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下， 你需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。</p>
<p>最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>外观类为包含许多活动部件的复杂子系统提供一个简单的接口。 与直接调用子系统相比， 外观提供的功能可能比较有限， 但它却包含了客户端真正关心的功能。</p>
<p>如果你的程序需要与包含几十种功能的复杂库整合， 但只需使用其中非常少的功能， 那么使用外观模式会非常方便，</p>
<p>例如， 上传猫咪搞笑短视频到社交媒体网站的应用可能会用到专业的视频转换库， 但它只需使用一个包含 <code>encode­(filename, format)</code>方法 （以文件名与文件格式为参数进行编码的方法） 的类即可。 在创建这个类并将其连接到视频转换库后， 你就拥有了自己的第一个外观。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190837.png" alt="电话购物"></p>
<p>当你通过电话给商店下达订单时， 接线员就是该商店的所有服务和部门的外观。 接线员为你提供了一个同购物系统、 支付网关和各种送货服务进行互动的简单语音接口。</p>
<h1 id="🤔外观模式结构"><a href="#🤔外观模式结构" class="headerlink" title="🤔外观模式结构"></a>🤔外观模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190940.png" alt="外观模式结构"></p>
<h1 id="💡外观模式适合应用场景"><a href="#💡外观模式适合应用场景" class="headerlink" title="💡外观模式适合应用场景"></a>💡外观模式适合应用场景</h1><p>🧨<strong>如果你需要一个指向复杂子系统的直接接口，且该接口的功能有限，则可以使用外观模式。</strong></p>
<p>🏮子系统通常会随着时间的推进变得越来越复杂。 即便是应用了设计模式， 通常你也会创建更多的类。 尽管在多种情形中子系统可能是更灵活或易于复用的， 但其所需的配置和样板代码数量将会增长得更快。 为了解决这个问题， 外观将会提供指向子系统中最常用功能的快捷方式， 能够满足客户端的大部分需求。</p>
<p>🧨<strong>如果需要将子系统组织为多层结构，可以使用外观。</strong></p>
<p>🏮创建外观来定义子系统中各层次的入口。 你可以要求子系统仅使用外观来进行交互， 以减少子系统之间的耦合。</p>
<p>让我们回到视频转换框架的例子。 该框架可以拆分为两个层次： 音频相关和视频相关。 你可以为每个层次创建一个外观， 然后要求各层的类必须通过这些外观进行交互。 这种方式看上去与<a href="https://refactoringguru.cn/design-patterns/mediator">中介者</a>模式非常相似。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>考虑能否在现有子系统的基础上提供一个更简单的接口。 如果该接口能让客户端代码独立于众多子系统类， 那么你的方向就是正确的。</li>
<li>在一个新的外观类中声明并实现该接口。 外观应将客户端代码的调用重定向到子系统中的相应对象处。 如果客户端代码没有对子系统进行初始化， 也没有对其后续生命周期进行管理， 那么外观必须完成此类工作。</li>
<li>如果要充分发挥这一模式的优势， 你必须确保所有客户端代码仅通过外观来与子系统进行交互。 此后客户端代码将不会受到任何由子系统代码修改而造成的影响， 比如子系统升级后， 你只需修改外观中的代码即可。</li>
<li>如果外观变得<a href="https://refactoringguru.cn/smells/large-class">过于臃肿</a>， 你可以考虑将其部分行为抽取为一个新的专用外观类。</li>
</ol>
<h1 id="⚖️外观模式优缺点"><a href="#⚖️外观模式优缺点" class="headerlink" title="⚖️外观模式优缺点"></a>⚖️外观模式优缺点</h1><p>✔️你可以让自己的代码独立于复杂子系统。</p>
<p>❌外观可能成为与程序中所有类都耦合的上帝对象。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>外观模式为现有对象定义了一个新接口， 适配器模式则会试图运用已有的接口。 <em>适配器</em>通常只封装一个对象， <em>外观</em>通常会作用于整个对象子系统上。</li>
<li>当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用抽象工厂模式来代替外观。</li>
<li>享元模式展示了如何生成大量的小型对象， 外观则展示了如何用一个对象来代表整个子系统。</li>
<li>外观和中介者模式的职责类似： 它们都尝试在大量紧密耦合的类中组织起合作。<ul>
<li><strong>外观</strong>为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。</li>
<li><strong>中介者</strong>将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。</li>
</ul>
</li>
<li>外观类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li>
<li>外观与代理模式的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 <em>代理</em>与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与<em>外观</em>不同。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之装饰模式</title>
    <url>/posts/29085.html</url>
    <content><![CDATA[<h1 id="设计模式之装饰模式"><a href="#设计模式之装饰模式" class="headerlink" title="设计模式之装饰模式"></a>设计模式之装饰模式</h1><p><strong>亦称：</strong> 装饰者模式、装饰器模式、Wrapper、Decorator</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>装饰模式</strong>是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185815.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假设你正在开发一个提供通知功能的库， 其他程序可使用它向用户发送关于重要事件的通知。</p>
<p>库的最初版本基于 <code>通知器</code>Notifier类， 其中只有很少的几个成员变量， 一个构造函数和一个 <code>send</code>发送方法。 该方法可以接收来自客户端的消息参数， 并将该消息发送给一系列的邮箱， 邮箱列表则是通过构造函数传递给通知器的。 作为客户端的第三方程序仅会创建和配置通知器对象一次， 然后在有重要事件发生时对其进行调用。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185910.png" alt="程序可以使用通知器类向预定义的邮箱发送重要事件通知"></p>
<p>此后某个时刻， 你会发现库的用户希望使用除邮件通知之外的功能。 许多用户会希望接收关于紧急事件的手机短信， 还有些用户希望在微信上接收消息， 而公司用户则希望在 QQ 上接收消息。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185944.png" alt="每种通知类型都将作为通知器的一个子类得以实现"></p>
<p>这有什么难的呢？ 首先扩展 <code>通知器</code>类， 然后在新的子类中加入额外的通知方法。 现在客户端要对所需通知形式的对应类进行初始化， 然后使用该类发送后续所有的通知消息。</p>
<p>但是很快有人会问：  “为什么不同时使用多种通知形式呢？ 如果房子着火了， 你大概会想在所有渠道中都收到相同的消息吧。”</p>
<p>你可以尝试创建一个特殊子类来将多种通知方法组合在一起以解决该问题。 但这种方式会使得代码量迅速膨胀， 不仅仅是程序库代码， 客户端代码也会如此。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190004.png" alt="子类组合数量爆炸"></p>
<p>你必须找到其他方法来规划通知类的结构， 否则它们的数量会在不经意之间打破吉尼斯纪录。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>当你需要更改一个对象的行为时， 第一个跳入脑海的想法就是扩展它所属的类。 但是， 你不能忽视继承可能引发的几个严重问题。</p>
<ul>
<li>继承是静态的。 你无法在运行时更改已有对象的行为， 只能使用由不同子类创建的对象来替代当前的整个对象。</li>
<li>子类只能有一个父类。 大部分编程语言不允许一个类同时继承多个类的行为。</li>
</ul>
<p>其中一种方法是用<em>聚合</em>或<em>组合</em> ， 而不是<em>继承</em>。 两者的工作方式几乎一模一样： 一个对象<em>包含</em>指向另一个对象的引用， 并将部分工作委派给引用对象； 继承中的对象则继承了父类的行为， 它们自己<em>能够</em>完成这些工作。</p>
<p>你可以使用这个新方法来轻松替换各种连接的 “小帮手” 对象， 从而能在运行时改变容器的行为。 一个对象可以使用多个类的行为， 包含多个指向其他对象的引用， 并将各种工作委派给引用对象。</p>
<p>聚合 （或组合） 组合是许多设计模式背后的关键原则 （包括装饰在内）。 记住这一点后， 让我们继续关于模式的讨论。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190040.png" alt="继承与聚合的对比"></p>
<p><em>封装器</em>是装饰模式的别称， 这个称谓明确地表达了该模式的主要思想。  “封装器” 是一个能与其他 “目标” 对象连接的对象。 封装器包含与目标对象相同的一系列方法， 它会将所有接收到的请求委派给目标对象。 但是， 封装器可以在将请求委派给目标前后对其进行处理， 所以可能会改变最终结果。</p>
<p>那么什么时候一个简单的封装器可以被称为是真正的装饰呢？ 正如之前提到的， 封装器实现了与其封装对象相同的接口。 因此从客户端的角度来看， 这些对象是完全一样的。 封装器中的引用成员变量可以是遵循相同接口的任意对象。 这使得你可以将一个对象放入多个封装器中， 并在对象中添加所有这些封装器的组合行为。</p>
<p>比如在消息通知示例中， 我们可以将简单邮件通知行为放在基类 <code>通知器</code>中， 但将所有其他通知方法放入装饰中。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190104.png" alt="将各种通知方法放入装饰"></p>
<p>客户端代码必须将基础通知器放入一系列自己所需的装饰中。 因此最后的对象将形成一个栈结构。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190224.png" alt="程序可以配置由通知装饰构成的复杂栈"></p>
<p>实际与客户端进行交互的对象将是最后一个进入栈中的装饰对象。 由于所有的装饰都实现了与通知基类相同的接口， 客户端的其他代码并不在意自己到底是与 “纯粹” 的通知器对象， 还是与装饰后的通知器对象进行交互。</p>
<p>我们可以使用相同方法来完成其他行为 （例如设置消息格式或者创建接收人列表）。 只要所有装饰都遵循相同的接口， 客户端就可以使用任意自定义的装饰来装饰对象。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190302.png" alt="穿上多件衣服将获得组合性的效果"></p>
<p>穿衣服是使用装饰的一个例子。 觉得冷时， 你可以穿一件毛衣。 如果穿毛衣还觉得冷， 你可以再套上一件夹克。 如果遇到下雨， 你还可以再穿一件雨衣。 所有这些衣物都 “扩展” 了你的基本行为， 但它们并不是你的一部分， 如果你不再需要某件衣物， 可以方便地随时脱掉。</p>
<h1 id="🤔装饰模式结构"><a href="#🤔装饰模式结构" class="headerlink" title="🤔装饰模式结构"></a>🤔装饰模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229190401.png" alt="装饰模式结构"></p>
<h1 id="💡装饰模式适合应用场景"><a href="#💡装饰模式适合应用场景" class="headerlink" title="💡装饰模式适合应用场景"></a>💡装饰模式适合应用场景</h1><p>🧨<strong>如果你希望在无需修改代码的情况下即可使用对象，且希望在运行时为对象新增额外的行为，可以使用装饰模式。</strong></p>
<p>🏮装饰能将业务逻辑组织为层次结构， 你可为各层创建一个装饰， 在运行时将各种不同逻辑组合成对象。 由于这些对象都遵循通用接口， 客户端代码能以相同的方式使用这些对象。</p>
<p>🧨<strong>如果用继承来扩展对象行为的方案难以实现或者根本不可行，你可以使用该模式。</strong></p>
<p>🏮许多编程语言使用 <code>final</code>最终关键字来限制对某个类的进一步扩展。 复用最终类已有行为的唯一方法是使用装饰模式： 用封装器对其进行封装。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>确保业务逻辑可用一个基本组件及多个额外可选层次表示。</li>
<li>找出基本组件和可选层次的通用方法。 创建一个组件接口并在其中声明这些方法。</li>
<li>创建一个具体组件类， 并定义其基础行为。</li>
<li>创建装饰基类， 使用一个成员变量存储指向被封装对象的引用。 该成员变量必须被声明为组件接口类型， 从而能在运行时连接具体组件和装饰。 装饰基类必须将所有工作委派给被封装的对象。</li>
<li>确保所有类实现组件接口。</li>
<li>将装饰基类扩展为具体装饰。 具体装饰必须在调用父类方法 （总是委派给被封装对象） 之前或之后执行自身的行为。</li>
<li>客户端代码负责创建装饰并将其组合成客户端所需的形式。</li>
</ol>
<h1 id="⚖️装饰模式优缺点"><a href="#⚖️装饰模式优缺点" class="headerlink" title="⚖️装饰模式优缺点"></a>⚖️装饰模式优缺点</h1><p>✔️你无需创建新子类即可扩展对象的行为。</p>
<p>✔️你可以在运行时添加或删除对象的功能。</p>
<p>✔️你可以用多个装饰封装对象来组合几种行为。</p>
<p>✔️<strong>单一职责原则</strong>。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</p>
<p>❌在封装器栈中删除特定封装器比较困难。</p>
<p>❌实现行为不受装饰栈顺序影响的装饰比较困难。</p>
<p>❌各层的初始化配置代码看上去可能会很糟糕。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li><p>适配器模式可以对已有对象的接口进行修改， 装饰模式则能在不改变对象接口的前提下强化对象功能。 此外， <strong>装饰</strong>还支持递归组合， <strong>适配器</strong>则无法实现。</p>
</li>
<li><p>适配器能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰则能为对象提供加强的接口。</p>
</li>
<li><p>责任链模式和装饰模式的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。</p>
<p>  责任链的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种<em>装饰</em>可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。</p>
</li>
<li><p>组合模式和装饰的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。</p>
<p>  <em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。</p>
<p>  但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</p>
</li>
<li><p>大量使用组合和装饰的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</p>
</li>
<li><p>装饰可让你更改对象的外表， 策略模式则让你能够改变其本质。</p>
</li>
<li><p>装饰和代理有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于<em>代理</em>通常自行管理其服务对象的生命周期， 而<em>装饰</em>的生成则总是由客户端进行控制。</p>
</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之组合模式</title>
    <url>/posts/59529.html</url>
    <content><![CDATA[<h1 id="设计模式之组合模式"><a href="#设计模式之组合模式" class="headerlink" title="设计模式之组合模式"></a>设计模式之组合模式</h1><p><strong>亦称：</strong> 对象树、Object Tree、Composite</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>组合模式</strong>是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185034.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>如果应用的核心模型能用树状结构表示， 在应用中使用组合模式才有价值。</p>
<p>例如， 你有两类对象：  <code>产品</code>和 <code>盒子</code> 。 一个盒子中可以包含多个 <code>产品</code>或者几个较小的 <code>盒子</code> 。 这些小 <code>盒子</code>中同样可以包含一些 <code>产品</code>或更小的 <code>盒子</code> ， 以此类推。</p>
<p>假设你希望在这些类的基础上开发一个定购系统。 订单中可以包含无包装的简单产品， 也可以包含装满产品的盒子……以及其他盒子。 此时你会如何计算每张订单的总价格呢？</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185157.png" alt="订单中可能包括各种产品， 这些产品放置在盒子中， 然后又被放入一层又一层更大的盒子中。 整个结构看上去像是一棵倒过来的树"></p>
<p>你可以尝试直接计算： 打开所有盒子， 找到每件产品， 然后计算总价。 这在真实世界中或许可行， 但在程序中， 你并不能简单地使用循环语句来完成该工作。 你必须事先知道所有 <code>产品</code>和 <code>盒子</code>的类别， 所有盒子的嵌套层数以及其他繁杂的细节信息。 因此， 直接计算极不方便， 甚至完全不可行。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>组合模式建议使用一个通用接口来与 <code>产品</code>和 <code>盒子</code>进行交互， 并且在该接口中声明一个计算总价的方法。</p>
<p>那么方法该如何设计呢？ 对于一个产品， 该方法直接返回其价格； 对于一个盒子， 该方法遍历盒子中的所有项目， 询问每个项目的价格， 然后返回该盒子的总价格。 如果其中某个项目是小一号的盒子， 那么当前盒子也会遍历其中的所有项目， 以此类推， 直到计算出所有内部组成部分的价格。 你甚至可以在盒子的最终价格中增加额外费用， 作为该盒子的包装费用。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185236.png" alt="组合模式以递归方式处理对象树中的所有项目"></p>
<p>该方式的最大优点在于你无需了解构成树状结构的对象的具体类。 你也无需了解对象是简单的产品还是复杂的盒子。 你只需调用通用接口以相同的方式对其进行处理即可。 当你调用该方法后， 对象会将请求沿着树结构传递下去。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185351.png" alt="部队结构的例子"></p>
<p>大部分国家的军队都采用层次结构管理。 每支部队包括几个师， 师由旅构成， 旅由团构成， 团可以继续划分为排。 最后， 每个排由一小队实实在在的士兵组成。 军事命令由最高层下达， 通过每个层级传递， 直到每位士兵都知道自己应该服从的命令。</p>
<h1 id="🤔组合模式结构"><a href="#🤔组合模式结构" class="headerlink" title="🤔组合模式结构"></a>🤔组合模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201229185447.png" alt="组合模式结构"></p>
<h1 id="💡组合模式适合应用场景"><a href="#💡组合模式适合应用场景" class="headerlink" title="💡组合模式适合应用场景"></a>💡组合模式适合应用场景</h1><p>🧨<strong>如果你需要实现树状对象结构，可以使用组合模式。</strong></p>
<p>🏮组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。</p>
<p>🧨<strong>如果你希望客户端代码以相同方式处理简单和复杂元素，可以使用该模式。</strong></p>
<p>🏮组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li><p>确保应用的核心模型能够以树状结构表示。 尝试将其分解为简单元素和容器。 记住， 容器必须能够同时包含简单元素和其他容器。</p>
</li>
<li><p>声明组件接口及其一系列方法， 这些方法对简单和复杂元素都有意义。</p>
</li>
<li><p>创建一个叶节点类表示简单元素。 程序中可以有多个不同的叶节点类。</p>
</li>
<li><p>创建一个容器类表示复杂元素。 在该类中， 创建一个数组成员变量来存储对于其子元素的引用。 该数组必须能够同时保存叶节点和容器， 因此请确保将其声明为组合接口类型。</p>
<p> 实现组件接口方法时， 记住容器应该将大部分工作交给其子元素来完成。</p>
</li>
<li><p>最后， 在容器中定义添加和删除子元素的方法。</p>
<p> 记住， 这些操作可在组件接口中声明。 这将会违反<em>接口隔离原则</em>， 因为叶节点类中的这些方法为空。 但是， 这可以让客户端无差别地访问所有元素， 即使是组成树状结构的元素。</p>
</li>
</ol>
<h1 id="⚖️组合模式优缺点"><a href="#⚖️组合模式优缺点" class="headerlink" title="⚖️组合模式优缺点"></a>⚖️组合模式优缺点</h1><p>✔️你可以利用多态和递归机制更方便地使用复杂树结构。</p>
<p>✔️<strong>开闭原则</strong>。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分。</p>
<p>❌对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li><p>桥接模式、 状态模式和策略模式 （在某种程度上包括适配器模式） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</p>
</li>
<li><p>你可以在创建复杂组合树时使用生成器模式， 因为这可使其构造步骤以递归的方式运行。</p>
</li>
<li><p>责任链模式通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。</p>
</li>
<li><p>你可以使用迭代器模式来遍历组合树。</p>
</li>
<li><p>你可以使用访问者模式对整个组合树执行操作。</p>
</li>
<li><p>你可以使用享元模式实现组合树的共享叶节点以节省内存。</p>
</li>
<li><p>组合和装饰模式的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。</p>
<p>  <em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。</p>
<p>  但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</p>
</li>
<li><p>大量使用组合和装饰的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</p>
</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之桥接模式</title>
    <url>/posts/60984.html</url>
    <content><![CDATA[<h1 id="设计模式之桥接模式"><a href="#设计模式之桥接模式" class="headerlink" title="设计模式之桥接模式"></a>设计模式之桥接模式</h1><h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>桥接模式</strong>是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228191816.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>抽象？ 实现？ 听上去挺吓人？ 让我们慢慢来， 先考虑一个简单的例子。</p>
<p>假如你有一个几何 <code>形状</code>Shape类， 从它能扩展出两个子类：  <code>圆形</code>Circle和 <code>方形</code>Square 。 你希望对这样的类层次结构进行扩展以使其包含颜色， 所以你打算创建名为 <code>红色</code>Red和 <code>蓝色</code>Blue的形状子类。 但是， 由于你已有两个子类， 所以总共需要创建四个类才能覆盖所有组合， 例如 <code>蓝色圆形</code>Blue­Circle和 <code>红色方形</code>Red­Square 。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228192451.png" alt="所有组合类的数量将以几何级数增长"></p>
<p>在层次结构中新增形状和颜色将导致代码复杂程度指数增长。 例如添加三角形状， 你需要新增两个子类， 也就是每种颜色一个； 此后新增一种新颜色需要新增三个子类， 即每种形状一个。 如此以往， 情况会越来越糟糕。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>问题的根本原因是我们试图在两个独立的维度——形状与颜色——上扩展形状类。 这在处理类继承时是很常见的问题。</p>
<p>桥接模式通过将继承改为组合的方式来解决这个问题。 具体来说， 就是抽取其中一个维度并使之成为独立的类层次， 这样就可以在初始类中引用这个新层次的对象， 从而使得一个类不必拥有所有的状态和行为。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228192521.png" alt="将一个类层次转化为多个相关的类层次， 避免单个类层次的失控"></p>
<p>根据该方法， 我们可以将颜色相关的代码抽取到拥有 <code>红色</code>和 <code>蓝色</code>两个子类的颜色类中， 然后在 <code>形状</code>类中添加一个指向某一颜色对象的引用成员变量。 现在， 形状类可以将所有与颜色相关的工作委派给连入的颜色对象。 这样的引用就成为了 <code>形状</code>和 <code>颜色</code>之间的桥梁。 此后， 新增颜色将不再需要修改形状的类层次， 反之亦然。</p>
<h2 id="抽象部分和实现部分"><a href="#抽象部分和实现部分" class="headerlink" title="抽象部分和实现部分"></a>抽象部分和实现部分</h2><p>设计模式四人组的著作 在桥接定义中提出了<em>抽象部分</em>和<em>实现部分</em>两个术语。 我觉得这些术语过于学术了， 反而让模式看上去比实际情况更加复杂。 在介绍过形状和颜色的简单例子后， 我们来看看四人组著作中让人望而生畏的词语的含义。</p>
<p><em>抽象部分</em> （也被称为<em>接口</em>） 是一些实体的高阶控制层。 该层自身不完成任何具体的工作， 它需要将工作委派给<em>实现部分</em>层 （也被称为<em>平台</em>）。</p>
<p>注意， 这里提到的内容与编程语言中的<em>接口</em>或<em>抽象类</em>无关。 它们并不是一回事。</p>
<p>在实际的程序中， 抽象部分是图形用户界面 （GUI）， 而实现部分则是底层操作系统代码 （API）， GUI 层调用 API 层来对用户的各种操作做出响应。</p>
<p>一般来说， 你可以在两个独立方向上扩展这种应用：</p>
<ul>
<li>开发多个不同的 GUI （例如面向普通用户和管理员进行分别配置）</li>
<li>支持多个不同的 API （例如， 能够在 Windows、 Linux 和 macOS 上运行该程序）。</li>
</ul>
<p>在最糟糕的情况下， 程序可能会是一团乱麻， 其中包含数百种条件语句， 连接着代码各处不同种类的 GUI 和各种 API。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228192638.png" alt="在庞杂的代码中， 即使是很小的改动都非常难以完成， 因为你必须要在整体上对代码有充分的理解。 而在较小且定义明确的模块中， 进行修改则要容易得多"></p>
<p>你可以将特定接口-平台的组合代码抽取到独立的类中， 以在混乱中建立一些秩序。 但是， 你很快会发现这种类的数量<em>很多</em>。 类层次将以指数形式增长， 因为每次添加一个新的 GUI 或支持一种新的 API 都需要创建更多的类。</p>
<p>让我们试着用桥接模式来解决这个问题。 该模式建议将类拆分为两个类层次结构：</p>
<ul>
<li>抽象部分： 程序的 GUI 层。</li>
<li>实现部分： 操作系统的 API。</li>
</ul>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228192654.png" alt="创建跨平台应用程序的一种方法"></p>
<p>抽象对象控制程序的外观， 并将真实工作委派给连入的实现对象。 不同的实现只要遵循相同的接口就可以互换， 使同一 GUI 可在 Windows 和 Linux 下运行。</p>
<p>最后的结果是： 你无需改动与 API 相关的类就可以修改 GUI 类。 此外如果想支持一个新的操作系统， 只需在实现部分层次中创建一个子类即可。</p>
<h1 id="🤔桥接模式结构"><a href="#🤔桥接模式结构" class="headerlink" title="🤔桥接模式结构"></a>🤔桥接模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228192739.png" alt=""></p>
<h1 id="💡桥接模式适合应用场景"><a href="#💡桥接模式适合应用场景" class="headerlink" title="💡桥接模式适合应用场景"></a>💡桥接模式适合应用场景</h1><p>🧨<strong>如果你想要拆分或重组一个具有多重功能的庞杂类（例如能与多个数据库服务器进行交互的类），可以使用桥接模式。</strong></p>
<p>🏮类的代码行数越多， 弄清其运作方式就越困难， 对其进行修改所花费的时间就越长。 一个功能上的变化可能需要在整个类范围内进行修改， 而且常常会产生错误， 甚至还会有一些严重的副作用。</p>
<p>桥接模式可以将庞杂类拆分为几个类层次结构。 此后， 你可以修改任意一个类层次结构而不会影响到其他类层次结构。 这种方法可以简化代码的维护工作， 并将修改已有代码的风险降到最低。</p>
<p>🧨<strong>如果你希望在几个独立维度上扩展一个类，可使用该模式。</strong></p>
<p>🏮桥接建议将每个维度抽取为独立的类层次。 初始类将相关工作委派给属于对应类层次的对象， 无需自己完成所有工作。</p>
<p>🧨<strong>如果你需要在运行时切换不同实现方法，可使用桥接模式。</strong></p>
<p>🏮当然并不是说一定要实现这一点， 桥接模式可替换抽象部分中的实现对象， 具体操作就和给成员变量赋新值一样简单。</p>
<p>顺便提一句， 最后一点是很多人混淆桥接模式和策略模式的主要原因。 记住， 设计模式并不仅是一种对类进行组织的方式， 它还能用于沟通意图和解决问题。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>明确类中独立的维度。 独立的概念可能是： 抽象/平台， 域/基础设施， 前端/后端或接口/实现。</li>
<li>了解客户端的业务需求， 并在抽象基类中定义它们。</li>
<li>确定在所有平台上都可执行的业务。 并在通用实现接口中声明抽象部分所需的业务。</li>
<li>为你域内的所有平台创建实现类， 但需确保它们遵循实现部分的接口。</li>
<li>在抽象类中添加指向实现类型的引用成员变量。 抽象部分会将大部分工作委派给该成员变量所指向的实现对象。</li>
<li>如果你的高层逻辑有多个变体， 则可通过扩展抽象基类为每个变体创建一个精确抽象。</li>
<li>客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。 此后， 客户端只需与抽象对象进行交互， 无需和实现对象打交道。</li>
</ol>
<h1 id="⚖️桥接模式优缺点"><a href="#⚖️桥接模式优缺点" class="headerlink" title="⚖️桥接模式优缺点"></a>⚖️桥接模式优缺点</h1><p>✔️ 你可以创建与平台无关的类和程序。</p>
<p>✔️客户端代码仅与高层抽象部分进行互动， 不会接触到平台的详细信息。</p>
<p>✔️<strong>开闭原则</strong>。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。</p>
<p>✔️<strong>单一职责原则</strong>。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节。</p>
<p>❌对高内聚的类使用该模式可能会让代码更加复杂。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>桥接模式通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， 适配器模式通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li>
<li>桥接、 状态模式和策略模式 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
<li>你可以将抽象工厂模式和桥接搭配使用。 如果由<em>桥接</em>定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， <em>抽象工厂</em>可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</li>
<li>你可以结合使用生成器模式和桥接模式： <em>主管</em>类负责抽象工作， 各种不同的<em>生成器</em>负责<em>实现</em>工作。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之适配器模式</title>
    <url>/posts/31793.html</url>
    <content><![CDATA[<h1 id="设计模式之适配器模式"><a href="#设计模式之适配器模式" class="headerlink" title="设计模式之适配器模式"></a>设计模式之适配器模式</h1><p><strong>亦称：</strong>封装器模式、Wrapper、Adapter</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>适配器模式</strong>是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228185931.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假如你正在开发一款股票市场监测程序，它会从不同来源下载XML格式的股票数据，然后向用户呈现出美观的图表。</p>
<p>在开发过程中，你决定在程序中整合一个第三方智能分析函数库。但是遇到了一个问题，那就是分析函数库只兼容JSON格式的数据。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228190101.png" alt="你无法“直接”使用分析函数库，因为它所需的输入数据格式与你的程序不兼容"></p>
<p>你可以修改程序库来支持XML。但是，这可能需要修改部分依赖该程序库的现有代码。甚至还有更糟糕的情况，你可能根本没有程序库的源代码，从而无法对其进行修改。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>你可以创建一个<em>适配器</em>。这是一个特殊的对象，能够转换对象接口，使其能与其他对象进行交互。</p>
<p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。被封装的对象甚至察觉不到适配器的存在。例如，你可以使用一个将所有数据转换为英制单位（如英尺和英里）的适配器封装运行于米和千米单位制中的对象。</p>
<p>适配器不仅可以转换不同格式的数据，其还有助于采用不同接口的对象之间的合作。它的运作方式如下：</p>
<ol>
<li>适配器实现与其中一个现有对象兼容的接口。</li>
<li>现有对象可以使用该接口安全地调用适配器方法。</li>
<li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li>
</ol>
<p>有时你甚至可以创建一个双向适配器来实现双向转换调用。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228190140.png" alt=""></p>
<p>让我们回到股票市场程序。为了解决数据格式不兼容的问题，你可以为分析函数库中的每个类创建将XML转换为JSON格式的适配器，然后让客户端仅通过这些适配器来与函数库进行交流。当某个适配器被调用时，它会将传入的XML数据转换为JSON结构，并将其传递给被封装分析对象的相应方法。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228190222.png" alt="出国旅行前后的旅行箱"></p>
<p>如果你是第一次从美国到欧洲旅行，那么在给笔记本充电时可能会大吃一惊。不同国家的电源插头和插座标准不同。美国插头和德国插座不匹配。同时提供美国标准插座和欧洲标准插头的电源适配器可以解决你的难题。</p>
<h1 id="🤔适配器模式结构"><a href="#🤔适配器模式结构" class="headerlink" title="🤔适配器模式结构"></a>🤔适配器模式结构</h1><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><p>实现时使用了构成原则：适配器实现了其中一个对象的接口，并对另一个对象进行封装。所有流行的编程语言都可以实现适配器。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228190330.png" alt=""></p>
<hr>
<h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><p>这一实现使用了继承机制：适配器同时继承两个对象的接口。请注意，这种方式仅能在支持多重继承的编程语言中实现，例如C++。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228190501.png" alt=""></p>
<h1 id="💡适配器模式适合应用场景"><a href="#💡适配器模式适合应用场景" class="headerlink" title="💡适配器模式适合应用场景"></a>💡适配器模式适合应用场景</h1><p>🧨<strong>当你希望使用某个类，但是其接口与其他代码不兼容时，可以使用适配器类。</strong></p>
<p>🏮适配器模式允许你创建一个中间层类，其可作为代码与遗留类、第三方类或提供怪异接口的类之间的转换器。</p>
<p>🧨<strong>如果您需要复用这样一些类，他们处于同一个继承体系，并且他们又有了额外的一些共同的方法，但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。</strong></p>
<p>🏮你可以扩展每个子类，将缺少的功能添加到新的子类中。但是，你必须在所有新子类中重复添加这些代码，这样会使得代码有坏味道。</p>
<p>将缺失功能添加到一个适配器类中是一种优雅得多的解决方案。然后你可以将缺少功能的对象封装在适配器中，从而动态地获取所需功能。如要这一点正常运作，目标类必须要有通用接口，适配器的成员变量应当遵循该通用接口。这种方式同装饰模式非常相似。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>确保至少有两个类的接口不兼容：<ul>
<li>一个无法修改（通常是第三方、遗留系统或者存在众多已有依赖的类）的功能性<em>服务</em>类。</li>
<li>一个或多个将受益于使用服务类的<em>客户端</em>类。</li>
</ul>
</li>
<li>声明客户端接口，描述客户端如何与服务交互。</li>
<li>创建遵循客户端接口的适配器类。所有方法暂时都为空。</li>
<li>在适配器类中添加一个成员变量用于保存对于服务对象的引用。通常情况下会通过构造函数对该成员变量进行初始化，但有时在调用其方法时将该变量传递给适配器会更方便。</li>
<li>依次实现适配器类客户端接口的所有方法。适配器会将实际工作委派给服务对象，自身只负责接口或数据格式的转换。</li>
<li>客户端必须通过客户端接口使用适配器。这样一来，你就可以在不影响客户端代码的情况下修改或扩展适配器。</li>
</ol>
<h1 id="⚖️适配器模式优缺点"><a href="#⚖️适配器模式优缺点" class="headerlink" title="⚖️适配器模式优缺点"></a>⚖️适配器模式优缺点</h1><p>✔️<strong>单一职责原则</strong>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</p>
<p>✔️<strong>开闭原则</strong>。只要客户端代码通过客户端接口与适配器进行交互，你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</p>
<p>❌代码整体复杂度增加，因为你需要新增一系列接口和类。有时直接更改服务类使其与其他代码兼容会更简单。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>桥接模式通常会于开发前期进行设计，使你能够将程序的各个部分独立开来以便开发。另一方面，适配器模式通常在已有程序中使用，让相互不兼容的类能很好地合作。</li>
<li>适配器可以对已有对象的接口进行修改，装饰模式则能在不改变对象接口的前提下强化对象功能。此外，<em>装饰</em>还支持递归组合，<em>适配器</em>则无法实现。</li>
<li>适配器能为被封装对象提供不同的接口，代理模式能为对象提供相同的接口，装饰则能为对象提供加强的接口。</li>
<li>外观模式为现有对象定义了一个新接口，适配器则会试图运用已有的接口。<em>适配器</em>通常只封装一个对象，<em>外观</em>通常会作用于整个对象子系统上。</li>
<li>桥接、状态模式和策略模式（在某种程度上包括适配器）模式的接口非常相似。实际上，它们都基于组合模式——即将工作委派给其他对象，不过也各自解决了不同的问题。模式并不只是以特定方式组织代码的配方，你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>结构型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/posts/62332.html</url>
    <content><![CDATA[<h1 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h1><p><strong>亦称：</strong> 单件模式、Singleton</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141618.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>单例模式同时解决了两个问题， 所以违反了<strong>单一职责原则</strong>：</p>
<ol>
<li><p><strong>保证一个类只有一个实例</strong>。 为什么会有人想要控制一个类所拥有的实例数量？ 最常见的原因是控制某些共享资源 （例如数据库或文件） 的访问权限。</p>
<p> 它的运作方式是这样的： 如果你创建了一个对象， 同时过一会儿后你决定再创建一个新对象， 此时你会获得之前已创建的对象， 而不是一个新对象。</p>
<p> 注意， 普通构造函数无法实现上述行为， 因为构造函数的设计决定了它<strong>必须</strong>总是返回一个新对象。</p>
<p> <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141735.png" alt="客户端甚至可能没有意识到它们一直都在使用同一个对象"></p>
</li>
<li><p><strong>为该实例提供一个全局访问节点</strong>。 还记得你 （好吧， 其实是我自己） 用过的那些存储重要对象的全局变量吗？ 它们在使用上十分方便， 但同时也非常不安全， 因为任何代码都有可能覆盖掉那些变量的内容， 从而引发程序崩溃。</p>
<p> 和全局变量一样， 单例模式也允许在程序的任何地方访问特定对象。 但是它可以保护该实例不被其他代码覆盖。</p>
<p> 还有一点： 你不会希望解决同一个问题的代码分散在程序各处的。 因此更好的方式是将其放在同一个类中， 特别是当其他代码已经依赖这个类时更应该如此。</p>
</li>
</ol>
<p>如今， 单例模式已经变得非常流行， 以至于人们会将只解决上文描述中任意一个问题的东西称为<em>单例</em>。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>所有单例的实现都包含以下两个相同的步骤：</p>
<ul>
<li>将默认构造函数设为私有， 防止其他对象使用单例类的 <code>new</code>运算符。</li>
<li>新建一个静态构建方法作为构造函数。 该函数会 “偷偷” 调用私有构造函数来创建对象， 并将其保存在一个静态成员变量中。 此后所有对于该函数的调用都将返回这一缓存对象。</li>
</ul>
<p>如果你的代码能够访问单例类， 那它就能调用单例类的静态方法。 无论何时调用该方法， 它总是会返回相同的对象。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p>政府是单例模式的一个很好的示例。 一个国家只有一个官方政府。 不管组成政府的每个人的身份是什么，  “某政府” 这一称谓总是鉴别那些掌权者的全局访问节点。</p>
<h1 id="🤔单例模式结构"><a href="#🤔单例模式结构" class="headerlink" title="🤔单例模式结构"></a>🤔单例模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228141859.png" alt=""></p>
<h1 id="💡单例模式适合应用场景"><a href="#💡单例模式适合应用场景" class="headerlink" title="💡单例模式适合应用场景"></a>💡单例模式适合应用场景</h1><p>🧨<strong>如果程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式。</strong></p>
<p>🏮单例模式禁止通过除特殊构建方法以外的任何方式来创建自身类的对象。 该方法可以创建一个新对象， 但如果该对象已经被创建， 则返回已有的对象。</p>
<p>🧨<strong>如果你需要更加严格地控制全局变量，可以使用单例模式。</strong></p>
<p>🏮单例模式与全局变量不同， 它保证类只存在一个实例。 除了单例类自己以外， 无法通过任何方式替换缓存的实例。</p>
<p>请注意， 你可以随时调整限制并设定生成单例实例的数量， 只需修改 <code>获取实例</code>方法， 即 getInstance 中的代码即可实现。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>在类中添加一个私有静态成员变量用于保存单例实例。</li>
<li>声明一个公有静态构建方法用于获取单例实例。</li>
<li>在静态方法中实现”延迟初始化”。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。</li>
<li>将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。</li>
<li>检查客户端代码， 将对单例的构造函数的调用替换为对其静态构建方法的调用。</li>
</ol>
<h1 id="⚖️单例模式优缺点"><a href="#⚖️单例模式优缺点" class="headerlink" title="⚖️单例模式优缺点"></a>⚖️单例模式优缺点</h1><p>✔️你可以保证一个类只有一个实例。</p>
<p>✔️你获得了一个指向该实例的全局访问节点。</p>
<p>✔️仅在首次请求单例对象时对其进行初始化。</p>
<p>❌违反了<em>单一职责原则</em>。 该模式同时解决了两个问题。</p>
<p>❌单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</p>
<p>❌该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</p>
<p>❌单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>外观模式类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li>
<li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元模式就和单例类似了。 但这两个模式有两个根本性的不同。<ol>
<li>只会有一个单例实体， 但是<em>享元</em>类可以有多个实体， 各实体的内在状态也可以不同。</li>
<li><em>单例</em>对象可以是可变的。 享元对象是不可变的。</li>
</ol>
</li>
<li>抽象工厂模式、 生成器模式和原型模式都可以用单例来实现。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之生成器模式</title>
    <url>/posts/26169.html</url>
    <content><![CDATA[<h1 id="设计模式之生成器模式"><a href="#设计模式之生成器模式" class="headerlink" title="设计模式之生成器模式"></a>设计模式之生成器模式</h1><h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134256.png" alt="生成器模式"></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中； 甚至还有更糟糕的情况， 那就是这些代码散落在客户端代码的多个位置。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134404.png" alt="如果为每种可能的对象都创建一个子类， 这可能会导致程序变得过于复杂"></p>
<p>例如， 我们来思考如何创建一个 <code>房屋</code>House对象。 建造一栋简单的房屋， 首先你需要建造四面墙和地板， 安装房门和一套窗户， 然后再建造一个屋顶。 但是如果你想要一栋更宽敞更明亮的房屋， 还要有院子和其他设施 （例如暖气、 排水和供电设备）， 那又该怎么办呢？</p>
<p>最简单的方法是扩展 <code>房屋</code>基类， 然后创建一系列涵盖所有参数组合的子类。 但最终你将面对相当数量的子类。 任何新增的参数 （例如门廊类型） 都会让这个层次结构更加复杂。</p>
<p>另一种方法则无需生成子类。 你可以在 <code>房屋</code>基类中创建一个包括所有可能参数的超级构造函数， 并用它来控制房屋对象。 这种方法确实可以避免生成子类， 但它却会造成另外一个问题。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134501.png" alt="拥有大量输入参数的构造函数也有缺陷： 这些参数也不是每次都要全部用上的"></p>
<p>通常情况下， 绝大部分的参数都没有使用， 这使得对于构造函数的调用十分不简洁。 例如， 只有很少的房子有游泳池， 因此与游泳池相关的参数十之八九是毫无用处的。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>生成器模式建议将对象构造代码从产品类中抽取出来， 并将其放在一个名为<em>生成器</em>的独立对象中。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134548.png" alt="生成器模式让你能够分步骤创建复杂对象。 生成器不允许其他对象访问正在创建中的产品"></p>
<p>该模式会将对象构造过程划分为一组步骤， 比如 <code>build­Walls</code>创建墙壁和 <code>build­Door</code>创建房门创建房门等。 每次创建对象时， 你都需要通过生成器对象执行一系列步骤。 重点在于你无需调用所有步骤， 而只需调用创建特定对象配置所需的那些步骤即可。</p>
<p>当你需要创建不同形式的产品时， 其中的一些构造步骤可能需要不同的实现。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p>
<p>在这种情况下， 你可以创建多个不同的生成器， 用不同方式实现一组相同的创建步骤。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134618.png" alt="不同生成器以不同方式执行相同的任务"></p>
<p>例如， 假设第一个建造者使用木头和玻璃制造房屋， 第二个建造者使用石头和钢铁， 而第三个建造者使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是， 只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。</p>
<p><strong>主管</strong></p>
<p>你可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的<em>主管</em>类。 主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134706.png" alt="主管知道需要哪些创建步骤才能获得可正常使用的产品"></p>
<p>严格来说， 你的程序中并不一定需要主管类。 客户端代码可直接以特定顺序调用创建步骤。 不过， 主管类中非常适合放入各种例行构造流程， 以便在程序中反复使用。</p>
<p>此外， 对于客户端代码来说， 主管类完全隐藏了产品构造细节。 客户端只需要将一个生成器与主管类关联， 然后使用主管类来构造产品， 就能从生成器处获得构造结果了。</p>
<h1 id="🤔-生成器模式结构"><a href="#🤔-生成器模式结构" class="headerlink" title="🤔 生成器模式结构"></a>🤔 生成器模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201228134843.png" alt="生成器模式结构"></p>
<h1 id="💡生成器模式适合应用场景"><a href="#💡生成器模式适合应用场景" class="headerlink" title="💡生成器模式适合应用场景"></a>💡生成器模式适合应用场景</h1><p>🧨<strong>使用生成器模式可避免 “重叠构造函数 （telescopic constructor）” 的出现。</strong></p>
<p>🏮假设你的构造函数中有十个可选参数， 那么调用该函数会非常不方便； 因此， 你需要重载这个构造函数， 新建几个只有较少参数的简化版。 但这些构造函数仍需调用主构造函数， 传递一些默认数值来替代省略掉的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    Pizza(<span class="keyword">int</span> size) &#123; ... &#125;</span><br><span class="line">    Pizza(<span class="keyword">int</span> size, <span class="keyword">boolean</span> cheese) &#123; ... &#125;</span><br><span class="line">    Pizza(<span class="keyword">int</span> size, <span class="keyword">boolean</span> cheese, <span class="keyword">boolean</span> pepperoni) &#123; ... &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 只有在 C# 或 Java 等支持方法重载的编程语言中才能写出如此复杂的构造函数。</span></span><br></pre></td></tr></table></figure>
<p>生成器模式让你可以分步骤生成对象， 而且允许你仅使用必须的步骤。 应用该模式后， 你再也不需要将几十个参数塞进构造函数里了。</p>
<p>🧨<strong>当你希望使用代码创建不同形式的产品 （例如石头或木头房屋）时，可使用生成器模式。</strong></p>
<p>🏮如果你需要创建的各种形式的产品， 它们的制造过程相似且仅有细节上的差异， 此时可使用生成器模式。</p>
<p>基本生成器接口中定义了所有可能的制造步骤， 具体生成器将实现这些步骤来制造特定形式的产品。 同时， 主管类将负责管理制造步骤的顺序。</p>
<p>🧨 <strong>使用生成器构造组合树或其他复杂对象。</strong></p>
<p>🏮生成器模式让你能分步骤构造产品。 你可以延迟执行某些步骤而不会影响最终产品。 你甚至可以递归调用这些步骤， 这在创建对象树时非常方便。</p>
<p>生成器在执行制造步骤时， 不能对外发布未完成的产品。 这可以避免客户端代码获取到不完整结果对象的情况。</p>
<h1 id="📔实现-方式"><a href="#📔实现-方式" class="headerlink" title="📔实现 方式"></a>📔实现 方式</h1><ol>
<li><p>清晰地定义通用步骤， 确保它们可以制造所有形式的产品。 否则你将无法进一步实施该模式。</p>
</li>
<li><p>在基本生成器接口中声明这些步骤。</p>
</li>
<li><p>为每个形式的产品创建具体生成器类， 并实现其构造步骤。</p>
<p> 不要忘记实现获取构造结果对象的方法。 你不能在生成器接口中声明该方法， 因为不同生成器构造的产品可能没有公共接口， 因此你就不知道该方法返回的对象类型。 但是， 如果所有产品都位于单一类层次中， 你就可以安全地在基本接口中添加获取生成对象的方法。</p>
</li>
<li><p>考虑创建主管类。 它可以使用同一生成器对象来封装多种构造产品的方式。</p>
</li>
<li><p>客户端代码会同时创建生成器和主管对象。 构造开始前， 客户端必须将生成器对象传递给主管对象。 通常情况下， 客户端只需调用主管类构造函数一次即可。 主管类使用生成器对象完成后续所有制造任务。 还有另一种方式， 那就是客户端可以将生成器对象直接传递给主管类的制造方法。</p>
</li>
<li><p>只有在所有产品都遵循相同接口的情况下， 构造结果可以直接通过主管类获取。 否则， 客户端应当通过生成器获取构造结果。</p>
</li>
</ol>
<h1 id="⚖️生成器模式优缺点"><a href="#⚖️生成器模式优缺点" class="headerlink" title="⚖️生成器模式优缺点"></a>⚖️生成器模式优缺点</h1><p>✔️你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</p>
<p>✔️生成不同形式的产品时， 你可以复用相同的制造代码。</p>
<p>✔️<strong>单一职责原则</strong>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</p>
<p>❌ 由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>在许多设计工作的初期都会使用工厂方法模式 （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式 （更灵活但更加复杂）。</li>
<li>生成器重点关注如何分步生成复杂对象。 抽象工厂专门用于生产一系列相关对象。 <em>抽象工厂</em>会马上返回产品， <em>生成器</em>则允许你在获取产品前执行一些额外构造步骤。</li>
<li>你可以在创建复杂组合模式树时使用生成器， 因为这可使其构造步骤以递归的方式运行。</li>
<li>你可以结合使用生成器和桥接模式： <em>主管</em>类负责抽象工作， 各种不同的<em>生成器</em>负责<em>实现</em>工作。</li>
<li>抽象工厂、 生成器和原型都可以用单例模式来实现。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <url>/posts/23356.html</url>
    <content><![CDATA[<h1 id="设计模式之抽象工厂模式"><a href="#设计模式之抽象工厂模式" class="headerlink" title="设计模式之抽象工厂模式"></a>设计模式之抽象工厂模式</h1><p><strong>亦称：</strong> Abstract Factory</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160358.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假设你正在开发一款家具商店模拟器。 你的代码中包括一些类， 用于表示：</p>
<ol>
<li>一系列相关产品， 例如 <code>椅子</code>Chair 、  <code>沙发</code>Sofa和 <code>咖啡桌</code>Coffee­Table 。</li>
<li>系列产品的不同变体。 例如， 你可以使用 <code>现代</code>Modern 、  <code>维多利亚</code>Victorian 、  <code>装饰风艺术</code>Art­Deco等风格生成 <code>椅子</code> 、  <code>沙发</code>和 <code>咖啡桌</code> 。</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160502.png" alt="系列产品及其不同变体"></p>
<p>你需要设法单独生成每件家具对象， 这样才能确保其风格一致。 如果顾客收到的家具风格不一样， 他们可不会开心。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160602.png" alt="现代风格的沙发和维多利亚风格的椅子不搭"></p>
<p>此外， 你也不希望在添加新产品或新风格时修改已有代码。 家具供应商对于产品目录的更新非常频繁， 你不会想在每次更新时都去修改核心代码的。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>首先， 抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， 所有风格的椅子都实现 <code>椅子</code>接口； 所有风格的咖啡桌都实现 <code>咖啡桌</code>接口， 以此类推。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160638.png" alt="同一对象的所有变体都必须放置在同一个类层次结构之中"></p>
<p>接下来， 我们需要声明<em>抽象工厂</em>——包含系列中所有产品构造方法的接口。 例如 <code>create­Chair</code>创建椅子 、  <code>create­Sofa</code>创建沙发和 <code>create­Coffee­Table</code>创建咖啡桌 。 这些方法必须返回<strong>抽象</strong>产品类型， 即我们之前抽取的那些接口：  <code>椅子</code> ，  <code>沙发</code>和 <code>咖啡桌</code>等等。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160700.png" alt="每个具体工厂类都对应一个特定的产品变体"></p>
<p>那么该如何处理产品变体呢？ 对于系列产品的每个变体， 我们都将基于 <code>抽象工厂</code>接口创建不同的工厂类。 每个工厂类都只能返回特定类别的产品， 例如，  <code>现代家具工厂</code>Modern­Furniture­Factory只能创建 <code>现代椅子</code>Modern­Chair 、  <code>现代沙发</code>Modern­Sofa和 <code>现代咖啡桌</code>Modern­Coffee­Table对象。</p>
<p>客户端代码可以通过相应的抽象接口调用工厂和产品类。 你无需修改实际客户端代码， 就能更改传递给客户端的工厂类， 也能更改客户端代码接收的产品变体。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225160733.png" alt="客户端无需了解其所调用工厂的具体类信息"></p>
<p>假设客户端想要工厂创建一把椅子。 客户端无需了解工厂类， 也不用管工厂类创建出的椅子类型。 无论是现代风格， 还是维多利亚风格的椅子， 对于客户端来说没有分别， 它只需调用抽象 <code>椅子</code>接口就可以了。 这样一来， 客户端只需知道椅子以某种方式实现了 <code>sit­On</code>坐下方法就足够了。 此外， 无论工厂返回的是何种椅子变体， 它都会和由同一工厂对象创建的沙发或咖啡桌风格一致。</p>
<p>最后一点说明： 如果客户端仅接触抽象接口， 那么谁来创建实际的工厂对象呢？ 一般情况下， 应用程序会在初始化阶段创建具体工厂对象。 而在此之前， 应用程序必须根据配置文件或环境设定选择工厂类别。</p>
<h1 id="🤔抽象工厂模式结构"><a href="#🤔抽象工厂模式结构" class="headerlink" title="🤔抽象工厂模式结构"></a>🤔抽象工厂模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225161121.png" alt="抽象工厂模式结构"></p>
<h1 id="💡抽象工厂模式适合应用场景"><a href="#💡抽象工厂模式适合应用场景" class="headerlink" title="💡抽象工厂模式适合应用场景"></a>💡抽象工厂模式适合应用场景</h1><p><strong>🧨如果代码需要与多个不同系列的相关产品交互，但是由于无法提前获取相关信息，或者出于对未来扩展性的考虑，你不希望代码基于产品的具体类进行构建，在这种情况下，你可以使用抽象工厂。</strong></p>
<p>🏮抽象工厂为你提供了一个接口， 可用于创建每个系列产品的对象。 只要代码通过该接口创建对象， 那么你就不会生成与应用程序已生成的产品类型不一致的产品。</p>
<p><strong>🧨如果你有一个基于一组抽象方法的类，且其主要功能因此变得不明确，那么在这种情况下可以考虑使用抽象工厂模式。</strong></p>
<p>🏮在设计良好的程序中， <em>每个类仅负责一件事</em>。 如果一个类与多种类型产品交互， 就可以考虑将工厂方法抽取到独立的工厂类或具备完整功能的抽象工厂类中。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li>以不同的产品类型与产品变体为维度绘制矩阵。</li>
<li>为所有产品声明抽象产品接口。 然后让所有具体产品类实现这些接口。</li>
<li>声明抽象工厂接口， 并且在接口中为所有抽象产品提供一组构建方法。</li>
<li>为每种产品变体实现一个具体工厂类。</li>
<li>在应用程序中开发初始化代码。 该代码根据应用程序配置或当前环境， 对特定具体工厂类进行初始化。 然后将该工厂对象传递给所有需要创建产品的类。</li>
<li>找出代码中所有对产品构造函数的直接调用， 将其替换为对工厂对象中相应构建方法的调用。</li>
</ol>
<h1 id="⚖️抽象工厂模式优缺点"><a href="#⚖️抽象工厂模式优缺点" class="headerlink" title="⚖️抽象工厂模式优缺点"></a>⚖️抽象工厂模式优缺点</h1><p>✔️你可以确保同一工厂生成的产品相互匹配。</p>
<p>✔️你可以避免客户端和具体产品代码的耦合。</p>
<p><strong>✔️单一职责原则</strong>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</p>
<p><strong>✔️开闭原则</strong>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</p>
<p>❌由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>在许多设计工作的初期都会使用<a href="https://www.junpzx.cn/2020/12/25/设计模式之工厂方法模式/">工厂方法模式</a>（较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用<a href="https://www.junpzx.cn/2020/12/25/设计模式之抽象工厂模式/">抽象工厂模式</a>、 <a href="https://www.junpzx.cn/2020/12/28/设计模式之原型模式/">原型模式</a>或<a href="https://www.junpzx.cn/2020/12/28/设计模式之生成器模式/">生成器模式</a> （更灵活但更加复杂）。</li>
<li>生成器重点关注如何分步生成复杂对象。 抽象工厂专门用于生产一系列相关对象。 <strong>抽象工厂</strong>会马上返回产品， <strong>生成器</strong>则允许你在获取产品前执行一些额外构造步骤。</li>
<li>抽象工厂模式通常基于一组工厂方法， 但你也可以使用原型模式来生成这些类的方法。</li>
<li>当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用抽象工厂来代替外观模式。</li>
<li>你可以将抽象工厂和<a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/">桥接模式</a>搭配使用。 如果由<strong>桥接</strong>定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， <strong>抽象工厂</strong>可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</li>
<li>抽象工厂、 生成器和原型都可以用<a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#more">单例模式</a>来实现。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之工厂方法模式</title>
    <url>/posts/65045.html</url>
    <content><![CDATA[<h1 id="设计模式之工厂方法模式"><a href="#设计模式之工厂方法模式" class="headerlink" title="设计模式之工厂方法模式"></a>设计模式之工厂方法模式</h1><p><strong>亦称：</strong> 虚拟构造函数、Virtual Constructor、Factory Method</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225151240.png" alt="工厂方法模式"></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假设你正在开发一款物流管理应用。 最初版本只能处理卡车运输， 因此大部分代码都在位于名为 <code>卡车</code>的类中。</p>
<p>一段时间后， 这款应用变得极受欢迎。 你每天都能收到十几次来自海运公司的请求， 希望应用能够支持海上物流功能。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225152431.png" alt="如果代码其余部分与现有类已经存在耦合关系， 那么向程序中添加新类其实并没有那么容易"></p>
<p>这可是个好消息。 但是代码问题该如何处理呢？ 目前， 大部分代码都与 <code>卡车</code>类相关。 在程序中添加 <code>轮船</code>类需要修改全部代码。 更糟糕的是， 如果你以后需要在程序中支持另外一种运输方式， 很可能需要再次对这些代码进行大幅修改。</p>
<p>最后， 你将不得不编写繁复的代码， 根据不同的运输对象类， 在应用中进行不同的处理。</p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>工厂方法模式建议使用特殊的<em>工厂</em>方法代替对于对象构造函数的直接调用 （即使用 <code>new</code>运算符）。 不用担心， 对象仍将通过 <code>new</code>运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225152710.png" alt="子类可以修改工厂方法返回的对象类型"></p>
<p>乍看之下， 这种更改可能毫无意义： 我们只是改变了程序中调用构造函数的位置而已。 但是， 仔细想一下， 现在你可以在子类中重写工厂方法， 从而改变其创建产品的类型。</p>
<p>但有一点需要注意:仅当这些产品具有共同的基类或者接口时， 子类才能返回不同类型的产品， 同时基类中的工厂方法还应将其返回类型声明为这一共有接口。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225152825.png" alt="所有产品都必须使用同一接口"></p>
<p>举例来说，  <code>卡车</code>Truck和 <code>轮船</code>Ship类都必须实现 <code>运输</code>Transport接口， 该接口声明了一个名为 <code>deliver</code>交付的方法。 每个类都将以不同的方式实现该方法： 卡车走陆路交付货物， 轮船走海路交付货物。  <code>陆路运输</code>Road­Logistics类中的工厂方法返回卡车对象， 而 <code>海路运输</code>Sea­Logistics类则返回轮船对象。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225154352.png" alt="只要产品类实现一个共同的接口， 你就可以将其对象传递给客户代码， 而无需提供额外数据"></p>
<p>调用工厂方法的代码 （通常被称为<em>客户端</em>代码） 无需了解不同子类返回实际对象之间的差别。 客户端将所有产品视为抽象的 <code>运输</code> 。 客户端知道所有运输对象都提供 <code>交付</code>方法， 但是并不关心其具体实现方式。</p>
<h1 id="🤔工厂方法模式结构"><a href="#🤔工厂方法模式结构" class="headerlink" title="🤔工厂方法模式结构"></a>🤔工厂方法模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201225161224.png" alt="工厂方法模式结构"></p>
<h1 id="💡工厂方法模式适合应用场景"><a href="#💡工厂方法模式适合应用场景" class="headerlink" title="💡工厂方法模式适合应用场景"></a>💡工厂方法模式适合应用场景</h1><p>🧨当你在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时， 可使用工厂方法。</p>
<p>🏮工厂方法将创建产品的代码与实际使用产品的代码分离， 从而能在不影响其他代码的情况下扩展产品创建部分       代码。</p>
<p>例如， 如果需要向应用中添加一种新产品， 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p>
<p>🧨如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法。</p>
<p>🏮继承可能是扩展软件库或框架默认行为的最简单方法。 但是当你使用子类替代标准组件时， 框架如何辨识出该     子类？</p>
<p>解决方案是将各框架中构造组件的代码集中到单个工厂方法中， 并在继承该组件之外允许任何人对该方法进行     重写。</p>
<p>让我们看看具体是如何实现的。 假设你使用开源 UI 框架编写自己的应用。 你希望在应用中使用圆形按钮， 但     是原框架仅支持矩形按钮。 你可以使用 <code>圆形按钮</code>Round­Button子类来继承标准的 <code>按钮</code>Button类。 但是， 你     需要告诉 <code>UI框架</code>UIFramework类使用新的子类按钮代替默认按钮。</p>
<p>为了实现这个功能， 你可以根据基础框架类开发子类 <code>圆形按钮 UI</code>UIWith­Round­Buttons ， 并且重写其                 <code>create­Button</code>创建按钮方法。 基类中的该方法返回 <code>按钮</code>对象， 而你开发的子类返回 <code>圆形按钮</code>对象。 现在，      你就可以使用 <code>圆形按钮 UI</code>类代替 <code>UI框架</code>类。 就是这么简单！</p>
<p>🧨如果你希望复用现有对象来节省系统资源， 而不是每次都重新创建对象， 可使用工厂方法。</p>
<p>🏮在处理大型资源密集型对象 （比如数据库连接、 文件系统和网络资源） 时， 你会经常碰到这种资源需求。让我们思考复用现有对象的方法：</p>
<ol>
<li>首先， 你需要创建存储空间来存放所有已经创建的对象。</li>
<li>当他人请求一个对象时， 程序将在对象池中搜索可用对象。</li>
<li>…然后将其返回给客户端代码。</li>
<li>如果没有可用对象， 程序则创建一个新对象 （并将其添加到对象池中）。</li>
</ol>
<p>这些代码可不少！ 而且它们必须位于同一处， 这样才能确保重复代码不会污染程序。</p>
<p>可能最显而易见， 也是最方便的方式， 就是将这些代码放置在我们试图重用的对象类的构造函数中。 但是从     定义上来讲， 构造函数始终返回的是<strong>新对象</strong>， 其无法返回现有实例。</p>
<p>因此， 你需要有一个既能够创建新对象， 又可以重用现有对象的普通方法。 这听上去和工厂方法非常相像。</p>
<h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li><p>让所有产品都遵循同一接口。 该接口必须声明对所有产品都有意义的方法。</p>
</li>
<li><p>在创建类中添加一个空的工厂方法。 该方法的返回类型必须遵循通用的产品接口。</p>
</li>
<li><p>在创建者代码中找到对于产品构造函数的所有引用。 将它们依次替换为对于工厂方法的调用， 同时将创建产品的代码移入工厂方法。 你可能需要在工厂方法中添加临时参数来控制返回的产品类型。</p>
<p> 工厂方法的代码看上去可能非常糟糕。 其中可能会有复杂的 <code>switch</code>分支运算符， 用于选择各种需要实例化的产品类。 但是不要担心， 我们很快就会修复这个问题。</p>
</li>
<li><p>现在， 为工厂方法中的每种产品编写一个创建者子类， 然后在子类中重写工厂方法， 并将基本方法中的相关创建代码移动到工厂方法中。</p>
</li>
<li><p>如果应用中的产品类型太多， 那么为每个产品创建子类并无太大必要， 这时你也可以在子类中复用基类中的控制参数。</p>
<p> 例如， 设想你有以下一些层次结构的类。 基类 <code>邮件</code>及其子类 <code>航空邮件</code>和 <code>陆路邮件</code> ；  <code>运输</code>及其子类 <code>飞机</code>, <code>卡车</code>和 <code>火车</code> 。  <code>航空邮件</code>仅使用 <code>飞机</code>对象， 而 <code>陆路邮件</code>则会同时使用 <code>卡车</code>和 <code>火车</code>对象。 你可以编写一个新的子类 （例如 <code>火车邮件</code> ） 来处理这两种情况， 但是还有其他可选的方案。 客户端代码可以给 <code>陆路邮件</code>类传递一个参数， 用于控制其希望获得的产品。</p>
</li>
<li><p>如果代码经过上述移动后， 基础工厂方法中已经没有任何代码， 你可以将其转变为抽象类。 如果基础工厂方法中还有其他语句， 你可以将其设置为该方法的默认行为。</p>
</li>
</ol>
<h1 id="⚖️工厂方法模式优缺点"><a href="#⚖️工厂方法模式优缺点" class="headerlink" title="⚖️工厂方法模式优缺点"></a>⚖️工厂方法模式优缺点</h1><p>✔️你可以避免创建者和具体产品之间的紧密耦合。</p>
<p>✔️<strong>单一职责原则</strong>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</p>
<p>✔️<strong>开闭原则</strong>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</p>
<p>❌应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类     的现有层次结构中。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li>在许多设计工作的初期都会使用工厂方法模式 （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式 （更灵活但更加复杂）。</li>
<li>抽象工厂模式通常基于一组工厂方法， 但你也可以使用原型模式来生成这些类的方法。</li>
<li>你可以同时使用工厂方法和迭代器模式来让子类集合返回不同类型的迭代器， 并使得迭代器与集合相匹配。</li>
<li>原型并不基于继承， 因此没有继承的缺点。 另一方面， <em>原型</em>需要对被复制对象进行复杂的初始化。 工厂方法基于继承， 但是它不需要初始化步骤。</li>
<li>工厂方法是模板方法模式的一种特殊形式。 同时， <em>工厂方法</em>可以作为一个大型<em>模板方法</em>中的一个步骤。</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>创建型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之观察者模式</title>
    <url>/posts/63625.html</url>
    <content><![CDATA[<h1 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h1><p><strong>亦称：</strong> 事件订阅者、监听者、Event-Subscriber、Listener、Observer</p>
<h1 id="💬意图"><a href="#💬意图" class="headerlink" title="💬意图"></a>💬意图</h1><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224144925.png" alt=""></p>
<h1 id="☹️问题"><a href="#☹️问题" class="headerlink" title="☹️问题"></a>☹️问题</h1><p>假如你有两种类型的对象：<code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPhone 手机）， 而该产品很快将会在商店里出售。</p>
<p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224145144.png" alt="前往商店和发送垃圾邮件"></p>
<h1 id="😃解决方案"><a href="#😃解决方案" class="headerlink" title="😃解决方案"></a>😃解决方案</h1><p>拥有一些值得关注的状态的对象通常被称为<em>目标</em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为<strong>发布者</strong> （publisher）。 所有希望关注发布者状态变化的其他对象被称为<strong>订阅者</strong> （subscribers）。</p>
<p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括：</p>
<ol>
<li>一个用于存储订阅者对象引用的列表成员变量； </li>
<li>几个用于添加或删除该列表中订阅者的公有方法。</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224145419.png" alt="订阅机制允许对象订阅事件通知"></p>
<p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p>
<p>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</p>
<p>因此， 所有订阅者都必须实现同样的接口， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224145554.png" alt="发布者调用订阅者对象中的特定通知方法来通知订阅者"></p>
<p>如果你的应用中有多个不同类型的发布者， 且希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有订阅者遵循同样的接口。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p>
<h1 id="📰真实世界类比"><a href="#📰真实世界类比" class="headerlink" title="📰真实世界类比"></a>📰真实世界类比</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224145738.png" alt="杂志和报纸订阅"></p>
<p>如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。</p>
<p>出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</p>
<h1 id="🤔观察者模式结构"><a href="#🤔观察者模式结构" class="headerlink" title="🤔观察者模式结构"></a>🤔观察者模式结构</h1><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224170657.jpg" alt="观察者模型结构"></p>
<h1 id="💡观察者模式适合应用场景"><a href="#💡观察者模式适合应用场景" class="headerlink" title="💡观察者模式适合应用场景"></a>💡观察者模式适合应用场景</h1><p>🏮当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。</p>
<p>🧨当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入          自定义代码， 这样当用户按下按钮时就会触发这些代码。</p>
<p>🏮观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许     客户端通过自定义订阅类注入自定义代码。</p>
<p>🧨 当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。</p>
<pre><code>  订阅列表是动态的， 因此订阅者可随时加入或离开该列表。
</code></pre><h1 id="📔实现方式"><a href="#📔实现方式" class="headerlink" title="📔实现方式"></a>📔实现方式</h1><ol>
<li><p>仔细检查你的业务逻辑， 试着将其拆分为两个部分： 独立于其他代码的核心功能将作为发布者； 其他代码则将转化为一组订阅类。</p>
</li>
<li><p>声明订阅者接口。 该接口至少应声明一个 <code>update</code>方法。</p>
</li>
<li><p>声明发布者接口并定义一些接口来在列表中添加和删除订阅对象。 记住发布者必须仅通过订阅者接口与它们进行交互。</p>
</li>
<li><p>确定存放实际订阅列表的位置并实现订阅方法。 通常所有类型的发布者代码看上去都一样， 因此将列表放置在直接扩展自发布者接口的抽象类中是显而易见的。 具体发布者会扩展该类从而继承所有的订阅行为。</p>
<p> 但是， 如果你需要在现有的类层次结构中应用该模式， 则可以考虑使用组合的方式： 将订阅逻辑放入一个独立的对象， 然后让所有实际订阅者使用该对象。</p>
</li>
<li><p>创建具体发布者类。 每次发布者发生了重要事件时都必须通知所有的订阅者。</p>
</li>
<li><p>在具体订阅者类中实现通知更新的方法。 绝大部分订阅者需要一些与事件相关的上下文数据。 这些数据可作为通知方法的参数来传递。</p>
<p> 但还有另一种选择。 订阅者接收到通知后直接从通知中获取所有数据。 在这种情况下， 发布者必须通过更新方法将自身传递出去。 另一种不太灵活的方式是通过构造函数将发布者与订阅者永久性地连接起来。</p>
</li>
<li><p>客户端必须生成所需的全部订阅者， 并在相应的发布者处完成注册工作。</p>
</li>
</ol>
<h1 id="⚖️观察者模式优缺点"><a href="#⚖️观察者模式优缺点" class="headerlink" title="⚖️观察者模式优缺点"></a>⚖️观察者模式优缺点</h1><p>✔️<em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</p>
<p>✔️你可以在运行时建立对象之间的联系。</p>
<p>❌订阅者的通知顺序是随机的。</p>
<h1 id="🔱与其他模式的关系"><a href="#🔱与其他模式的关系" class="headerlink" title="🔱与其他模式的关系"></a>🔱与其他模式的关系</h1><ul>
<li><p>责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</p>
<ul>
<li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li>
<li><em>命令</em>在发送者和请求者之间建立单向连接。</li>
<li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li>
<li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li>
</ul>
</li>
<li><p>中介者和观察者之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</p>
<p>  <em>中介者</em>的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 <em>观察者</em>的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p>
<p>  有一种流行的中介者模式实现方式依赖于<em>观察者</em>。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当<em>中介者</em>以这种方式实现时， 它可能看上去与<em>观察者</em>非常相似。</p>
<p>  当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和<em>观察者</em>并不相同， 但这仍是一种中介者模式。</p>
<p>  假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p>
</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>行为型设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti基础</title>
    <url>/posts/36373.html</url>
    <content><![CDATA[<h1 id="Activiti7"><a href="#Activiti7" class="headerlink" title="Activiti7"></a>Activiti7</h1><h1 id="一、工作流介绍"><a href="#一、工作流介绍" class="headerlink" title="一、工作流介绍"></a>一、工作流介绍</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。它主要解决的是“使在多个参与者之间按照某种预定义的规则自动进行传递文档、信息或任务的过程，从而实现某个预期的业务目标，或者促使此目标的实现”。</p>
<h2 id="1-2-工作流系统"><a href="#1-2-工作流系统" class="headerlink" title="1.2 工作流系统"></a>1.2 工作流系统</h2><p>一个软件系统中具有工作流的功能，我们把它称为工作流系统，一个系统中工作流的功能是什么？就是对系统的业务流程进行自动化管理，所以工作流是建立在业务流程的基础上，所以一个软件的系统核心根本上还是系统的业务流程，工作流只是协助进行业务流程管理。即使没有工作流业务系统也可以开发运行，只不过有了工作流可以更好的管理业务流程，提高系统的可扩展性。</p>
<h2 id="1-3-适用行业"><a href="#1-3-适用行业" class="headerlink" title="1.3 适用行业"></a>1.3 适用行业</h2><p>消费品行业，制造业，电信服务业，银证险等金融服务业，物流服务业，物业服务业，物业管理，大中型进出口贸易公司，政府事业机构，研究院所及教育服务业等，特别是大的跨国企业和集团公司。</p>
<h2 id="1-4-具体应用"><a href="#1-4-具体应用" class="headerlink" title="1.4 具体应用"></a>1.4 具体应用</h2><p>1、关键业务流程：订单、报价处理、合同审核、客户电话处理、供应链管理等</p>
<p>2、行政管理类:出差申请、加班申请、请假申请、用车申请、各种办公用品申请、购买申请、日报周报等凡是原来手工流转处理的行政表单。</p>
<p>3、人事管理类：员工培训安排、绩效考评、职位变动处理、员工档案信息管理等。</p>
<p>4、财务相关类：付款请求、应收款处理、日常报销处理、出差报销、预算和计划申请等。</p>
<p>5、客户服务类：客户信息管理、客户投诉、请求处理、售后服务管理等。</p>
<p>6、特殊服务类：ISO系列对应流程、质量管理对应流程、产品数据信息管理、贸易公司报关处理、物流公司货物跟踪处理等各种通过表单逐步手工流转完成的任务均可应用工作流软件自动规范地实施。</p>
<h2 id="1-5-实现方式"><a href="#1-5-实现方式" class="headerlink" title="1.5 实现方式"></a>1.5 实现方式</h2><p>在没有专门的工作流引擎之前，我们之前为了实现流程控制，通常的做法就是采用状态字段的值来跟踪流程的变化情况。这样不用角色的用户，通过状态字段的取值来决定记录是否显示。</p>
<p> 针对有权限可以查看的记录，当前用户根据自己的角色来决定审批是否合格的操作。如果合格将状态字段设置一个值，来代表合格；当然如果不合格也需要设置一个值来代表不合格的情况。</p>
<p> 这是一种最为原始的方式。通过状态字段虽然做到了流程控制，但是当我们的流程发生变更的时候，这种方式所编写的代码也要进行调整。</p>
<p> 那么有没有专业的方式来实现工作流的管理呢？并且可以做到业务流程变化之后，我们的程序可以不用改变，如果可以实现这样的效果，那么我们的业务系统的适应能力就得到了极大提升。</p>
<h1 id="二、Activiti7概述"><a href="#二、Activiti7概述" class="headerlink" title="二、Activiti7概述"></a>二、Activiti7概述</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>Alfresco软件在2010年5月17日宣布Activiti业务流程管理（BPM）开源项目的正式启动，其首席架构师由业务流程管理BPM的专家 Tom Baeyens担任，Tom Baeyens就是原来jbpm的架构师，而jbpm是一个非常有名的工作流引擎，当然activiti也是一个工作流引擎。</p>
<p>Activiti是一个工作流引擎， activiti可以将业务系统中复杂的业务流程抽取出来，使用专门的建模语言BPMN2.0进行定义，业务流程按照预先定义的流程进行执行，实现了系统的流程由activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的健壮性，同时也减少了系统开发维护成本。</p>
<p>官方网站：<a href="https://www.activiti.org/">https://www.activiti.org/</a></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134057.jpg" alt=""></p>
<p>经历的版本:</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134100.jpg" alt=""></p>
<p>目前最新版本：Activiti7.0.0.Beta</p>
<h3 id="2-1-1-BPM"><a href="#2-1-1-BPM" class="headerlink" title="2.1.1 BPM"></a>2.1.1 BPM</h3><p>BPM（Business Process Management），即业务流程管理，是一种规范化的构造端到端的业务流程，以持续的提高组织业务效率。常见商业管理教育如EMBA、MBA等均将BPM包含在内。</p>
<h3 id="2-1-2-BPM软件"><a href="#2-1-2-BPM软件" class="headerlink" title="2.1.2 BPM软件"></a>2.1.2 BPM软件</h3><p>BPM软件就是根据企业中业务环境的变化，推进人与人之间、人与系统之间以及系统与系统之间的整合及调整的经营方法与解决方案的IT工具。</p>
<p>通过BPM软件对企业内部及外部的业务流程的整个生命周期进行建模、自动化、管理监控和优化，使企业成本降低，利润得以大幅提升。</p>
<p>BPM软件在企业中应用领域广泛，凡是有业务流程的地方都可以BPM软件进行管理，比如企业人事办公管理、采购流程管理、公文审批流程管理、财务管理等。</p>
<h3 id="2-1-3-BPMN"><a href="#2-1-3-BPMN" class="headerlink" title="2.1.3 BPMN"></a>2.1.3 BPMN</h3><p>BPMN（Business Process Model AndNotation）- 业务流程模型和符号 是由BPMI（BusinessProcess Management Initiative）开发的一套标准的业务流程建模符号，使用BPMN提供的符号可以创建业务流程。 </p>
<p>2004年5月发布了BPMN1.0规范.BPMI于2005年9月并入OMG（The Object Management Group对象管理组织)组织。OMG于2011年1月发布BPMN2.0的最终版本。</p>
<p>具体发展历史如下: </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134054.jpg" alt=""></p>
<p>BPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准。Activiti 就是使用 BPMN 2.0 进行流程建模、流程执行管理，它包括很多的建模符号，比如：</p>
<p>Event </p>
<p>用一个圆圈表示，它是流程中运行过程中发生的事情。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134052.jpg" alt=""></p>
<p>活动用圆角矩形表示，一个流程由一个活动或多个活动组成</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134050.jpg" alt=""></p>
<p>Bpmn图形其实是通过xml表示业务流程，上边的.bpmn文件使用文本编辑器打开：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:activiti</span>=<span class="string">&quot;http://activiti.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;myProcess&quot;</span> <span class="attr">name</span>=<span class="string">&quot;My process&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审核&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事复核&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow3&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;endevent1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;End&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow4&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;endevent1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;myProcess&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;130.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;55.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;210.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;55.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;360.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;55.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;510.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;endevent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;660.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;165.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;210.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;315.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;360.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;465.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;510.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow4&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;615.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;660.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-2-使用步骤"><a href="#2-2-使用步骤" class="headerlink" title="2.2 使用步骤"></a>2.2 使用步骤</h2><h3 id="部署activiti"><a href="#部署activiti" class="headerlink" title="部署activiti"></a>部署activiti</h3><p>Activiti是一个工作流引擎（其实就是一堆jar包API），业务系统访问(操作)activiti的接口，就可以方便的操作流程相关数据，这样就可以把工作流环境与业务系统的环境集成在一起。</p>
<h3 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h3><p>使用activiti流程建模工具(activity-designer)定义业务流程(.bpmn文件) 。</p>
<p>.bpmn文件就是业务流程定义文件，通过xml定义业务流程。</p>
<h3 id="流程定义部署"><a href="#流程定义部署" class="headerlink" title="流程定义部署"></a>流程定义部署</h3><p>activiti部署业务流程定义（.bpmn文件）。</p>
<p>使用activiti提供的api把流程定义内容存储起来，在Activiti执行过程中可以查询定义的内容</p>
<p>Activiti执行把流程定义内容存储在数据库中</p>
<h3 id="启动一个流程实例"><a href="#启动一个流程实例" class="headerlink" title="启动一个流程实例"></a>启动一个流程实例</h3><p>流程实例也叫：ProcessInstance</p>
<p>启动一个流程实例表示开始一次业务流程的运行。</p>
<p>在员工请假流程定义部署完成后，如果张三要请假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互相不影响。</p>
<h3 id="用户查询待办任务-Task"><a href="#用户查询待办任务-Task" class="headerlink" title="用户查询待办任务(Task)"></a>用户查询待办任务(Task)</h3><p>因为现在系统的业务流程已经交给activiti管理，通过activiti就可以查询当前流程执行到哪了，当前用户需要办理什么任务了，这些activiti帮我们管理了，而不需要开发人员自己编写在sql语句查询。</p>
<h3 id="用户办理任务"><a href="#用户办理任务" class="headerlink" title="用户办理任务"></a>用户办理任务</h3><p>用户查询待办任务后，就可以办理某个任务，如果这个任务办理完成还需要其它用户办理，比如采购单创建后由部门经理审核，这个过程也是由activiti帮我们完成了。</p>
<h3 id="流程结束"><a href="#流程结束" class="headerlink" title="流程结束"></a>流程结束</h3><p>当任务办理完成没有下一个任务结点了，这个流程实例就完成了。</p>
<h1 id="三、Activiti环境"><a href="#三、Activiti环境" class="headerlink" title="三、Activiti环境"></a>三、Activiti环境</h1><h2 id="3-1-开发环境"><a href="#3-1-开发环境" class="headerlink" title="3.1 开发环境"></a>3.1 开发环境</h2><p>Jdk1.8或以上版本</p>
<p>Mysql 5及以上的版本</p>
<p>Tomcat8.5</p>
<p>IDEA</p>
<p><strong>注意：activiti的流程定义工具插件可以安装在IDEA下，也可以安装在Eclipse工具下</strong></p>
<h2 id="3-2-Activiti环境"><a href="#3-2-Activiti环境" class="headerlink" title="3.2 Activiti环境"></a>3.2 Activiti环境</h2><p>我们使用：Activiti7.0.0.Beta1  默认支持spring5</p>
<h3 id="3-2-1-下载activiti7"><a href="#3-2-1-下载activiti7" class="headerlink" title="3.2.1 下载activiti7"></a>3.2.1 下载activiti7</h3><p>Activiti下载地址：<a href="http://activiti.org/download.html">http://activiti.org/download.html</a> ，Maven的依赖如下：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>1)</strong>      <strong>Database</strong>：</p>
<p>activiti运行需要有数据库的支持，支持的数据库有：h2, mysql, oracle, postgres, mssql, db2。</p>
<h3 id="3-2-2-流程设计器IDEA下安装"><a href="#3-2-2-流程设计器IDEA下安装" class="headerlink" title="3.2.2 流程设计器IDEA下安装"></a>3.2.2 流程设计器IDEA下安装</h3><p>在IDEA的File菜单中找到子菜单”Settings”,后面我们再选择左侧的“plugins”菜单，如下图所示：</p>
<p><img src="E:/Desktop/Activiti/assets/1574856677.png" alt=""></p>
<p>此时我们就可以搜索到actiBPM插件，它就是Activiti Designer的IDEA版本，我们点击Install安装。</p>
<p>安装好后，页面如下：</p>
<p><img src="E:/Desktop/Activiti/assets/1574856972.png" alt=""></p>
<p>提示需要重启idea，点击重启。</p>
<p>重启完成后，再次打开Settings 下的 Plugins（插件列表），点击右侧的Installed（已安装的插件），在列表中看到actiBPM，就说明已经安装成功了，如下图所示：</p>
<p><img src="E:/Desktop/Activiti/assets/1574857172.png" alt=""></p>
<p>后面的课程里，我们会使用这个流程设计器进行Activiti的流程设计。</p>
<h2 id="3-3-Activiti的数据库支持"><a href="#3-3-Activiti的数据库支持" class="headerlink" title="3.3 Activiti的数据库支持"></a>3.3 Activiti的数据库支持</h2><p>Activiti 在运行时需要数据库的支持，使用25张表，把流程定义节点内容读取到数据库表中，以供后续使用。</p>
<h3 id="3-3-1-Activiti-支持的数据库"><a href="#3-3-1-Activiti-支持的数据库" class="headerlink" title="3.3.1 Activiti 支持的数据库"></a>3.3.1 Activiti 支持的数据库</h3><p>activiti  支持的数据库和版本如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据库类型</th>
<th>版本</th>
<th>JDBC连接示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>h2</td>
<td>1.3.168</td>
<td>jdbc:h2:tcp://localhost/activiti</td>
<td>默认配置的数据库</td>
</tr>
<tr>
<td>mysql</td>
<td>5.1.21</td>
<td>jdbc:mysql://localhost:3306/activiti?autoReconnect=true</td>
<td>使用 mysql-connector-java 驱动测试</td>
</tr>
<tr>
<td>oracle</td>
<td>11.2.0.1.0</td>
<td>jdbc:oracle:thin:@localhost:1521:xe</td>
<td></td>
</tr>
<tr>
<td>postgres</td>
<td>8.1</td>
<td>jdbc:postgresql://localhost:5432/activiti</td>
<td></td>
</tr>
<tr>
<td>db2</td>
<td>DB2 10.1 using db2jcc4</td>
<td>jdbc:db2://localhost:50000/activiti</td>
<td></td>
</tr>
<tr>
<td>mssql</td>
<td>2008 using sqljdbc4</td>
<td>jdbc:sqlserver://localhost:1433/activiti</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-3-2-在MySQL生成表"><a href="#3-3-2-在MySQL生成表" class="headerlink" title="3.3.2 在MySQL生成表"></a>3.3.2 在MySQL生成表</h3><h4 id="3-3-2-1-创建数据库"><a href="#3-3-2-1-创建数据库" class="headerlink" title="3.3.2.1 创建数据库"></a>3.3.2.1 创建数据库</h4><p>创建  mysql  数据库  activiti （名字任意）：</p>
<p>CREATE DATABASE activiti DEFAULT CHARACTER SET utf8;</p>
<h4 id="3-3-2-2-使用java代码生成表"><a href="#3-3-2-2-使用java代码生成表" class="headerlink" title="3.3.2.2 使用java代码生成表"></a>3.3.2.2 使用java代码生成表</h4><h5 id="1）-创建-java-工程"><a href="#1）-创建-java-工程" class="headerlink" title="1） 创建 java 工程"></a>1） 创建 java 工程</h5><p>使用idea 创建 java 的maven工程，取名：activiti01。</p>
<h5 id="2）-加入-maven-依赖的坐标（jar-包）"><a href="#2）-加入-maven-依赖的坐标（jar-包）" class="headerlink" title="2） 加入 maven 依赖的坐标（jar 包）"></a>2） 加入 maven 依赖的坐标（jar 包）</h5><p>首先需要在 java 工程中加入 ProcessEngine 所需要的 jar 包，包括：</p>
<p>1) activiti-engine-7.0.0.beta1.jar<br>2) activiti 依赖的 jar 包： mybatis、 alf4j、 log4j 等</p>
<p>3) activiti 依赖的 spring 包</p>
<p>4) mysql数据库驱动</p>
<p>5) 第三方数据连接池 dbcp<br>6) 单元测试 Junit-4.12.jar</p>
<p>我们使用 maven 来实现项目的构建，所以应当导入这些 jar 所对应的坐标到 pom.xml 文件中。</p>
<p>完整的依赖内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti.version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">activiti.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 模型处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 转换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn json数据转换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bpmn 布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- activiti 云支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-services-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 链接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3）-添加log4j日志配置"><a href="#3）-添加log4j日志配置" class="headerlink" title="3） 添加log4j日志配置"></a>3） 添加log4j日志配置</h5><p>我们使用log4j日志包，可以对日志进行配置</p>
<p>在resources 下创建log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE debug info warn error fatal</span></span><br><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span>=<span class="string">f:\act\activiti.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure>
<h5 id="4）-添加activiti配置文件"><a href="#4）-添加activiti配置文件" class="headerlink" title="4） 添加activiti配置文件"></a>4） 添加activiti配置文件</h5><p>我们使用activiti提供的默认方式来创建mysql的表。</p>
<p>默认方式的要求是在 resources 下创建 activiti.cfg.xml 文件，注意：默认方式目录和文件名不能修改，因为activiti的源码中已经设置，到固定的目录读取固定文件名的文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/contex</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="5）-在-activiti-cfg-xml-中进行配置"><a href="#5）-在-activiti-cfg-xml-中进行配置" class="headerlink" title="5） 在 activiti.cfg.xml 中进行配置"></a>5） 在 activiti.cfg.xml 中进行配置</h5><p>默认方式要在在activiti.cfg.xml中bean的名字叫processEngineConfiguration，名字不可修改</p>
<p>在这里有2中配置方式：一种是单独配置数据源，一种是不单独配置数据源</p>
<h6 id="1、直接配置processEngineConfiguration"><a href="#1、直接配置processEngineConfiguration" class="headerlink" title="1、直接配置processEngineConfiguration"></a>1、直接配置processEngineConfiguration</h6><p>processEngineConfiguration 用来创建 ProcessEngine，在创建 ProcessEngine 时会执行数据库的操作。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/contex</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认id对应的值 为processEngineConfiguration --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- processEngine Activiti的流程引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- activiti数据库表处理策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="2、配置数据源后，在processEngineConfiguration-引用"><a href="#2、配置数据源后，在processEngineConfiguration-引用" class="headerlink" title="2、配置数据源后，在processEngineConfiguration 引用"></a>2、配置数据源后，在processEngineConfiguration 引用</h6><p>首先配置数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/contex</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里可以使用 链接池 dbcp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用数据源 上面已经设置好了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- activiti数据库表处理策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="6）-java类编写程序生成表"><a href="#6）-java类编写程序生成表" class="headerlink" title="6） java类编写程序生成表"></a>6） java类编写程序生成表</h5><p>创建一个测试类，调用activiti的工具类，生成acitivti需要的数据库表。</p>
<p>直接使用activiti提供的工具类ProcessEngines，会默认读取classpath下的activiti.cfg.xml文件，读取其中的数据库配置，创建 ProcessEngine，在创建ProcessEngine 时会自动创建表。 </p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.activiti01.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngineConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 activiti的数据库表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateDbTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用classpath下的activiti.cfg.xml中的配置创建processEngine</span></span><br><span class="line">		ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">		System.out.println(processEngine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明：<br>1、运行以上程序段即可完成 activiti 表创建，通过改变 activiti.cfg.xml 中databaseSchemaUpdate 参数的值执行不同的数据表处理策略。<br>2 、 上 边 的 方法 getDefaultProcessEngine方法在执行时，从activiti.cfg.xml 中找固定的名称 processEngineConfiguration 。</p>
<p>在测试程序执行过程中，idea的控制台会输出日志，说明程序正在创建数据表，类似如下,注意红线内容：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134037.png" alt=""></p>
<p>执行完成后我们查看数据库， 创建了 25 张表，结果如下： </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134034.png" alt=""></p>
<p>到这，我们就完成activiti运行需要的数据库和表的创建。</p>
<h2 id="3-4-表结构介绍"><a href="#3-4-表结构介绍" class="headerlink" title="3.4 表结构介绍"></a>3.4 表结构介绍</h2><h3 id="3-4-1-表的命名规则和作用"><a href="#3-4-1-表的命名规则和作用" class="headerlink" title="3.4.1 表的命名规则和作用"></a>3.4.1 表的命名规则和作用</h3><p>看到刚才创建的表，我们发现Activiti 的表都以   ACT_   开头。 </p>
<p>第二部分是表示表的用途的两个字母标识。 用途也和服务的 API 对应。<br><strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。<br><strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。<br><strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。<br> <strong>ACT_GE</strong> ： GE 表示 general。 通用数据， 用于不同场景下 </p>
<h3 id="3-4-2-Activiti数据表介绍"><a href="#3-4-2-Activiti数据表介绍" class="headerlink" title="3.4.2 Activiti数据表介绍"></a>3.4.2 Activiti数据表介绍</h3><div class="table-container">
<table>
<thead>
<tr>
<th><strong>表分类</strong></th>
<th><strong>表名</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>一般数据</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>[ACT_GE_BYTEARRAY]</td>
<td>通用的流程定义和流程资源</td>
</tr>
<tr>
<td></td>
<td>[ACT_GE_PROPERTY]</td>
<td>系统相关属性</td>
</tr>
<tr>
<td>流程历史记录</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_ACTINST]</td>
<td>历史的流程实例</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_ATTACHMENT]</td>
<td>历史的流程附件</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_COMMENT]</td>
<td>历史的说明性信息</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_DETAIL]</td>
<td>历史的流程运行中的细节信息</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_IDENTITYLINK]</td>
<td>历史的流程运行过程中用户关系</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_PROCINST]</td>
<td>历史的流程实例</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_TASKINST]</td>
<td>历史的任务实例</td>
</tr>
<tr>
<td></td>
<td>[ACT_HI_VARINST]</td>
<td>历史的流程运行中的变量信息</td>
</tr>
<tr>
<td>流程定义表</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>[ACT_RE_DEPLOYMENT]</td>
<td>部署单元信息</td>
</tr>
<tr>
<td></td>
<td>[ACT_RE_MODEL]</td>
<td>模型信息</td>
</tr>
<tr>
<td></td>
<td>[ACT_RE_PROCDEF]</td>
<td>已部署的流程定义</td>
</tr>
<tr>
<td>运行实例表</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_EVENT_SUBSCR]</td>
<td>运行时事件</td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_EXECUTION]</td>
<td>运行时流程执行实例</td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_IDENTITYLINK]</td>
<td>运行时用户关系信息，存储任务节点与参与者的相关信息</td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_JOB]</td>
<td>运行时作业</td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_TASK]</td>
<td>运行时任务</td>
</tr>
<tr>
<td></td>
<td>[ACT_RU_VARIABLE]</td>
<td>运行时变量表</td>
</tr>
</tbody>
</table>
</div>
<h1 id="四、Activiti类关系图"><a href="#四、Activiti类关系图" class="headerlink" title="四、Activiti类关系图"></a>四、Activiti类关系图</h1><p>上面我们完成了Activiti数据库表的生成，java代码中我们调用Activiti的工具类，下面来了解Activiti的类关系</p>
<h2 id="4-1-类关系图"><a href="#4-1-类关系图" class="headerlink" title="4.1 类关系图"></a>4.1 类关系图</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134030.jpg" alt="img"></p>
<p>在新版本中，我们通过实验可以发现IdentityService，FormService两个Serivce都已经删除了。</p>
<p>所以后面我们对于这两个Service也不讲解了，但老版本中还是有这两个Service，同学们需要了解一下</p>
<h2 id="4-2-activiti-cfg-xml"><a href="#4-2-activiti-cfg-xml" class="headerlink" title="4.2 activiti.cfg.xml"></a>4.2 activiti.cfg.xml</h2><p>activiti的引擎配置文件，包括：ProcessEngineConfiguration的定义、数据源定义、事务管理器等，此文件其实就是一个spring配置文件。</p>
<h2 id="4-3-流程引擎配置类"><a href="#4-3-流程引擎配置类" class="headerlink" title="4.3 流程引擎配置类"></a>4.3 流程引擎配置类</h2><p>流程引擎的配置类（ProcessEngineConfiguration），通过ProcessEngineConfiguration可以创建工作流引擎ProceccEngine，常用的两种方法如下： </p>
<h3 id="4-3-1-StandaloneProcessEngineConfiguration"><a href="#4-3-1-StandaloneProcessEngineConfiguration" class="headerlink" title="4.3.1 StandaloneProcessEngineConfiguration"></a>4.3.1 StandaloneProcessEngineConfiguration</h3><p>使用StandaloneProcessEngineConfigurationActiviti可以单独运行，来创建ProcessEngine，Activiti会自己处理事务。</p>
<p> 配置文件方式：</p>
<p>通常在activiti.cfg.xml配置文件中定义一个id为 processEngineConfiguration 的bean.</p>
<p>方法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据库相关的信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库用户名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--actviti数据库表在生成时的策略  true - 如果数据库中已经存在相应的表，那么直接使用，如果不存在，那么会创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还可以加入连接池:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/contex</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在默认方式下 bean的id  固定为 processEngineConfiguration--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入上面配置好的 链接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--actviti数据库表在生成时的策略  true - 如果数据库中已经存在相应的表，那么直接使用，如果不存在，那么会创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-SpringProcessEngineConfiguration"><a href="#4-3-2-SpringProcessEngineConfiguration" class="headerlink" title="4.3.2 SpringProcessEngineConfiguration"></a>4.3.2 SpringProcessEngineConfiguration</h3><p>通过<strong>org.activiti.spring.SpringProcessEngineConfiguration 与</strong>Spring整合。 </p>
<p>创建spring与activiti的整合配置文件：</p>
<p>activity-spring.cfg.xml（名称可修改）</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 工作流引擎配置bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 使用spring事务管理器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 数据库策略 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drop-create&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- activiti的定时任务关闭 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源服务service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 流程运行service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 任务管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 历史管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getHistoryService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;identityService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getIdentityService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引擎管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;managementService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getManagementService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/activiti&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面，根据具体项目修改切点配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span>  <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.ihrm.service.impl.*.(..))&quot;</span>* /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="创建processEngineConfiguration"><a href="#创建processEngineConfiguration" class="headerlink" title="创建processEngineConfiguration"></a>创建processEngineConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;activiti.cfg.xml&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>​    上边的代码要求activiti.cfg.xml中必须有一个processEngineConfiguration的bean</p>
<p>也可以使用下边的方法，更改bean 的名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br></pre></td></tr></table></figure>
<h2 id="4-4-工作流引擎创建"><a href="#4-4-工作流引擎创建" class="headerlink" title="4.4 工作流引擎创建"></a>4.4 工作流引擎创建</h2><p>工作流引擎（ProcessEngine），相当于一个门面接口，通过ProcessEngineConfiguration创建processEngine，通过ProcessEngine创建各个service接口。</p>
<h3 id="4-4-1-默认创建方式"><a href="#4-4-1-默认创建方式" class="headerlink" title="4.4.1 默认创建方式"></a>4.4.1 默认创建方式</h3><p>将activiti.cfg.xml文件名及路径固定，且activiti.cfg.xml文件中有 processEngineConfiguration的配置， 可以使用如下代码创建processEngine:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接使用工具类 ProcessEngines，使用classpath下的activiti.cfg.xml中的配置创建processEngine</span></span><br><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">System.out.println(processEngine);</span><br></pre></td></tr></table></figure>
<h3 id="4-4-2-一般创建方式"><a href="#4-4-2-一般创建方式" class="headerlink" title="4.4.2 一般创建方式"></a>4.4.2 一般创建方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先构建ProcessEngineConfiguration</span></span><br><span class="line">ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;activiti.cfg.xml&quot;</span>);</span><br><span class="line"><span class="comment">//通过ProcessEngineConfiguration创建ProcessEngine，此时会创建数据库</span></span><br><span class="line">ProcessEngine processEngine = configuration.buildProcessEngine();</span><br></pre></td></tr></table></figure>
<h2 id="4-5-Servcie服务接口"><a href="#4-5-Servcie服务接口" class="headerlink" title="4.5 Servcie服务接口"></a>4.5 Servcie服务接口</h2><p>Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表</p>
<h3 id="4-5-1-Service创建方式"><a href="#4-5-1-Service创建方式" class="headerlink" title="4.5.1 Service创建方式"></a>4.5.1 Service创建方式</h3><p>通过ProcessEngine创建Service</p>
<p>方式如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br></pre></td></tr></table></figure>
<h3 id="4-5-2-Service总览"><a href="#4-5-2-Service总览" class="headerlink" title="4.5.2 Service总览"></a>4.5.2 Service总览</h3><div class="table-container">
<table>
<thead>
<tr>
<th>service名称</th>
<th>service作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>RepositoryService</td>
<td>activiti的资源管理类</td>
</tr>
<tr>
<td>RuntimeService</td>
<td>activiti的流程运行管理类</td>
</tr>
<tr>
<td>TaskService</td>
<td>activiti的任务管理类</td>
</tr>
<tr>
<td>HistoryService</td>
<td>activiti的历史管理类</td>
</tr>
<tr>
<td>ManagerService</td>
<td>activiti的引擎管理类</td>
</tr>
</tbody>
</table>
</div>
<p> 简单介绍：</p>
<p><strong>RepositoryService</strong></p>
<p>是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。</p>
<p>除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。</p>
<p>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</p>
<p>获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。</p>
<h4 id="RuntimeService"><a href="#RuntimeService" class="headerlink" title="RuntimeService"></a>RuntimeService</h4><p>Activiti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p>
<h4 id="TaskService"><a href="#TaskService" class="headerlink" title="TaskService"></a>TaskService</h4><p>Activiti的任务管理类。可以从这个类中获取任务的信息。</p>
<h4 id="HistoryService"><a href="#HistoryService" class="headerlink" title="HistoryService"></a>HistoryService</h4><p>Activiti的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p>
<h4 id="ManagementService"><a href="#ManagementService" class="headerlink" title="ManagementService"></a>ManagementService</h4><p>Activiti的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Activiti 系统的日常维护。</p>
<h1 id="五、Activiti入门"><a href="#五、Activiti入门" class="headerlink" title="五、Activiti入门"></a>五、Activiti入门</h1><p>在本章内容中，我们来创建一个Activiti工作流，并启动这个流程。</p>
<p>创建Activiti工作流主要包含以下几步：</p>
<p>1、定义流程，按照BPMN的规范，使用流程定义工具，用<strong>流程符号</strong>把整个流程描述出来</p>
<p>2、部署流程，把画好的流程定义文件，加载到数据库中，生成表的数据</p>
<p>3、启动流程，使用java代码来操作数据库表中的内容</p>
<h2 id="5-1-流程符号"><a href="#5-1-流程符号" class="headerlink" title="5.1 流程符号"></a>5.1 流程符号</h2><p>BPMN 2.0是业务流程建模符号2.0的缩写。</p>
<p>它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些<strong>符号</strong>来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。</p>
<p>目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。</p>
<p>接下来我们先来了解在流程设计中常见的 符号。</p>
<p>BPMN2.0的<strong>基本符合</strong>主要包含：</p>
<h3 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件 Event"></a>事件 Event</h3><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134023.png" alt="1574522151044"></p>
<h3 id="活动-Activity"><a href="#活动-Activity" class="headerlink" title="活动 Activity"></a>活动 Activity</h3><p>活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134020.png" alt="1574562726375"></p>
<h3 id="网关-GateWay"><a href="#网关-GateWay" class="headerlink" title="网关 GateWay"></a>网关 GateWay</h3><p>网关用来处理决策，有几种常用网关需要了解：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134017.png" alt="1574563600305"></p>
<h4 id="排他网关-x"><a href="#排他网关-x" class="headerlink" title="排他网关 (x)"></a>排他网关 (x)</h4><p>——只有一条路径会被选择。流程执行到该网关时，按照输出流的顺序逐个计算，当条件的计算结果为true时，继续执行当前网关的输出流；</p>
<p>​    如果多条线路计算结果都是 true，则会执行第一个值为 true 的线路。如果所有网关计算结果没有true，则引擎会抛出异常。</p>
<p>​    排他网关需要和条件顺序流结合使用，default 属性指定默认顺序流，当所有的条件不满足时会执行默认顺序流。</p>
<h4 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关 (+)"></a>并行网关 (+)</h4><p>——所有路径会被同时选择</p>
<p>​    拆分 —— 并行执行所有输出顺序流，为每一条顺序流创建一个并行执行线路。</p>
<p>​    合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。</p>
<h4 id="包容网关"><a href="#包容网关" class="headerlink" title="包容网关 (+)"></a>包容网关 (+)</h4><p>—— 可以同时执行多条线路，也可以在网关上设置条件</p>
<p>​    拆分 —— 计算每条线路上的表达式，当表达式计算结果为true时，创建一个并行线路并继续执行</p>
<p>​    合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。</p>
<h4 id="事件网关"><a href="#事件网关" class="headerlink" title="事件网关 (+)"></a>事件网关 (+)</h4><p>—— 专门为中间捕获事件设置的，允许设置多个输出流指向多个不同的中间捕获事件。当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态。</p>
<h3 id="流向-Flow"><a href="#流向-Flow" class="headerlink" title="流向 Flow"></a>流向 Flow</h3><p>流是连接两个流程节点的连线。常见的流向包含以下几种：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134014.png" alt="1574563937457"></p>
<h2 id="5-2-流程设计器使用"><a href="#5-2-流程设计器使用" class="headerlink" title="5.2 流程设计器使用"></a>5.2 流程设计器使用</h2><h3 id="Activiti-Designer使用"><a href="#Activiti-Designer使用" class="headerlink" title="Activiti-Designer使用"></a>Activiti-Designer使用</h3><h4 id="Palette（画板）"><a href="#Palette（画板）" class="headerlink" title="Palette（画板）"></a>Palette（画板）</h4><p>在idea中安装插件即可使用，画板中包括以下结点：</p>
<p>Connection—连接</p>
<p>Event—-事件</p>
<p>Task—-任务</p>
<p>Gateway—-网关</p>
<p>Container—容器</p>
<p>Boundary event—边界事件</p>
<p>Intermediate event- -中间事件</p>
<p>流程图设计完毕保存生成.bpmn文件</p>
<h4 id="新建流程-IDEA工具"><a href="#新建流程-IDEA工具" class="headerlink" title="新建流程(IDEA工具)"></a>新建流程(IDEA工具)</h4><p>首先选中存放图形的目录(选择resources下的bpmn目录)，点击菜单：New  -&gt; BpmnFile，如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134011.png" alt="1575106985823"></p>
<p>弹出如下图所示框，输入evection 表示 出差审批流程：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134009.png" alt="1575107231004"></p>
<p>起完名字evection后（默认扩展名为bpmn），就可以看到流程设计页面，如图所示：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134006.png" alt="1575107336431"></p>
<p>左侧区域是绘图区，右侧区域是palette画板区域</p>
<p>鼠标先点击画板的元素即可在左侧绘图</p>
<h3 id="绘制流程"><a href="#绘制流程" class="headerlink" title="绘制流程"></a>绘制流程</h3><p>使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的画板，最终效果如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134004.png" alt="1575107648105"></p>
<h3 id="指定流程定义Key"><a href="#指定流程定义Key" class="headerlink" title="指定流程定义Key"></a>指定流程定义Key</h3><p>流程定义key即流程定义的标识，通过properties视图查看流程的key</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134002.png" alt="1575115474865"></p>
<h3 id="指定任务负责人"><a href="#指定任务负责人" class="headerlink" title="指定任务负责人"></a>指定任务负责人</h3><p>在properties视图指定每个任务结点的负责人，如：填写出差申请的负责人为 zhangsan</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224134000.png" alt="1575121491752"></p>
<p>经理审批负责人为 jerry</p>
<p>总经理审批负责人为 jack</p>
<p>财务审批负责人为 rose</p>
<h1 id="六、流程操作"><a href="#六、流程操作" class="headerlink" title="六、流程操作"></a>六、流程操作</h1><h2 id="6-1-流程定义"><a href="#6-1-流程定义" class="headerlink" title="6.1 流程定义"></a>6.1 流程定义</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>流程定义是线下按照bpmn2.0标准去描述 业务流程，通常使用idea中的插件对业务流程进行建模。</p>
<p>使用idea下的designer设计器绘制流程，并会生成两个文件：.bpmn和.png</p>
<h3 id="bpmn文件"><a href="#bpmn文件" class="headerlink" title=".bpmn文件"></a>.bpmn文件</h3><p>使用activiti-desinger设计业务流程，会生成.bpmn文件，上面我们已经创建好了bpmn文件</p>
<p>BPMN 2.0根节点是definitions节点。 这个元素中，可以定义多个流程定义（不过我们建议每个文件只包含一个流程定义， 可以简化开发过程中的维护难度）。 注意，definitions元素 最少也要包含xmlns 和 targetNamespace的声明。 targetNamespace可以是任意值，它用来对流程实例进行分类。</p>
<p>流程定义部分：定义了流程每个结点的描述及结点之间的流程流转。</p>
<p>流程布局定义：定义流程每个结点在流程图上的位置坐标等信息。</p>
<h3 id="生成-png图片文件"><a href="#生成-png图片文件" class="headerlink" title="生成.png图片文件"></a>生成.png图片文件</h3><p>IDEA工具中的操作方式</p>
<h4 id="1、修改文件后缀为xml"><a href="#1、修改文件后缀为xml" class="headerlink" title="1、修改文件后缀为xml"></a>1、修改文件后缀为xml</h4><p>首先将evection.bpmn文件改名为evection.xml，如下图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133953.png" alt="1575108966935"></p>
<p>evection.xml修改前的bpmn文件，效果如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133950.png" alt="1575107648105"></p>
<h4 id="2、使用designer设计器打开-xml文件"><a href="#2、使用designer设计器打开-xml文件" class="headerlink" title="2、使用designer设计器打开.xml文件"></a>2、使用designer设计器打开.xml文件</h4><p>在evection.xml文件上面，点右键并选择Diagrams菜单，再选择Show BPMN2.0 Designer…</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133948.png" alt="1575109268443"></p>
<h4 id="3、查看打开的文件"><a href="#3、查看打开的文件" class="headerlink" title="3、查看打开的文件"></a>3、查看打开的文件</h4><p>打开后，却出现乱码，如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133830.png" alt="1575109366989"></p>
<h4 id="4、解决中文乱码"><a href="#4、解决中文乱码" class="headerlink" title="4、解决中文乱码"></a>4、解决中文乱码</h4><p>1、打开Settings，找到File Encodings，把encoding的选项都选择UTF-8</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133944.png" alt="1575112075626"></p>
<p>2、打开IDEA安装路径，找到如下的安装目录</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133941.png" alt="1575109627745"></p>
<p>根据自己所安装的版本来决定，我使用的是64位的idea，所以在idea64.exe.vmoptions文件的最后一行追加一条命令： -Dfile.encoding=UTF-8 </p>
<p>如下所示：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133939.png" alt="https://images2017.cnblogs.com/blog/963440/201712/963440-20171221132445475-1259807908.png"></p>
<p>一定注意，不要有空格，否则重启IDEA时会打不开，然后 重启IDEA。</p>
<p>如果以上方法已经做完，还出现乱码，就再修改一个文件，并在文件的末尾添加： -Dfile.encoding=UTF-8，然后重启idea，如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133936.png" alt="1575113551947"></p>
<p>最后重新在evection.xml文件上面，点右键并选择Diagrams菜单，再选择Show BPMN2.0 Designer…，看到生成图片，如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133933.png" alt="1575113951966"></p>
<p>到此，解决乱码问题</p>
<h4 id="5、导出为图片文件"><a href="#5、导出为图片文件" class="headerlink" title="5、导出为图片文件"></a>5、导出为图片文件</h4><p>点击Export To File的小图标，打开如下窗口，注意填写文件名及扩展名，选择好保存图片的位置：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224133929.png" alt="1575114245068"></p>
<p>然后，我们把png文件拷贝到resources下的bpmn目录，并且把evection.xml改名为evection.bpmn。</p>
<h2 id="6-2-流程定义部署"><a href="#6-2-流程定义部署" class="headerlink" title="6.2 流程定义部署"></a>6.2 流程定义部署</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>将上面在设计器中定义的流程部署到activiti数据库中，就是流程定义部署。</p>
<p>通过调用activiti的api将流程定义的bpmn和png两个文件一个一个添加部署到activiti中，也可以将两个文件打成zip包进行部署。</p>
<h3 id="单个文件部署方式"><a href="#单个文件部署方式" class="headerlink" title="单个文件部署方式"></a>单个文件部署方式</h3><p>分别将bpmn文件和png图片文件部署。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngines;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivitiDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeployment</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1、创建ProcessEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        2、得到RepositoryService实例</span></span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//        3、使用RepositoryService进行部署</span></span><br><span class="line">        Deployment deployment = repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(<span class="string">&quot;bpmn/evection.bpmn&quot;</span>) <span class="comment">// 添加bpmn资源</span></span><br><span class="line">                .addClasspathResource(<span class="string">&quot;bpmn/evection.png&quot;</span>)  <span class="comment">// 添加png资源</span></span><br><span class="line">                .name(<span class="string">&quot;出差申请流程&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line"><span class="comment">//        4、输出部署信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署id：&quot;</span> + deployment.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署名称：&quot;</span> + deployment.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。</p>
<h3 id="压缩包部署方式"><a href="#压缩包部署方式" class="headerlink" title="压缩包部署方式"></a>压缩包部署方式</h3><p>将evection.bpmn和evection.png压缩成zip包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deployProcessByZip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 定义zip输入流</span></span><br><span class="line">		InputStream inputStream = <span class="keyword">this</span></span><br><span class="line">				.getClass()</span><br><span class="line">				.getClassLoader()</span><br><span class="line">				.getResourceAsStream(</span><br><span class="line">						<span class="string">&quot;bpmn/evection.zip&quot;</span>);</span><br><span class="line">		ZipInputStream zipInputStream = <span class="keyword">new</span> ZipInputStream(inputStream);</span><br><span class="line">		<span class="comment">// 获取repositoryService</span></span><br><span class="line">		RepositoryService repositoryService = processEngine</span><br><span class="line">				.getRepositoryService();</span><br><span class="line">		<span class="comment">// 流程部署</span></span><br><span class="line">		Deployment deployment = repositoryService.createDeployment()</span><br><span class="line">				.addZipInputStream(zipInputStream)</span><br><span class="line">				.deploy();</span><br><span class="line">		System.out.println(<span class="string">&quot;流程部署id：&quot;</span> + deployment.getId());</span><br><span class="line">		System.out.println(<span class="string">&quot;流程部署名称：&quot;</span> + deployment.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。</p>
<h3 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h3><p>流程定义部署后操作activiti的3张表如下：</p>
<p>act_re_deployment     流程定义部署表，每部署一次增加一条记录</p>
<p>act_re_procdef            流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p>
<p>act_ge_bytearray        流程资源表 </p>
<p>接下来我们来看看，写入了什么数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_re_deployment <span class="comment">#流程定义部署表，记录流程部署信息</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="E:/Desktop/Activiti/assets/1575116732147.png" alt="1575116732147"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_re_procdef <span class="comment">#流程定义表，记录流程定义信息</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>注意，KEY 这个字段是用来唯一识别不同流程的关键字</p>
<p><img src="E:/Desktop/Activiti/assets/1575116797665.png" alt="1575116797665"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_ge_bytearray <span class="comment">#资源表 </span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="E:/Desktop/Activiti/assets/1575116832196.png" alt="1575116832196"></p>
<p> 注意：</p>
<p>act_re_deployment和act_re_procdef一对多关系，一次部署在流程部署表生成一条记录，但一次部署可以部署多个流程定义，每个流程定义在流程定义表生成一条记录。每一个流程定义在act_ge_bytearray会存在两个资源记录，bpmn和png。</p>
<p>建议：一次部署一个流程，这样部署表和流程定义表是一对一有关系，方便读取流程部署及流程定义信息。</p>
<h2 id="6-3-启动流程实例"><a href="#6-3-启动流程实例" class="headerlink" title="6.3 启动流程实例"></a>6.3 启动流程实例</h2><p>流程定义部署在activiti后就可以通过工作流管理业务流程了，也就是说上边部署的出差申请流程可以使用了。</p>
<p>针对该流程，启动一个流程表示发起一个新的出差申请单，这就相当于java类与java对象的关系，类定义好后需要new创建一个对象使用，当然可以new多个对象。对于请出差申请流程，张三发起一个出差申请单需要启动一个流程实例，出差申请单发起一个出差单也需要启动一个流程实例。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1、创建ProcessEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        2、获取RunTimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        3、根据流程定义Id启动流程</span></span><br><span class="line">        ProcessInstance processInstance = runtimeService</span><br><span class="line">                .startProcessInstanceByKey(<span class="string">&quot;myEvection&quot;</span>);</span><br><span class="line"><span class="comment">//        输出内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程定义id：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id：&quot;</span> + processInstance.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前活动Id：&quot;</span> + processInstance.getActivityId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出内容如下：</p>
<p><img src="E:/Desktop/Activiti/assets/1575117588624.png" alt="1575117588624"></p>
<p><strong>操作数据表</strong></p>
<p>act_hi_actinst     流程实例执行历史</p>
<p>act_hi_identitylink  流程的参与用户历史信息</p>
<p>act_hi_procinst      流程实例历史信息</p>
<p>act_hi_taskinst       流程任务历史信息</p>
<p>act_ru_execution   流程执行信息</p>
<p>act_ru_identitylink  流程的参与用户信息</p>
<p>act_ru_task              任务信息</p>
<h2 id="6-4-任务查询"><a href="#6-4-任务查询" class="headerlink" title="6.4 任务查询"></a>6.4 任务查询</h2><p>流程启动后，任务的负责人就可以查询自己当前需要处理的任务，查询出来的任务都是该用户的待办任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前个人待执行的任务</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindPersonalTaskList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        任务负责人</span></span><br><span class="line">        String assignee = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        创建TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//        根据流程key 和 任务负责人 查询任务</span></span><br><span class="line">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">                .taskAssignee(assignee)<span class="comment">//只查询该任务负责人的任务</span></span><br><span class="line">                .list();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;流程实例id：&quot;</span> + task.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务id：&quot;</span> + task.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务负责人：&quot;</span> + task.getAssignee());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务名称：&quot;</span> + task.getName());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">流程实例id：2501</span><br><span class="line">任务id：2505</span><br><span class="line">任务负责人：zhangsan</span><br><span class="line">任务名称：创建出差申请</span><br></pre></td></tr></table></figure>
<h2 id="6-5-流程任务处理"><a href="#6-5-流程任务处理" class="headerlink" title="6.5 流程任务处理"></a>6.5 流程任务处理</h2><p>任务负责人查询待办任务，选择任务进行处理，完成任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完成任务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取taskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        根据流程key 和 任务的负责人 查询任务</span></span><br><span class="line"><span class="comment">//        返回一个任务对象</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">                .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)  <span class="comment">//要查询的负责人</span></span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        完成任务,参数：任务id</span></span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-6-流程定义信息查询"><a href="#6-6-流程定义信息查询" class="headerlink" title="6.6 流程定义信息查询"></a>6.6 流程定义信息查询</h2><p>查询流程相关信息，包含流程定义，流程部署，流程定义版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryProcessDefinition</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//        获取引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        repositoryService</span></span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//        得到ProcessDefinitionQuery 对象</span></span><br><span class="line">        ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();</span><br><span class="line"><span class="comment">//          查询出当前所有的流程定义</span></span><br><span class="line"><span class="comment">//          条件：processDefinitionKey =evection</span></span><br><span class="line"><span class="comment">//          orderByProcessDefinitionVersion 按照版本排序</span></span><br><span class="line"><span class="comment">//        desc倒叙</span></span><br><span class="line"><span class="comment">//        list 返回集合</span></span><br><span class="line">        List&lt;ProcessDefinition&gt; definitionList = processDefinitionQuery.processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>)</span><br><span class="line">                .orderByProcessDefinitionVersion()</span><br><span class="line">                .desc()</span><br><span class="line">                .list();</span><br><span class="line"><span class="comment">//      输出流程定义信息</span></span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : definitionList) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 id=&quot;</span>+processDefinition.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 name=&quot;</span>+processDefinition.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 key=&quot;</span>+processDefinition.getKey());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 Version=&quot;</span>+processDefinition.getVersion());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程部署ID =&quot;</span>+processDefinition.getDeploymentId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">流程定义id：myEvection:1:4</span><br><span class="line">流程定义名称：出差申请单</span><br><span class="line">流程定义key：myEvection</span><br><span class="line">流程定义版本：1</span><br></pre></td></tr></table></figure>
<h2 id="6-7-流程删除"><a href="#6-7-流程删除" class="headerlink" title="6.7 流程删除"></a>6.7 流程删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDeployment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 流程部署id</span></span><br><span class="line">		String deploymentId = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">		</span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">// 通过流程引擎获取repositoryService</span></span><br><span class="line">		RepositoryService repositoryService = processEngine</span><br><span class="line">				.getRepositoryService();</span><br><span class="line">		<span class="comment">//删除流程定义，如果该流程定义已有流程实例启动则删除时出错</span></span><br><span class="line">		repositoryService.deleteDeployment(deploymentId);</span><br><span class="line">		<span class="comment">//设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式，如果流程</span></span><br><span class="line">		<span class="comment">//repositoryService.deleteDeployment(deploymentId, true);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>1)       使用repositoryService删除流程定义，历史表信息不会被删除</p>
<p>2)       如果该流程定义下没有正在运行的流程，则可以用普通删除。</p>
<p>如果该流程定义下存在已经运行的流程，使用普通删除报错，可用级联删除方法将流程及相关记录全部删除。</p>
<p>先删除没有完成流程节点，最后就可以完全删除流程定义信息</p>
<p>项目开发中级联删除操作一般只开放给超级管理员使用.</p>
<h2 id="6-8-流程资源下载"><a href="#6-8-流程资源下载" class="headerlink" title="6.8 流程资源下载"></a>6.8 流程资源下载</h2><p>现在我们的流程资源文件已经上传到数据库了，如果其他用户想要查看这些资源文件，可以从数据库中把资源文件下载到本地。</p>
<p>解决方案有：</p>
<p>1、jdbc对blob类型，clob类型数据读取出来，保存到文件目录</p>
<p>2、使用activiti的api来实现</p>
<p>使用commons-io.jar 解决IO的操作</p>
<p>引入commons-io依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过流程定义对象获取流程定义资源，获取bpmn和png</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDeployment</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取repositoryService</span></span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//        根据部署id 删除部署信息,如果想要级联删除，可以添加第二个参数，true</span></span><br><span class="line">        repositoryService.deleteDeployment(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">queryBpmnFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        1、得到引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        2、获取repositoryService</span></span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//        3、得到查询器：ProcessDefinitionQuery，设置查询条件,得到想要的流程定义</span></span><br><span class="line">        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line"><span class="comment">//        4、通过流程定义信息，得到部署ID</span></span><br><span class="line">        String deploymentId = processDefinition.getDeploymentId();</span><br><span class="line"><span class="comment">//        5、通过repositoryService的方法，实现读取图片信息和bpmn信息</span></span><br><span class="line"><span class="comment">//        png图片的流</span></span><br><span class="line">        InputStream pngInput = repositoryService.getResourceAsStream(deploymentId, processDefinition.getDiagramResourceName());</span><br><span class="line"><span class="comment">//        bpmn文件的流</span></span><br><span class="line">        InputStream bpmnInput = repositoryService.getResourceAsStream(deploymentId, processDefinition.getResourceName());</span><br><span class="line"><span class="comment">//        6、构造OutputStream流</span></span><br><span class="line">        File file_png = <span class="keyword">new</span> File(<span class="string">&quot;d:/evectionflow01.png&quot;</span>);</span><br><span class="line">        File file_bpmn = <span class="keyword">new</span> File(<span class="string">&quot;d:/evectionflow01.bpmn&quot;</span>);</span><br><span class="line">        FileOutputStream bpmnOut = <span class="keyword">new</span> FileOutputStream(file_bpmn);</span><br><span class="line">        FileOutputStream pngOut = <span class="keyword">new</span> FileOutputStream(file_png);</span><br><span class="line"><span class="comment">//        7、输入流，输出流的转换</span></span><br><span class="line">        IOUtils.copy(pngInput,pngOut);</span><br><span class="line">        IOUtils.copy(bpmnInput,bpmnOut);</span><br><span class="line"><span class="comment">//        8、关闭流</span></span><br><span class="line">        pngOut.close();</span><br><span class="line">        bpmnOut.close();</span><br><span class="line">        pngInput.close();</span><br><span class="line">        bpmnInput.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>1)       deploymentId为流程部署ID</p>
<p>2)       resource<em>name为act_ge_bytearray表中NAME</em>列的值</p>
<p>3)       使用repositoryService的getDeploymentResourceNames方法可以获取指定部署下得所有文件的名称</p>
<p>4)       使用repositoryService的getResourceAsStream方法传入部署ID和资源图片名称可以获取部署下指定名称文件的输入流</p>
<p>最后的将输入流中的图片资源进行输出。</p>
<h2 id="6-9-流程历史信息的查看"><a href="#6-9-流程历史信息的查看" class="headerlink" title="6.9 流程历史信息的查看"></a>6.9 流程历史信息的查看</h2><p>即使流程定义已经删除了，流程执行的历史信息通过前面的分析，依然保存在activiti的act<em>hi</em>*相关的表中。所以我们还是可以查询流程执行的历史信息，可以通过HistoryService来查看相关的历史记录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看历史信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHistoryInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//      获取引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取HistoryService</span></span><br><span class="line">        HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line"><span class="comment">//        获取 actinst表的查询对象</span></span><br><span class="line">        HistoricActivityInstanceQuery instanceQuery = historyService.createHistoricActivityInstanceQuery();</span><br><span class="line"><span class="comment">//        查询 actinst表，条件：根据 InstanceId 查询</span></span><br><span class="line"><span class="comment">//        instanceQuery.processInstanceId(&quot;2501&quot;);</span></span><br><span class="line"><span class="comment">//        查询 actinst表，条件：根据 DefinitionId 查询</span></span><br><span class="line">        instanceQuery.processDefinitionId(<span class="string">&quot;myEvection:1:4&quot;</span>);</span><br><span class="line"><span class="comment">//        增加排序操作,orderByHistoricActivityInstanceStartTime 根据开始时间排序 asc 升序</span></span><br><span class="line">        instanceQuery.orderByHistoricActivityInstanceStartTime().asc();</span><br><span class="line"><span class="comment">//        查询所有内容</span></span><br><span class="line">        List&lt;HistoricActivityInstance&gt; activityInstanceList = instanceQuery.list();</span><br><span class="line"><span class="comment">//        输出</span></span><br><span class="line">        <span class="keyword">for</span> (HistoricActivityInstance hi : activityInstanceList) &#123;</span><br><span class="line">            System.out.println(hi.getActivityId());</span><br><span class="line">            System.out.println(hi.getActivityName());</span><br><span class="line">            System.out.println(hi.getProcessDefinitionId());</span><br><span class="line">            System.out.println(hi.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;==========================&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>工作流引擎</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti进阶</title>
    <url>/posts/60780.html</url>
    <content><![CDATA[<h1 id="Activiti进阶"><a href="#Activiti进阶" class="headerlink" title="Activiti进阶"></a>Activiti进阶</h1><h2 id="一、流程实例"><a href="#一、流程实例" class="headerlink" title="一、流程实例"></a>一、流程实例</h2><h3 id="什么是流程实例"><a href="#什么是流程实例" class="headerlink" title="什么是流程实例"></a>什么是流程实例</h3><p><strong>流程实例</strong>（ProcessInstance）代表流程定义的执行实例。</p>
<p>一个流程实例包括了所有的运行节点。我们可以利用这个对象来了解当前流程实例的进度等信息。</p>
<p>例如：用户或程序按照流程定义内容发起一个流程，这就是一个流程实例。</p>
<p>流程定义和流程实例的图解：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140542.png" alt="1577498489089"></p>
<h3 id="启动流程实例-并添加Businesskey（业务标识）"><a href="#启动流程实例-并添加Businesskey（业务标识）" class="headerlink" title="启动流程实例 并添加Businesskey（业务标识）"></a>启动流程实例 并添加Businesskey（业务标识）</h3><p>流程定义部署在activiti后，就可以在系统中通过activiti去管理该流程的执行，执行流程表示流程的一次执行。</p>
<p>比如部署系统出差流程后，如果某用户要申请出差这时就需要执行这个流程，如果另外一个用户也要申请出差则也需要执行该流程，每个执行互不影响，每个执行是单独的流程实例。</p>
<p>启动流程实例时，指定的businesskey，就会在act_ru_execution #流程实例的执行表中存储businesskey。</p>
<p>Businesskey：业务标识，通常为业务表的主键，业务标识和流程实例一一对应。业务标识来源于业务系统。存储业务标识就是根据业务标识来关联查询业务系统的数据。</p>
<p>比如：出差流程启动一个流程实例，就可以将出差单的id作为业务标识存储到activiti中，将来查询activiti的流程实例信息就可以获取出差单的id从而关联查询业务系统数据库得到出差单信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例，添加businessKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBusinessKey</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1、得到ProcessEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        2、得到RunTimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        3、启动流程实例，同时还要指定业务标识businessKey，也就是出差申请单id，这里是1001</span></span><br><span class="line">        ProcessInstance processInstance = runtimeService.</span><br><span class="line">                startProcessInstanceByKey(<span class="string">&quot;myEvection&quot;</span>,<span class="string">&quot;1001&quot;</span>);</span><br><span class="line"><span class="comment">//        4、输出processInstance相关属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;业务id==&quot;</span>+processInstance.getBusinessKey());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Activiti的act_ru_execution中存储业务标识：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140543.png" alt="1577261568103"></p>
<h3 id="操作数据库表"><a href="#操作数据库表" class="headerlink" title="操作数据库表"></a>操作数据库表</h3><p>启动流程实例，操作如下数据库表：</p>
<p>SELECT * FROM act_ru_execution #流程实例执行表，记录当前流程实例的执行情况</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140544.png" alt="1577499812252"></p>
<p>说明：</p>
<p>流程实例执行，如果当前只有一个分支时，一个流程实例只有一条记录且执行表的主键id和流程实例id相同，如果当前有多个分支正在运行则该执行表中有多条记录，存在执行表的主键和流程实例id不相同的记录。<strong>不论当前有几个分支总会有一条记录的执行表的主键和流程实例</strong>id<strong>相同</strong> </p>
<p>一个流程实例运行完成，此表中与流程实例相关的记录删除。</p>
<p>SELECT * FROM act_ru_task #任务执行表，记录当前执行的任务</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140545.png" alt="1577499771599"></p>
<p>说明：启动流程实例，流程当前执行到第一个任务结点，此表会插入一条记录表示当前任务的执行情况，如果任务完成则记录删除。</p>
<p>SELECT * FROM act_ru_identitylink #任务参与者，记录当前参与任务的用户或组</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140546.png" alt="1577499842115"></p>
<p>SELECT * FROM act_hi_procinst #流程实例历史表</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140547.png" alt="1577499914186"></p>
<p>流程实例启动，会在此表插入一条记录，流程实例运行完成记录也不会删除。</p>
<p> SELECT * FROM act_hi_taskinst  #任务历史表，记录所有任务</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140548.png" alt="1577499985580"></p>
<p>开始一个任务，不仅在act_ru_task表插入记录，也会在历史任务表插入一条记录，任务历史表的主键就是任务id，任务完成此表记录不删除。</p>
<p> SELECT * FROM act_hi_actinst  #活动历史表，记录所有活动</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140549.png" alt="1577500036347"></p>
<p>活动包括任务，所以此表中不仅记录了任务，还记录了流程执行过程的其它活动，比如开始事件、结束事件。</p>
<h3 id="查询流程实例"><a href="#查询流程实例" class="headerlink" title="查询流程实例"></a>查询流程实例</h3><p>流程在运行过程中可以查询流程实例的状态，当前运行结点等信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryProcessInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 流程定义key</span></span><br><span class="line">		String processDefinitionKey = <span class="string">&quot;evection&quot;</span>;</span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">		<span class="comment">// 获取RunTimeService</span></span><br><span class="line">		RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">		List&lt;ProcessInstance&gt; list = runtimeService</span><br><span class="line">				.createProcessInstanceQuery()</span><br><span class="line">				.processDefinitionKey(processDefinitionKey)<span class="comment">//</span></span><br><span class="line">				.list();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (ProcessInstance processInstance : list) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;流程实例id：&quot;</span></span><br><span class="line">					+ processInstance.getProcessInstanceId());</span><br><span class="line">			System.out.println(<span class="string">&quot;所属流程定义id：&quot;</span></span><br><span class="line">					+ processInstance.getProcessDefinitionId());</span><br><span class="line">			System.out.println(<span class="string">&quot;是否执行完成：&quot;</span> + processInstance.isEnded());</span><br><span class="line">			System.out.println(<span class="string">&quot;是否暂停：&quot;</span> + processInstance.isSuspended());</span><br><span class="line">			System.out.println(<span class="string">&quot;当前活动标识：&quot;</span> + processInstance.getActivityId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="关联BusinessKey"><a href="#关联BusinessKey" class="headerlink" title="关联BusinessKey"></a>关联BusinessKey</h4><p>需求：</p>
<p>在activiti实际应用时，查询流程实例列表时可能要显示出业务系统的一些相关信息，比如：查询当前运行的出差流程列表需要将出差单名称、出差天数等信息显示出来，出差天数等信息在业务系统中存在，而并没有在activiti数据库中存在，所以是无法通过activiti的api查询到出差天数等信息。</p>
<p>实现：</p>
<p>在查询流程实例时，通过businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。</p>
<p>通过下面的代码就可以获取activiti中所对应实例保存的业务Key。而这个业务Key一般都会保存相关联的业务操作表的主键，再通过主键ID去查询业务信息，比如通过出差单的ID，去查询更多的请假信息（出差人，出差时间，出差天数，出差目的地等）</p>
<p>String businessKey = processInstance.getBusinessKey();</p>
<p>在activiti的act_ru_execution表，字段BUSINESS_KEY就是存放业务KEY的。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140550.png" alt="1574136375409"></p>
<h3 id="挂起、激活流程实例"><a href="#挂起、激活流程实例" class="headerlink" title="挂起、激活流程实例"></a>挂起、激活流程实例</h3><p>某些情况可能由于流程变更需要将当前运行的流程暂停而不是直接删除，流程暂停后将不会继续执行。</p>
<h4 id="全部流程实例挂起"><a href="#全部流程实例挂起" class="headerlink" title="全部流程实例挂起"></a>全部流程实例挂起</h4><p>操作流程定义为挂起状态，该流程定义下边所有的流程实例全部暂停：</p>
<p>流程定义为挂起状态该流程定义将不允许启动新的流程实例，同时该流程定义下所有的流程实例将全部挂起暂停执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全部流程实例挂起与激活</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SuspendAllProcessInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取repositoryService</span></span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//        查询流程定义的对象</span></span><br><span class="line">        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().</span><br><span class="line">                processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>).</span><br><span class="line">                singleResult();</span><br><span class="line"><span class="comment">//        得到当前流程定义的实例是否都为暂停状态</span></span><br><span class="line">        <span class="keyword">boolean</span> suspended = processDefinition.isSuspended();</span><br><span class="line"><span class="comment">//        流程定义id</span></span><br><span class="line">        String processDefinitionId = processDefinition.getId();</span><br><span class="line"><span class="comment">//        判断是否为暂停</span></span><br><span class="line">        <span class="keyword">if</span>(suspended)&#123;</span><br><span class="line"><span class="comment">//         如果是暂停，可以执行激活操作 ,参数1 ：流程定义id ，参数2：是否激活，参数3：激活时间</span></span><br><span class="line">            repositoryService.activateProcessDefinitionById(processDefinitionId,</span><br><span class="line">                    <span class="keyword">true</span>,</span><br><span class="line">                    <span class="keyword">null</span></span><br><span class="line">            );</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已激活&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//          如果是激活状态，可以暂停，参数1 ：流程定义id ，参数2：是否暂停，参数3：暂停时间</span></span><br><span class="line">            repositoryService.suspendProcessDefinitionById(processDefinitionId,</span><br><span class="line">                    <span class="keyword">true</span>,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已挂起&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="单个流程实例挂起"><a href="#单个流程实例挂起" class="headerlink" title="单个流程实例挂起"></a>单个流程实例挂起</h4><p>操作流程实例对象，针对单个流程执行挂起操作，某个流程实例挂起则此流程不再继续执行，完成该流程实例的当前任务将报异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个流程实例挂起与激活</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SuspendSingleProcessInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        RuntimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        查询流程定义的对象</span></span><br><span class="line">        ProcessInstance processInstance = runtimeService.</span><br><span class="line">                createProcessInstanceQuery().</span><br><span class="line">                processInstanceId(<span class="string">&quot;15001&quot;</span>).</span><br><span class="line">                singleResult();</span><br><span class="line"><span class="comment">//        得到当前流程定义的实例是否都为暂停状态</span></span><br><span class="line">        <span class="keyword">boolean</span> suspended = processInstance.isSuspended();</span><br><span class="line"><span class="comment">//        流程定义id</span></span><br><span class="line">        String processDefinitionId = processInstance.getId();</span><br><span class="line"><span class="comment">//        判断是否为暂停</span></span><br><span class="line">        <span class="keyword">if</span>(suspended)&#123;</span><br><span class="line"><span class="comment">//         如果是暂停，可以执行激活操作 ,参数：流程定义id</span></span><br><span class="line">            runtimeService.activateProcessInstanceById(processDefinitionId);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已激活&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//          如果是激活状态，可以暂停，参数：流程定义id</span></span><br><span class="line">            runtimeService.suspendProcessInstanceById( processDefinitionId);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已挂起&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试完成个人任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取操作任务的服务 TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//        完成任务,参数：流程实例id,完成zhangsan的任务</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .processInstanceId(<span class="string">&quot;15001&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;rose&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id=&quot;</span>+task.getProcessInstanceId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务Id=&quot;</span>+task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务负责人=&quot;</span>+task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名称=&quot;</span>+task.getName());</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、个人任务"><a href="#二、个人任务" class="headerlink" title="二、个人任务"></a>二、个人任务</h2><h3 id="2-1、分配任务负责人"><a href="#2-1、分配任务负责人" class="headerlink" title="2.1、分配任务负责人"></a>2.1、分配任务负责人</h3><h4 id="2-1-1、固定分配"><a href="#2-1-1、固定分配" class="headerlink" title="2.1.1、固定分配"></a>2.1.1、固定分配</h4><p>在进行业务流程建模时指定固定的任务负责人， 如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140551.png" alt="1575121491752"></p>
<p>并在 properties 视图中，填写 Assignee 项为任务负责人。 </p>
<h4 id="2-1-2、表达式分配"><a href="#2-1-2、表达式分配" class="headerlink" title="2.1.2、表达式分配"></a>2.1.2、表达式分配</h4><p>由于固定分配方式，任务只管一步一步执行任务，执行到每一个任务将按照 bpmn 的配置去分配任<br>务负责人。 </p>
<h5 id="2-1-2-1、UEL-表达式"><a href="#2-1-2-1、UEL-表达式" class="headerlink" title="2.1.2.1、UEL 表达式"></a>2.1.2.1、UEL 表达式</h5><p>Activiti 使用 UEL 表达式， UEL 是 java EE6 规范的一部分， UEL（Unified Expression Language）即 统一表达式语言， activiti 支持两个 UEL 表达式： UEL-value 和 UEL-method。 </p>
<h6 id="1）UEL-value-定义"><a href="#1）UEL-value-定义" class="headerlink" title="1）UEL-value 定义"></a>1）UEL-value 定义</h6><p>如图： </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140552.png" alt="1577503716131"></p>
<p>assignee 这个变量是 activiti 的一个流程变量，</p>
<p>或者使用这种方式定义：</p>
<p>如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140553.png" alt="1577503804336"></p>
<p> user 也是 activiti 的一个流程变量， user.assignee 表示通过调用 user 的 getter 方法获取值。 </p>
<h6 id="2）UEL-method-方式"><a href="#2）UEL-method-方式" class="headerlink" title="2）UEL-method 方式"></a>2）UEL-method 方式</h6><p>如图： </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140554.png" alt=""></p>
<p>userBean 是 spring 容器中的一个 bean，表示调用该 bean 的 getUserId()方法。 </p>
<h6 id="3）UEL-method-与-UEL-value-结合"><a href="#3）UEL-method-与-UEL-value-结合" class="headerlink" title="3）UEL-method 与 UEL-value 结合"></a>3）UEL-method 与 UEL-value 结合</h6><p>再比如：<br>${ldapService.findManagerForEmployee(emp)}<br>ldapService 是 spring 容器的一个 bean，findManagerForEmployee 是该 bean 的一个方法，emp 是 activiti<br>流程变量， emp 作为参数传到 ldapService.findManagerForEmployee 方法中。 </p>
<h6 id="4）其它"><a href="#4）其它" class="headerlink" title="4）其它"></a>4）其它</h6><p>表达式支持解析基础类型、 bean、 list、 array 和 map，也可作为条件判断。<br>如下：<br>${order.price &gt; 100 &amp;&amp; order.price &lt; 250} </p>
<h5 id="2-1-2-2、编写代码配置负责人"><a href="#2-1-2-2、编写代码配置负责人" class="headerlink" title="2.1.2.2、编写代码配置负责人"></a>2.1.2.2、编写代码配置负责人</h5><h6 id="1-定义任务分配流程变量"><a href="#1-定义任务分配流程变量" class="headerlink" title="1)定义任务分配流程变量"></a>1)定义任务分配流程变量</h6><p>如图：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140552.png" alt="1577503716131"></p>
<h6 id="2-设置流程变量"><a href="#2-设置流程变量" class="headerlink" title="2)设置流程变量"></a>2)设置流程变量</h6><p>在启动流程实例时设置流程变量，如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置流程负责人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assigneeUEL</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//      获取流程引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取 RuntimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        设置assignee的取值，用户可以在界面上设置流程的执行</span></span><br><span class="line">        Map&lt;String,Object&gt; assigneeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        assigneeMap.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        assigneeMap.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李经理&quot;</span>);</span><br><span class="line">        assigneeMap.put(<span class="string">&quot;assignee2&quot;</span>,<span class="string">&quot;王总经理&quot;</span>);</span><br><span class="line">        assigneeMap.put(<span class="string">&quot;assignee3&quot;</span>,<span class="string">&quot;赵财务&quot;</span>);</span><br><span class="line"><span class="comment">//        启动流程实例，同时还要设置流程定义的assignee的值</span></span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;myEvection1&quot;</span>,assigneeMap);</span><br><span class="line"><span class="comment">//       输出</span></span><br><span class="line">        System.out.println(processEngine.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行成功后，可以在act_ru_variable表中看到刚才map中的数据</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140555.png" alt=""></p>
<h5 id="2-1-2-3、注意事项"><a href="#2-1-2-3、注意事项" class="headerlink" title="2.1.2.3、注意事项"></a>2.1.2.3、注意事项</h5><p>由于使用了表达式分配，必须保证在任务执行过程表达式执行成功，比如：<br>某个任务使用了表达式${order.price &gt; 100 &amp;&amp; order.price &lt; 250}，当执行该任务时必须保证 order 在<br>流程变量中存在，否则 activiti 异常。 </p>
<h4 id="2-1-3、监听器分配"><a href="#2-1-3、监听器分配" class="headerlink" title="2.1.3、监听器分配"></a>2.1.3、监听器分配</h4><p>可以使用监听器来完成很多Activiti流程的业务。</p>
<p>在本章我们使用监听器的方式来指定负责人，那么在流程设计时就不需要指定assignee。</p>
<p>任务监听器是发生对应的任务相关事件时执行自定义 java 逻辑 或表达式。<br>任务相当事件包括：  </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140556.png" alt="1577506842889"></p>
<p>Event的选项包含：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create：任务创建后触发</span><br><span class="line">Assignment：任务分配后触发</span><br><span class="line">Delete：任务完成后触发</span><br><span class="line">All：所有事件发生都触发</span><br></pre></td></tr></table></figure>
<p>定义任务监听类，且类必须实现 org.activiti.engine.delegate.TaskListener 接口 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTaskListener</span> <span class="keyword">implements</span> <span class="title">TaskListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(DelegateTask delegateTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delegateTask.getName().equals(<span class="string">&quot;创建出差申请&quot;</span>)&amp;&amp;</span><br><span class="line">                delegateTask.getEventName().equals(<span class="string">&quot;create&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//这里指定任务负责人</span></span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>DelegateTask对象的内容如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140557.png" alt=""></p>
<h5 id="2-1-3-1、注意事项"><a href="#2-1-3-1、注意事项" class="headerlink" title="2.1.3.1、注意事项"></a>2.1.3.1、注意事项</h5><p>使用监听器分配方式，按照监听事件去执行监听类的 notify 方法，方法如果不能正常执行也会影响<br>任务的执行。 </p>
<h3 id="2-2、查询任务"><a href="#2-2、查询任务" class="headerlink" title="2.2、查询任务"></a>2.2、查询任务</h3><h4 id="查询任务负责人的待办任务"><a href="#查询任务负责人的待办任务" class="headerlink" title="查询任务负责人的待办任务"></a>查询任务负责人的待办任务</h4><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询当前个人待执行的任务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPersonalTaskList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 流程定义key</span></span><br><span class="line">    String processDefinitionKey = <span class="string">&quot;myEvection1&quot;</span>;</span><br><span class="line">    <span class="comment">// 任务负责人</span></span><br><span class="line">    String assignee = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取TaskService</span></span><br><span class="line">    TaskService taskService = processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; taskList = taskService.createTaskQuery()</span><br><span class="line">    	.processDefinitionKey(processDefinitionKey)</span><br><span class="line">    	.includeProcessVariables()</span><br><span class="line">        .taskAssignee(assignee)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id： &quot;</span> + task.getProcessInstanceId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务id： &quot;</span> + task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务负责人： &quot;</span> + task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名称： &quot;</span> + task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关联-businessKey"><a href="#关联-businessKey" class="headerlink" title="关联 businessKey"></a>关联 businessKey</h4><p>需求：<br>在 activiti 实际应用时，查询待办任务可能要显示出业务系统的一些相关信息。</p>
<p>比如：查询待审批出差任务列表需要将出差单的日期、 出差天数等信息显示出来。</p>
<p>出差天数等信息在业务系统中存在，而并没有在 activiti 数据库中存在，所以是无法通过 activiti 的 api 查询到出差天数等信息。<br>实现：<br>在查询待办任务时，通过 businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findProcessInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//        获取RuntimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        查询流程定义的对象</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection1&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line"><span class="comment">//        使用task对象获取实例id</span></span><br><span class="line">        String processInstanceId = task.getProcessInstanceId();</span><br><span class="line"><span class="comment">//          使用实例id，获取流程实例对象</span></span><br><span class="line">        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery()</span><br><span class="line">                .processInstanceId(processInstanceId)</span><br><span class="line">                .singleResult();</span><br><span class="line"><span class="comment">//        使用processInstance，得到 businessKey</span></span><br><span class="line">        String businessKey = processInstance.getBusinessKey();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;businessKey==&quot;</span>+businessKey);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3、办理任务"><a href="#2-3、办理任务" class="headerlink" title="2.3、办理任务"></a>2.3、办理任务</h3><p>注意：在实际应用中，完成任务前需要校验任务的负责人是否具有该任务的办理权限 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务，判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务id</span></span><br><span class="line">        String taskId = <span class="string">&quot;15005&quot;</span>;</span><br><span class="line"><span class="comment">//        任务负责人</span></span><br><span class="line">        String assingee = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="comment">//获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 创建TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//        完成任务前，需要校验该负责人可以完成当前任务</span></span><br><span class="line"><span class="comment">//        校验方法：</span></span><br><span class="line"><span class="comment">//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .taskId(taskId)</span><br><span class="line">                .taskAssignee(assingee)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="keyword">if</span>(task != <span class="keyword">null</span>)&#123;</span><br><span class="line">            taskService.complete(taskId);</span><br><span class="line">            System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、流程变量"><a href="#三、流程变量" class="headerlink" title="三、流程变量"></a>三、流程变量</h2><h3 id="3-1、什么是流程变量"><a href="#3-1、什么是流程变量" class="headerlink" title="3.1、什么是流程变量"></a>3.1、什么是流程变量</h3><p>流程变量在 activiti 中是一个非常重要的角色，流程运转有时需要靠流程变量，业务系统和 activiti<br>结合时少不了流程变量，流程变量就是 activiti 在管理工作流时根据管理需要而设置的变量。<br>比如：在出差申请流程流转时如果出差天数大于 3 天则由总经理审核，否则由人事直接审核， 出差天<br>数就可以设置为流程变量，在流程流转时使用。 </p>
<p><strong>注意：虽然流程变量中可以存储业务数据可以通过activiti的api查询流程变量从而实现 查询业务数据，但是不建议这样使用，因为业务数据查询由业务系统负责，activiti设置流程变量是为了流程执行需要而创建。</strong></p>
<h3 id="3-2、流程变量类型"><a href="#3-2、流程变量类型" class="headerlink" title="3.2、流程变量类型"></a>3.2、流程变量类型</h3><p>如果将 pojo 存储到流程变量中，必须实现序列化接口 serializable，为了防止由于新增字段无<br>法反序列化，需要生成 serialVersionUID。 </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140558.png" alt=""></p>
<h3 id="3-3、流程变量作用域"><a href="#3-3、流程变量作用域" class="headerlink" title="3.3、流程变量作用域"></a>3.3、流程变量作用域</h3><p>流程变量的作用域可以是一个流程实例(processInstance)，或一个任务(task)，或一个执行实例<br>(execution)</p>
<h4 id="3-3-1、globa变量"><a href="#3-3-1、globa变量" class="headerlink" title="3.3.1、globa变量"></a>3.3.1、globa变量</h4><p>流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量</p>
<p>注意：</p>
<p>如：    Global变量：userId（变量名）、zhangsan（变量值）</p>
<p>global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。</p>
<h4 id="3-3-2、local变量"><a href="#3-3-2、local变量" class="headerlink" title="3.3.2、local变量"></a>3.3.2、local变量</h4><p>任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。</p>
<p>Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 </p>
<h3 id="3-4、流程变量的使用方法"><a href="#3-4、流程变量的使用方法" class="headerlink" title="3.4、流程变量的使用方法"></a>3.4、流程变量的使用方法</h3><h4 id="3-4-1、在属性上使用UEL表达式"><a href="#3-4-1、在属性上使用UEL表达式" class="headerlink" title="3.4.1、在属性上使用UEL表达式"></a>3.4.1、在属性上使用UEL表达式</h4><p>可以在 assignee 处设置 UEL 表达式，表达式的值为任务的负责人，比如： ${assignee}， assignee 就是一个流程变量名称。</p>
<p>Activiti获取UEL表达式的值，即流程变量assignee的值 ，将assignee的值作为任务的负责人进行任务分配</p>
<h4 id="3-4-2、在连线上使用UEL表达式"><a href="#3-4-2、在连线上使用UEL表达式" class="headerlink" title="3.4.2、在连线上使用UEL表达式"></a>3.4.2、在连线上使用UEL表达式</h4><p>可以在连线上设置UEL表达式，决定流程走向。</p>
<p>比如：${price&lt;10000} 。price就是一个流程变量名称，uel表达式结果类型为布尔类型。</p>
<p>如果UEL表达式是true，要决定 流程执行走向。</p>
<h3 id="3-5、使用Global变量控制流程"><a href="#3-5、使用Global变量控制流程" class="headerlink" title="3.5、使用Global变量控制流程"></a>3.5、使用Global变量控制流程</h3><h4 id="3-5-1、需求"><a href="#3-5-1、需求" class="headerlink" title="3.5.1、需求"></a>3.5.1、需求</h4><p>员工创建出差申请单，由部门经理审核，部门经理审核通过后出差3天及以下由人财务直接审批，3天以上先由总经理审核，总经理审核通过再由财务审批。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140559.png" alt=""></p>
<h4 id="3-5-2、流程定义"><a href="#3-5-2、流程定义" class="headerlink" title="3.5.2、流程定义"></a>3.5.2、流程定义</h4><p>1）、出差天数大于等于3连线条件</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140600.png" alt="1577847654279"><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140601.png" alt=""></p>
<p>也可以使用对象参数命名，如evection.num：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140602.png" alt="1577870487533"><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140603.png" alt="1577870510159"></p>
<p>2）、出差天数小于3连线条件</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140604.png" alt="1577847740055"><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140605.png" alt="1577847766231"></p>
<p>也可以使用对象参数命名，如：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140606.png" alt="1577870638264"><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140607.png" alt="1577870654033"></p>
<h4 id="3-5-3、设置global流程变量"><a href="#3-5-3、设置global流程变量" class="headerlink" title="3.5.3、设置global流程变量"></a>3.5.3、设置global流程变量</h4><p>在部门经理审核前设置流程变量，变量值为出差单信息（包括出差天数），部门经理审核后可以根据流程变量的值决定流程走向。</p>
<p>在设置流程变量时，可以在启动流程时设置，也可以在任务办理时设置</p>
<h5 id="3-5-3-1、创建POJO对象"><a href="#3-5-3-1、创建POJO对象" class="headerlink" title="3.5.3.1、创建POJO对象"></a>3.5.3.1、创建POJO对象</h5><p>创建出差申请pojo对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出差申请 pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evection</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出差申请单名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String evectionName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出差天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double num;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预计开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date beginDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预计结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date endDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目的地</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String destination;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出差事由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String reson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEvectionName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> evectionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEvectionName</span><span class="params">(String evectionName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.evectionName = evectionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBeginDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beginDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeginDate</span><span class="params">(Date beginDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beginDate = beginDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndDate</span><span class="params">(Date endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endDate = endDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDestination</span><span class="params">(String destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.destination = destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getReson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReson</span><span class="params">(String reson)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reson = reson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Double num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-5-3-2、启动流程时设置变量"><a href="#3-5-3-2、启动流程时设置变量" class="headerlink" title="3.5.3.2、启动流程时设置变量"></a>3.5.3.2、启动流程时设置变量</h5><p>在启动流程时设置流程变量，变量的作用域是整个流程实例。</p>
<p>通过Map<key,value>设置流程变量，map中可以设置多个变量，这个key就是流程变量的名字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例,设置流程变量的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取流程引擎</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取RunTimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        流程定义key</span></span><br><span class="line">        String key = <span class="string">&quot;myEvection2&quot;</span>;</span><br><span class="line"><span class="comment">//       创建变量集合</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        创建出差pojo对象</span></span><br><span class="line">        Evection evection = <span class="keyword">new</span> Evection();</span><br><span class="line"><span class="comment">//        设置出差天数</span></span><br><span class="line">        evection.setNum(<span class="number">2d</span>);</span><br><span class="line"><span class="comment">//      定义流程变量，把出差pojo对象放入map</span></span><br><span class="line">        map.put(<span class="string">&quot;evection&quot;</span>,evection);</span><br><span class="line"><span class="comment">//      设置assignee的取值，用户可以在界面上设置流程的执行</span></span><br><span class="line">        map.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李经理&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;assignee2&quot;</span>,<span class="string">&quot;王总经理&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;assignee3&quot;</span>,<span class="string">&quot;赵财务&quot;</span>);</span><br><span class="line"><span class="comment">//        启动流程实例，并设置流程变量的值（把map传入）</span></span><br><span class="line">        ProcessInstance processInstance = runtimeService</span><br><span class="line">                .startProcessInstanceByKey(key, map);</span><br><span class="line"><span class="comment">//      输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例名称=&quot;</span>+processInstance.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程定义id==&quot;</span>+processInstance.getProcessDefinitionId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务，判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务id</span></span><br><span class="line">        String key = <span class="string">&quot;myEvection2&quot;</span>;</span><br><span class="line"><span class="comment">//        任务负责人</span></span><br><span class="line">        String assingee = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="comment">//获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 创建TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//        完成任务前，需要校验该负责人可以完成当前任务</span></span><br><span class="line"><span class="comment">//        校验方法：</span></span><br><span class="line"><span class="comment">//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(key)</span><br><span class="line">                .taskAssignee(assingee)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="keyword">if</span>(task != <span class="keyword">null</span>)&#123;</span><br><span class="line">            taskService.complete(task.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>startProcessInstanceByKey(processDefinitionKey, variables)</p>
<p>流程变量作用域是一个流程实例，流程变量使用Map存储，同一个流程实例设置变量map中key相同，后者覆盖前者。</p>
<h5 id="3-5-3-2、任务办理时设置变量"><a href="#3-5-3-2、任务办理时设置变量" class="headerlink" title="3.5.3.2、任务办理时设置变量"></a>3.5.3.2、任务办理时设置变量</h5><p>在完成任务时设置流程变量，该流程变量只有在该任务完成后其它结点才可使用该变量，它的作用域是整个流程实例，如果设置的流程变量的key在流程实例中已存在相同的名字则后设置的变量替换前边设置的变量。</p>
<p>这里需要在创建出差单任务完成时设置流程变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务，判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务id</span></span><br><span class="line">        String key = <span class="string">&quot;myEvection2&quot;</span>;</span><br><span class="line"><span class="comment">//        任务负责人</span></span><br><span class="line">        String assingee = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="comment">//       获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//       创建TaskService</span></span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//       创建变量集合</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        创建出差pojo对象</span></span><br><span class="line">        Evection evection = <span class="keyword">new</span> Evection();</span><br><span class="line"><span class="comment">//        设置出差天数</span></span><br><span class="line">        evection.setNum(<span class="number">2d</span>);</span><br><span class="line"><span class="comment">//      定义流程变量</span></span><br><span class="line">        map.put(<span class="string">&quot;evection&quot;</span>,evection);</span><br><span class="line"><span class="comment">//        完成任务前，需要校验该负责人可以完成当前任务</span></span><br><span class="line"><span class="comment">//        校验方法：</span></span><br><span class="line"><span class="comment">//        根据任务id和任务负责人查询当前任务，如果查到该用户有权限，就完成</span></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(key)</span><br><span class="line">                .taskAssignee(assingee)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="keyword">if</span>(task != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//完成任务是，设置流程变量的值</span></span><br><span class="line">            taskService.complete(task.getId(),map);</span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>通过当前任务设置流程变量，需要指定当前任务id，如果当前执行的任务id不存在则抛出异常。</p>
<p>任务办理时也是通过map<key,value>设置流程变量，一次可以设置多个变量。</p>
<h5 id="3-5-3-3、通过当前流程实例设置"><a href="#3-5-3-3、通过当前流程实例设置" class="headerlink" title="3.5.3.3、通过当前流程实例设置"></a>3.5.3.3、通过当前流程实例设置</h5><p>通过流程实例id设置全局变量，该流程实例必须未执行完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGlobalVariableByExecutionId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    当前流程实例执行 id，通常设置为当前执行的流程实例</span></span><br><span class="line">        String executionId=<span class="string">&quot;2601&quot;</span>;</span><br><span class="line"><span class="comment">//     获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//        获取RuntimeService</span></span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//        创建出差pojo对象</span></span><br><span class="line">        Evection evection = <span class="keyword">new</span> Evection();</span><br><span class="line"><span class="comment">//        设置天数</span></span><br><span class="line">        evection.setNum(<span class="number">3d</span>);</span><br><span class="line"><span class="comment">//      通过流程实例 id设置流程变量</span></span><br><span class="line">        runtimeService.setVariable(executionId, <span class="string">&quot;evection&quot;</span>, evection);</span><br><span class="line"><span class="comment">//      一次设置多个值</span></span><br><span class="line"><span class="comment">//      runtimeService.setVariables(executionId, variables)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>executionId必须当前未结束 流程实例的执行id，通常此id设置流程实例 的id。也可以通runtimeService.getVariable()获取流程变量。</p>
<h5 id="3-5-3-4、通过当前任务设置"><a href="#3-5-3-4、通过当前任务设置" class="headerlink" title="3.5.3.4、通过当前任务设置"></a>3.5.3.4、通过当前任务设置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGlobalVariableByTaskId</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//当前待办任务id</span></span><br><span class="line">		String taskId=<span class="string">&quot;1404&quot;</span>;</span><br><span class="line"><span class="comment">//     获取processEngine</span></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">		TaskService taskService = processEngine.getTaskService();</span><br><span class="line">		Evection evection = <span class="keyword">new</span> Evection();</span><br><span class="line">		evection.setNum(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//通过任务设置流程变量</span></span><br><span class="line">		taskService.setVariable(taskId, <span class="string">&quot;evection&quot;</span>, evection);</span><br><span class="line">		<span class="comment">//一次设置多个值 </span></span><br><span class="line">		<span class="comment">//taskService.setVariables(taskId, variables)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>任务id必须是当前待办任务id，act_ru_task中存在。如果该任务已结束，会报错</p>
<p>也可以通过taskService.getVariable()获取流程变量。</p>
<h4 id="3-5-4、测试"><a href="#3-5-4、测试" class="headerlink" title="3.5.4、测试"></a>3.5.4、测试</h4><p>正常测试：</p>
<p>​       设置流程变量的值大于等于3天</p>
<p>​       设计流程变量的值小于3天</p>
<p>异常测试：</p>
<p>​       流程变量不存在</p>
<p>​       流程变量的值为空NULL，price属性为空</p>
<p>​       UEL表达式都不符合条件  </p>
<p>​      不设置连线的条件</p>
<h4 id="3-5-5、注意事项"><a href="#3-5-5、注意事项" class="headerlink" title="3.5.5、注意事项"></a>3.5.5、注意事项</h4><p>1、  如果UEL表达式中流程变量名不存在则报错。</p>
<p>2、  如果UEL表达式中流程变量值为空NULL，流程不按UEL表达式去执行，而流程结束 。</p>
<p>3、  如果UEL表达式都不符合条件，流程结束 </p>
<p>4、  如果连线不设置条件，会走flow序号小的那条线</p>
<h4 id="3-5-6、操作数据库表"><a href="#3-5-6、操作数据库表" class="headerlink" title="3.5.6、操作数据库表"></a>3.5.6、操作数据库表</h4><p>设置流程变量会在当前执行流程变量表插入记录，同时也会在历史流程变量表也插入记录。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//当前流程变量表</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_ru_variable </span><br></pre></td></tr></table></figure>
<p>记录当前运行流程实例可使用的流程变量，包括 global和local变量</p>
<p>Id_：主键</p>
<p>Type_：变量类型</p>
<p>Name_：变量名称 </p>
<p>Execution<em>id</em>：所属流程实例执行id，global和local变量都存储</p>
<p>Proc<em>inst_id</em>：所属流程实例id，global和local变量都存储 </p>
<p>Task<em>id</em>：所属任务id，local变量存储</p>
<p>Bytearray_：serializable类型变量存储对应act_ge_bytearray表的id</p>
<p>Double_：double类型变量值</p>
<p>Long_：long类型变量值</p>
<p>Text_：text类型变量值 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#历史流程变量表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_hi_varinst </span><br></pre></td></tr></table></figure>
<p>记录所有已创建的流程变量，包括 global和local变量</p>
<p>字段意义参考当前流程变量表。</p>
<h3 id="3-6、设置local流程变量"><a href="#3-6、设置local流程变量" class="headerlink" title="3.6、设置local流程变量"></a>3.6、设置local流程变量</h3><h4 id="3-6-1、任务办理时设置"><a href="#3-6-1、任务办理时设置" class="headerlink" title="3.6.1、任务办理时设置"></a>3.6.1、任务办理时设置</h4><p> 任务办理时设置local流程变量，当前运行的流程实例只能在该任务结束前使用，任务结束该变量无法在当前流程实例使用，可以通过查询历史任务查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*处理任务时设置local流程变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//任务id</span></span><br><span class="line">   String taskId = <span class="string">&quot;1404&quot;</span>;</span><br><span class="line"><span class="comment">//  获取processEngine</span></span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//  定义流程变量</span></span><br><span class="line">   Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">   Evection evection = <span class="keyword">new</span> Evection ();</span><br><span class="line">   evection.setNum(<span class="number">3d</span>);</span><br><span class="line"><span class="comment">// 定义流程变量</span></span><br><span class="line">   Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="comment">//  变量名是holiday，变量值是holiday对象</span></span><br><span class="line">    variables.put(<span class="string">&quot;evection&quot;</span>, evection);</span><br><span class="line"><span class="comment">//  设置local变量，作用域为该任务</span></span><br><span class="line">    taskService.setVariablesLocal(taskId, variables);</span><br><span class="line"><span class="comment">//  完成任务</span></span><br><span class="line">   taskService.complete(taskId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​       说明：</p>
<p>设置作用域为任务的local变量，每个任务可以设置同名的变量，互不影响。</p>
<h4 id="3-6-2、通过当前任务设置"><a href="#3-6-2、通过当前任务设置" class="headerlink" title="3.6.2、通过当前任务设置"></a>3.6.2、通过当前任务设置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalVariableByTaskId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//   当前待办任务id</span></span><br><span class="line">    String taskId=<span class="string">&quot;1404&quot;</span>;</span><br><span class="line"><span class="comment">//  获取processEngine</span></span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService = processEngine.getTaskService();</span><br><span class="line">    Evection evection = <span class="keyword">new</span> Evection ();</span><br><span class="line">    evection.setNum(<span class="number">3d</span>);</span><br><span class="line"><span class="comment">//  通过任务设置流程变量</span></span><br><span class="line">    taskService.setVariableLocal(taskId, <span class="string">&quot;evection&quot;</span>, evection);</span><br><span class="line"><span class="comment">//  一次设置多个值 </span></span><br><span class="line">    <span class="comment">//taskService.setVariablesLocal(taskId, variables)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>任务id必须是当前待办任务id，act_ru_task中存在。</p>
<h4 id="3-6-3、-Local变量测试1"><a href="#3-6-3、-Local变量测试1" class="headerlink" title="3.6.3、  Local变量测试1"></a>3.6.3、  Local变量测试1</h4><p>如果上边例子中设置global变量改为设置local变量是否可行？为什么？</p>
<p> Local变量在任务结束后无法在当前流程实例执行中使用，如果后续的流程执行需要用到此变量则会报错。</p>
<h4 id="3-6-4、-Local变量测试2"><a href="#3-6-4、-Local变量测试2" class="headerlink" title="3.6.4、  Local变量测试2"></a>3.6.4、  Local变量测试2</h4><p>在部门经理审核、总经理审核、财务审核时设置local变量，可通过historyService查询每个历史任务时将流程变量的值也查询出来。</p>
<p> 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建历史任务查询对象</span></span><br><span class="line">      HistoricTaskInstanceQuery historicTaskInstanceQuery = historyService.createHistoricTaskInstanceQuery();</span><br><span class="line">      <span class="comment">// 查询结果包括 local变量</span></span><br><span class="line">      historicTaskInstanceQuery.includeTaskLocalVariables();</span><br><span class="line"><span class="keyword">for</span> (HistoricTaskInstance historicTaskInstance : list) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;任务id：&quot;</span> + historicTaskInstance.getId());</span><br><span class="line">         System.out.println(<span class="string">&quot;任务名称：&quot;</span> + historicTaskInstance.getName());</span><br><span class="line">         System.out.println(<span class="string">&quot;任务负责人：&quot;</span> + historicTaskInstance.getAssignee());</span><br><span class="line">     System.out.println(<span class="string">&quot;任务local变量：&quot;</span>+ historicTaskInstance.getTaskLocalVariables());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：查询历史流程变量，特别是查询pojo变量需要经过反序列化，不推荐使用。</p>
<h2 id="四、组任务"><a href="#四、组任务" class="headerlink" title="四、组任务"></a>四、组任务</h2><h3 id="4-1、需求"><a href="#4-1、需求" class="headerlink" title="4.1、需求"></a>4.1、需求</h3><p>在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。</p>
<p>针对这种情况可以给任务设置多个候选人，可以从候选人中选择参与者来完成任务。 </p>
<h3 id="4-2、设置任务候选人"><a href="#4-2、设置任务候选人" class="headerlink" title="4.2、设置任务候选人"></a>4.2、设置任务候选人</h3><p>在流程图中任务节点的配置中设置 candidate-users(候选人)，多个候选人之间用逗号分开。 </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140608.png" alt="1577878753288"></p>
<p>查看bpmn文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">activiti:candidateUsers</span>=<span class="string">&quot;lisi,wangwu&quot;</span> <span class="attr">activiti:exclusive</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;_3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;经理审批&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到部门经理的审核人已经设置为 lisi,wangwu 这样的一组候选人，可以使用</p>
<p>activiti:candiateUsers=”用户 1,用户 2,用户 3”的这种方式来实现设置一组候选人 </p>
<h3 id="4-3、组任务"><a href="#4-3、组任务" class="headerlink" title="4.3、组任务"></a>4.3、组任务</h3><h4 id="4-3-1、组任务办理流程"><a href="#4-3-1、组任务办理流程" class="headerlink" title="4.3.1、组任务办理流程"></a>4.3.1、组任务办理流程</h4><h5 id="a、查询组任务"><a href="#a、查询组任务" class="headerlink" title="a、查询组任务"></a>a、查询组任务</h5><p>指定候选人，查询该候选人当前的待办任务。</p>
<p>候选人不能立即办理任务。</p>
<h5 id="b、拾取-claim-任务"><a href="#b、拾取-claim-任务" class="headerlink" title="b、拾取(claim)任务"></a>b、拾取(claim)任务</h5><p>该组任务的所有候选人都能拾取。</p>
<p>将候选人的组任务，变成个人任务。原来候选人就变成了该任务的负责人。</p>
<p>如果拾取后不想办理该任务？</p>
<p>   需要将已经拾取的个人任务归还到组里边，将个人任务变成了组任务。</p>
<h5 id="c、查询个人任务"><a href="#c、查询个人任务" class="headerlink" title="c、查询个人任务"></a>c、查询个人任务</h5><p>查询方式同个人任务部分，根据assignee查询用户负责的个人任务。</p>
<h5 id="d、办理个人任务"><a href="#d、办理个人任务" class="headerlink" title="d、办理个人任务"></a>d、办理个人任务</h5><h4 id="4-3-2、-查询组任务"><a href="#4-3-2、-查询组任务" class="headerlink" title="4.3.2、  查询组任务"></a>4.3.2、  查询组任务</h4><p> 根据候选人查询组任务</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findGroupTaskList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 流程定义key</span></span><br><span class="line">       String processDefinitionKey = <span class="string">&quot;evection3&quot;</span>;</span><br><span class="line">       <span class="comment">// 任务候选人</span></span><br><span class="line">       String candidateUser = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">        <span class="comment">//  获取processEngine</span></span><br><span class="line">       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">       <span class="comment">// 创建TaskService</span></span><br><span class="line">       TaskService taskService = processEngine.getTaskService();</span><br><span class="line">       <span class="comment">//查询组任务</span></span><br><span class="line">       List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class="line">              .processDefinitionKey(processDefinitionKey)</span><br><span class="line">              .taskCandidateUser(candidateUser)<span class="comment">//根据候选人查询</span></span><br><span class="line">              .list();</span><br><span class="line">       <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">           System.out.println(<span class="string">&quot;流程实例id：&quot;</span> + task.getProcessInstanceId());</span><br><span class="line">           System.out.println(<span class="string">&quot;任务id：&quot;</span> + task.getId());</span><br><span class="line">           System.out.println(<span class="string">&quot;任务负责人：&quot;</span> + task.getAssignee());</span><br><span class="line">           System.out.println(<span class="string">&quot;任务名称：&quot;</span> + task.getName());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-3-、-拾取组任务"><a href="#4-3-3-、-拾取组任务" class="headerlink" title="4.3.3 、 拾取组任务"></a>4.3.3 、 拾取组任务</h4><p> 候选人员拾取组任务后该任务变为自己的个人任务。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">claimTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//  获取processEngine</span></span><br><span class="line">       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">       TaskService taskService = processEngine.getTaskService();</span><br><span class="line">       <span class="comment">//要拾取的任务id</span></span><br><span class="line">       String taskId = <span class="string">&quot;6302&quot;</span>;</span><br><span class="line">       <span class="comment">//任务候选人id</span></span><br><span class="line">       String userId = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">       <span class="comment">//拾取任务</span></span><br><span class="line">       <span class="comment">//即使该用户不是候选人也能拾取(建议拾取时校验是否有资格)    </span></span><br><span class="line">       <span class="comment">//校验该用户有没有拾取任务的资格</span></span><br><span class="line">       Task task = taskService.createTaskQuery()</span><br><span class="line">              .taskId(taskId)</span><br><span class="line">              .taskCandidateUser(userId)<span class="comment">//根据候选人查询</span></span><br><span class="line">              .singleResult();</span><br><span class="line">       <span class="keyword">if</span>(task!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="comment">//拾取任务</span></span><br><span class="line">           taskService.claim(taskId, userId);</span><br><span class="line">           System.out.println(<span class="string">&quot;任务拾取成功&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>说明：即使该用户不是候选人也能拾取，建议拾取时校验是否有资格</p>
<p>组任务拾取后，该任务已有负责人，通过候选人将查询不到该任务</p>
<h4 id="4-3-4、-查询个人待办任务"><a href="#4-3-4、-查询个人待办任务" class="headerlink" title="4.3.4、  查询个人待办任务"></a>4.3.4、  查询个人待办任务</h4><p> 查询方式同个人任务查询</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPersonalTaskList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 流程定义key</span></span><br><span class="line">    String processDefinitionKey = <span class="string">&quot;evection1&quot;</span>;</span><br><span class="line">    <span class="comment">// 任务负责人</span></span><br><span class="line">    String assignee = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">     <span class="comment">//  获取processEngine</span></span><br><span class="line">       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">// 创建TaskService</span></span><br><span class="line">    TaskService taskService = processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .taskAssignee(assignee)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id：&quot;</span> + task.getProcessInstanceId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务id：&quot;</span> + task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务负责人：&quot;</span> + task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名称：&quot;</span> + task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-5、-办理个人任务"><a href="#4-3-5、-办理个人任务" class="headerlink" title="4.3.5、  办理个人任务"></a>4.3.5、  办理个人任务</h4><p>同个人任务办理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*完成任务*/</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeTask</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//     任务ID</span></span><br><span class="line">      String taskId = <span class="string">&quot;12304&quot;</span>;</span><br><span class="line"><span class="comment">//     获取processEngine</span></span><br><span class="line">      ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">      processEngine.getTaskService()</span><br><span class="line">                   .complete(taskId);</span><br><span class="line">      System.out.println(<span class="string">&quot;完成任务：&quot;</span>+taskId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>说明：建议完成任务前校验该用户是否是该任务的负责人。</p>
<h4 id="4-3-6、-归还组任务"><a href="#4-3-6、-归还组任务" class="headerlink" title="4.3.6、  归还组任务"></a>4.3.6、  归还组任务</h4><p> 如果个人不想办理该组任务，可以归还组任务，归还后该用户不再是该任务的负责人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*归还组任务，由个人任务变为组任务，还可以进行任务交接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAssigneeToGroupTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  获取processEngine</span></span><br><span class="line">       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">   <span class="comment">// 查询任务使用TaskService</span></span><br><span class="line">   TaskService taskService = processEngine.getTaskService();</span><br><span class="line">   <span class="comment">// 当前待办任务</span></span><br><span class="line">   String taskId = <span class="string">&quot;6004&quot;</span>;</span><br><span class="line">   <span class="comment">// 任务负责人</span></span><br><span class="line">   String userId = <span class="string">&quot;zhangsan2&quot;</span>;</span><br><span class="line">    <span class="comment">// 校验userId是否是taskId的负责人，如果是负责人才可以归还组任务</span></span><br><span class="line">   Task task = taskService</span><br><span class="line">       .createTaskQuery()</span><br><span class="line">       .taskId(taskId)</span><br><span class="line">       .taskAssignee(userId)</span><br><span class="line">       .singleResult();</span><br><span class="line">    <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 如果设置为null，归还组任务,该 任务没有负责人</span></span><br><span class="line">       taskService.setAssignee(taskId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 说明：建议归还任务前校验该用户是否是该任务的负责人</p>
<p>也可以通过setAssignee方法将任务委托给其它用户负责，注意被委托的用户可以不是候选人（建议不要这样使用）</p>
<h4 id="4-3-7、-任务交接"><a href="#4-3-7、-任务交接" class="headerlink" title="4.3.7、  任务交接"></a>4.3.7、  任务交接</h4><p>任务交接,任务负责人将任务交给其它候选人办理该任务</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAssigneeToCandidateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  获取processEngine</span></span><br><span class="line">       ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">       <span class="comment">// 查询任务使用TaskService</span></span><br><span class="line">       TaskService taskService = processEngine.getTaskService();</span><br><span class="line">       <span class="comment">// 当前待办任务</span></span><br><span class="line">       String taskId = <span class="string">&quot;6004&quot;</span>;</span><br><span class="line">       <span class="comment">// 任务负责人</span></span><br><span class="line">       String userId = <span class="string">&quot;zhangsan2&quot;</span>;</span><br><span class="line"><span class="comment">// 将此任务交给其它候选人办理该 任务</span></span><br><span class="line">           String candidateuser = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">       <span class="comment">// 校验userId是否是taskId的负责人，如果是负责人才可以归还组任务</span></span><br><span class="line">       Task task = taskService</span><br><span class="line">           .createTaskQuery()</span><br><span class="line">           .taskId(taskId)</span><br><span class="line">           .taskAssignee(userId)</span><br><span class="line">           .singleResult();</span><br><span class="line">       <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">           taskService.setAssignee(taskId, candidateuser);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-8、-数据库表操作"><a href="#4-3-8、-数据库表操作" class="headerlink" title="4.3.8、  数据库表操作"></a>4.3.8、  数据库表操作</h4><p>查询当前任务执行表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_ru_task </span><br></pre></td></tr></table></figure>
<p>任务执行表，记录当前执行的任务，由于该任务当前是组任务，所有assignee为空，当拾取任务后该字段就是拾取用户的id</p>
<p>查询任务参与者</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> act_ru_identitylink</span><br></pre></td></tr></table></figure>
<p> 任务参与者，记录当前参考任务用户或组，当前任务如果设置了候选人，会向该表插入候选人记录，有几个候选就插入几个</p>
<p>与act_ru_identitylink对应的还有一张历史表act_hi_identitylink，向act_ru_identitylink插入记录的同时也会向历史表插入记录。任务完成</p>
<h2 id="五、网关"><a href="#五、网关" class="headerlink" title="五、网关"></a>五、网关</h2><p>网关用来控制流程的流向</p>
<h3 id="5-1-排他网关ExclusiveGateway"><a href="#5-1-排他网关ExclusiveGateway" class="headerlink" title="5.1 排他网关ExclusiveGateway"></a>5.1 排他网关ExclusiveGateway</h3><h4 id="5-1-1-什么是排他网关："><a href="#5-1-1-什么是排他网关：" class="headerlink" title="5.1.1  什么是排他网关："></a>5.1.1  什么是排他网关：</h4><p>排他网关，用来在流程中实现决策。 当流程执行到这个网关，所有分支都会判断条件是否为true，如果为true则执行该分支，</p>
<p><strong>注意</strong>：排他网关只会选择一个为true的分支执行。如果有两个分支条件都为true，排他网关会选择id值较小的一条分支去执行。</p>
<p>为什么要用排他网关？</p>
<p>不用排他网关也可以实现分支，如：在连线的condition条件上设置分支条件。</p>
<p>在连线设置condition条件的缺点：如果条件都不满足，流程就结束了(是异常结束)。</p>
<p>如果 使用排他网关决定分支的走向，如下：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140609.png" alt="1577879740282"></p>
<p>如果从网关出去的线所有条件都不满足则系统抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: No outgoing sequence flow of the exclusive gateway <span class="string">&#x27;exclusivegateway1&#x27;</span> could be selected <span class="keyword">for</span> continuing the process</span><br><span class="line">   at org.activiti.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior.leave(ExclusiveGatewayActivityBehavior.java:<span class="number">85</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-1-2-流程定义"><a href="#5-1-2-流程定义" class="headerlink" title="5.1.2  流程定义"></a>5.1.2  流程定义</h4><p> 排他网关图标，红框内：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140610.png" alt="1577879961637"></p>
<h4 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3  测试"></a>5.1.3  测试</h4><p>在部门经理审核后，走排他网关，从排他网关出来的分支有两条，一条是判断出差天数是否大于3天，另一条是判断出差天数是否小于等于3天。</p>
<p>设置分支条件时，如果所有分支条件都不是true，报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: No outgoing sequence flow of the exclusive gateway <span class="string">&#x27;exclusivegateway1&#x27;</span> could be selected <span class="keyword">for</span> continuing the process</span><br><span class="line"></span><br><span class="line">       at org.activiti.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior.leave(ExclusiveGatewayActivityBehavior.java:<span class="number">85</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-2-并行网关ParallelGateway"><a href="#5-2-并行网关ParallelGateway" class="headerlink" title="5.2 并行网关ParallelGateway"></a>5.2 并行网关ParallelGateway</h3><h4 id="5-2-1-什么是并行网关"><a href="#5-2-1-什么是并行网关" class="headerlink" title="5.2.1  什么是并行网关"></a>5.2.1  什么是并行网关</h4><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：</p>
<p>l  fork分支：</p>
<p> 并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。</p>
<p>l  join汇聚： </p>
<p>所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。</p>
<p>注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。</p>
<p><strong>与其他网关的主要区别是，并行网关不会解析条件。</strong> <strong>即使顺序流中定义了条件，也会被忽略。</strong></p>
<p>例子：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140611.png" alt=""></p>
<p>说明：</p>
<p>技术经理和项目经理是两个execution分支，在act_ru_execution表有两条记录分别是技术经理和项目经理，act_ru_execution还有一条记录表示该流程实例。</p>
<p>待技术经理和项目经理任务全部完成，在汇聚点汇聚，通过parallelGateway并行网关。</p>
<p>并行网关在业务应用中常用于会签任务，会签任务即多个参与者共同办理的任务。</p>
<h4 id="5-2-2-流程定义"><a href="#5-2-2-流程定义" class="headerlink" title="5.2.2  流程定义"></a>5.2.2  流程定义</h4><p>并行网关图标，红框内：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140612.png" alt="1577880020127"></p>
<h4 id="5-2-3-测试"><a href="#5-2-3-测试" class="headerlink" title="5.2.3  测试"></a>5.2.3  测试</h4><p>当执行到并行网关数据库跟踪如下：</p>
<p>当前任务表：SELECT * FROM act_ru_task   </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140613.png" alt=""></p>
<p>上图中：有两个任务当前执行。</p>
<p>查询流程实例执行表：SELECT * FROM act_ru_execution </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140614.png" alt=""></p>
<p>上图中，说明当前流程实例有多个分支(两个)在运行。</p>
<p>对并行任务的执行：</p>
<p>并行任务执行不分前后，由任务的负责人去执行即可。</p>
<p>执行技术经理任务后，查询当前任务表 SELECT * FROM act_ru_task   </p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140615.png" alt=""></p>
<p>已完成的技术经理任务在当前任务表act<em>ru_task</em>已被删除。</p>
<p>在流程实例执行表：SELECT * FROM act_ru_execution有中多个分支存在且有并行网关的汇聚结点。</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140616.png" alt=""></p>
<p>有并行网关的汇聚结点：说明有一个分支已经到汇聚，等待其它的分支到达。</p>
<p>当所有分支任务都完成，都到达汇聚结点后：</p>
<p>流程实例执行表：SELECT * FROM act_ru_execution，执行流程实例已经变为总经理审批，说明流程执行已经通过并行网关</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140617.png" alt=""></p>
<p>总结：所有分支到达汇聚结点，并行网关执行完成。         </p>
<h3 id="5-3-包含网关InclusiveGateway"><a href="#5-3-包含网关InclusiveGateway" class="headerlink" title="5.3    包含网关InclusiveGateway"></a>5.3    包含网关InclusiveGateway</h3><h4 id="5-3-1-什么是包含网关"><a href="#5-3-1-什么是包含网关" class="headerlink" title="5.3.1  什么是包含网关"></a>5.3.1  什么是包含网关</h4><p>包含网关可以看做是排他网关和并行网关的结合体。 </p>
<p>和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。</p>
<p>包含网关的功能是基于进入和外出顺序流的：</p>
<p>l  分支： </p>
<p>所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。</p>
<p>l  汇聚：</p>
<p> 所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。</p>
<h4 id="5-3-2-流程定义："><a href="#5-3-2-流程定义：" class="headerlink" title="5.3.2  流程定义："></a>5.3.2  流程定义：</h4><p>出差申请大于等于3天需要由项目经理审批，小于3天由技术经理审批，出差申请必须经过人事经理审批。</p>
<p> 包含网关图标，红框内：</p>
<p> <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140618.png" alt="1577880080004"></p>
<p>定义流程：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140619.png" alt=""></p>
<p>注意：通过包含网关的每个分支的连线上设置condition条件。</p>
<h4 id="5-3-3-测试"><a href="#5-3-3-测试" class="headerlink" title="5.3.3  测试"></a>5.3.3  测试</h4><p>如果包含网关设置的条件中，流程变量不存在，报错;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: Unknown property used in expression: $&#123;evection.num&gt;=<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>需要在流程启动时设置流程变量evection.num。</p>
<p>1）、当流程执行到第一个包含网关后，会根据条件判断，当前要走哪几个分支：</p>
<p>流程实例执行表：SELECT * FROM act_ru_execution</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140620.png" alt=""></p>
<p>第一条记录：包含网关分支。</p>
<p>后两条记录代表两个要执行的分支：</p>
<p>ACT_ID = “_13” 代表 项目经理神品</p>
<p>ACT_ID = “_5” 代表 人事经理审批</p>
<p>当前任务表：ACT_RU_TASK</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140621.png" alt=""></p>
<p>上图中，项目经理审批、人事经理审批 都是当前的任务，在并行执行。</p>
<p>如果有一个分支执行先走到汇聚结点的分支，要等待其它执行分支走到汇聚。</p>
<p>2）、先执行项目经理审批，然后查询当前任务表：ACT_RU_TASK</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140622.png" alt=""></p>
<p>当前任务还有人事经理审批需要处理。</p>
<p>流程实例执行表：SELECT * FROM act_ru_execution</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140623.png" alt=""></p>
<p>发现人事经理的分支还存在，而项目经理分支已经走到ACT_ID = _18的节点。而ACT_ID=__18就是第二个包含网关</p>
<p>这时，因为有2个分支要执行，包含网关会等所有分支走到汇聚才能执行完成。</p>
<p>3）、执行人事经理审批</p>
<p>然后查询当前任务表：ACT_RU_TASK</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140624.png" alt=""></p>
<p>当前任务表已经不是人事经理审批了，说明人事经理审批已经完成。 </p>
<p>流程实例执行表：SELECT * FROM act_ru_execution</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140625.png" alt=""></p>
<p>包含网关执行完成，分支和汇聚就从act_ru_execution删除。</p>
<p>小结：在分支时，需要判断条件，<strong>符合条件的分支，将会执行</strong>，符合条件的分支最终才进行汇聚。</p>
<h3 id="5-4-事件网关EventGateway"><a href="#5-4-事件网关EventGateway" class="headerlink" title="5.4 事件网关EventGateway"></a>5.4 事件网关EventGateway</h3><p>事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。</p>
<p>事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的”执行”， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：</p>
<ol>
<li>事件网关必须有两条或以上外出顺序流；</li>
<li>事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）</li>
<li>连接到事件网关的中间捕获事件必须只有一个入口顺序流。 </li>
</ol>
<h4 id="5-4-1流程定义"><a href="#5-4-1流程定义" class="headerlink" title="5.4.1流程定义"></a>5.4.1流程定义</h4><p>事件网关图标，红框内</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140626.png" alt="1586666799"></p>
<p>intermediateCatchEvent：</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140627.png" alt=""></p>
<p>intermediateCatchEvent支持的事件类型：</p>
<p>Message Event: 消息事件</p>
<p>Singal Event：  信号事件</p>
<p>Timer Event：  定时事件</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140628.png" alt=""></p>
<p>使用事件网关定义流程：</p>
<p><img src="assets/1586694673.png" alt=""></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>工作流引擎</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti整合</title>
    <url>/posts/49722.html</url>
    <content><![CDATA[<h1 id="Activiti整合Spring"><a href="#Activiti整合Spring" class="headerlink" title="Activiti整合Spring"></a>Activiti整合Spring</h1><h1 id="一、Activiti与Spring整合开发"><a href="#一、Activiti与Spring整合开发" class="headerlink" title="一、Activiti与Spring整合开发"></a>一、Activiti与Spring整合开发</h1><h2 id="1-1-Activiti与Spring整合的配置"><a href="#1-1-Activiti与Spring整合的配置" class="headerlink" title="1.1 Activiti与Spring整合的配置"></a>1.1 Activiti与Spring整合的配置</h2><h3 id="1-、在pom-xml文件引入坐标"><a href="#1-、在pom-xml文件引入坐标" class="headerlink" title="1)、在pom.xml文件引入坐标"></a>1)、在pom.xml文件引入坐标</h3><p>如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-services-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alfresco<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Activiti Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Activiti中核心类的是ProcessEngine流程引擎，与Spring整合就是让Spring来管理ProcessEngine</p>
<p>通过org.activiti.spring.SpringProcessEngineConfiguration 与Spring整合方式来创建ProcessEngine对象。 </p>
<p> 创建spring与activiti的整合配置文件：activiti-spring.xml（名称不固定）</p>
<h3 id="2-、创建activiti-spring-xml"><a href="#2-、创建activiti-spring-xml" class="headerlink" title="2)、创建activiti-spring.xml"></a>2)、创建activiti-spring.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/activiti&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 工作流引擎配置bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用spring事务管理器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drop-create&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源服务service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 流程运行service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span>  <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 任务管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 历史管理service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getHistoryService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面，根据具体项目修改切点配置</span></span><br><span class="line"><span class="comment">    &lt;aop:config proxy-target-class=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:advisor advice-ref=&quot;txAdvice&quot;</span></span><br><span class="line"><span class="comment">                     pointcut=&quot;execution(*com.itheima.service.impl..(..))&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>databaseSchemaUpdate的取值内容：</p>
<p>flase：       默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。（生产环境常用）<br>true：        activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建。（开发时常用）<br>create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）。（单元测试常用）<br>drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）。</p>
<h2 id="1-2-测试Activiti与Spring整合"><a href="#1-2-测试Activiti与Spring整合" class="headerlink" title="1.2 测试Activiti与Spring整合"></a>1.2 测试Activiti与Spring整合</h2><h3 id="1）、测试代码"><a href="#1）、测试代码" class="headerlink" title="1）、测试代码"></a>1）、测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   测试activiti与spring整合是否成功</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:activiti-spring.xml&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivitiTest</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line">     </span><br><span class="line">     <span class="meta">@Test</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;部署对象:&quot;</span>+repositoryService);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2）、执行流程分析"><a href="#2）、执行流程分析" class="headerlink" title="2）、执行流程分析"></a>2）、执行流程分析</h3><p>下面我们一起来分析Activiti与Spring整合加载的过程。</p>
<p>1、加载activiti-spring.xml配置文件</p>
<p>2、加载SpringProcessEngineConfiguration对象，这个对象它需要依赖注入dataSource对象和transactionManager对象。</p>
<p>3、加载ProcessEngineFactoryBean工厂来创建ProcessEngine对象，而ProcessEngineFactoryBean工厂又需要依赖注入processEngineConfiguration对象。</p>
<p>4、processEngine对象来负责创建我们的Service对象，从而简化Activiti的开发过程。</p>
<h1 id="二、Activiti7与SpringBoot整合开发"><a href="#二、Activiti7与SpringBoot整合开发" class="headerlink" title="二、Activiti7与SpringBoot整合开发"></a>二、Activiti7与SpringBoot整合开发</h1><p>Activiti7发布正式版之后，它与SpringBoot2.x已经完全支持整合开发。</p>
<h2 id="2-1-SpringBoot整合Activiti7的配置"><a href="#2-1-SpringBoot整合Activiti7的配置" class="headerlink" title="2.1     SpringBoot整合Activiti7的配置"></a>2.1     SpringBoot整合Activiti7的配置</h2><p>为了能够实现SpringBoot与Activiti7整合开发，首先我们要引入相关的依赖支持。</p>
<p>在工程的pom.xml文件中引入相关的依赖，其中activiti的依赖是：activiti-spring-boot-starter。</p>
<p>具体依赖如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.Beta2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过该pom.xml文件所导入的坐标，我们就可以实现activiti7与Springboot整合。</p>
<h2 id="2-2-SpringBoot的application-yml文件配置"><a href="#2-2-SpringBoot的application-yml文件配置" class="headerlink" title="2.2    SpringBoot的application.yml文件配置"></a>2.2    SpringBoot的application.yml文件配置</h2><p>为了能够实现Activiti7生成的表放到Mysql数据库中，需要在配置文件application.yml中添加相关的配置</p>
<p>注意：activiti7默认没有开启数据库历史记录，需要手动配置开启</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///activiti?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">activiti:</span></span><br><span class="line">    <span class="comment">#1.flase：默认值。activiti在启动时，对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常</span></span><br><span class="line">    <span class="comment">#2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建</span></span><br><span class="line">    <span class="comment">#3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）</span></span><br><span class="line">    <span class="comment">#4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）</span></span><br><span class="line">    <span class="attr">database-schema-update:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#检测历史表是否存在 activiti7默认没有开启数据库历史记录 启动数据库历史记录</span></span><br><span class="line">    <span class="attr">db-history-used:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#记录历史等级 可配置的历史级别有none, activity, audit, full</span></span><br><span class="line">    <span class="comment">#none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。</span></span><br><span class="line">    <span class="comment">#activity：级别高于none，保存流程实例与流程行为，其他数据不保存。</span></span><br><span class="line">    <span class="comment">#audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。audit为history的默认值。</span></span><br><span class="line">    <span class="comment">#full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。</span></span><br><span class="line">    <span class="attr">history-level:</span> <span class="string">full</span></span><br><span class="line">    <span class="comment">#校验流程文件，默认校验resources下的processes文件夹里的流程文件</span></span><br><span class="line">    <span class="attr">check-process-definitions:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-编写启动类"><a href="#2-3-编写启动类" class="headerlink" title="2.3 编写启动类"></a>2.3 编写启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ActApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-4-添加SpringSecurity安全框架整合配置"><a href="#2-4-添加SpringSecurity安全框架整合配置" class="headerlink" title="2.4    添加SpringSecurity安全框架整合配置"></a>2.4    添加SpringSecurity安全框架整合配置</h2><p>因为Activiti7与SpringBoot整合后，默认情况下，集成了SpringSecurity安全框架，这样我们就要去准备SpringSecurity整合进来的相关用户权限配置信息。</p>
<p>SpringBoot的依赖包已经将SpringSecurity的依赖包也添加进项目中。</p>
<h3 id="2-4-1-添加SecurityUtil类"><a href="#2-4-1-添加SecurityUtil类" class="headerlink" title="2.4.1  添加SecurityUtil类"></a>2.4.1  添加SecurityUtil类</h3><p>为了能够快速实现SpringSecurity安全框架的配置，所添加的一个组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(SecurityUtil.class);</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="meta">@Qualifier(&quot;myUserDetailsService&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logInAs</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">     UserDetails user = userDetailsService.loadUserByUsername(username);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;User &quot;</span> + username + <span class="string">&quot; doesn&#x27;t exist, please provide a valid user&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     logger.info(<span class="string">&quot;&gt; Logged in as: &quot;</span> + username);</span><br><span class="line"></span><br><span class="line">     SecurityContextHolder.setContext(</span><br><span class="line">             <span class="keyword">new</span> SecurityContextImpl(</span><br><span class="line">                     <span class="keyword">new</span> Authentication() &#123;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">                             <span class="keyword">return</span> user.getAuthorities();</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             <span class="keyword">return</span> user.getPassword();</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> Object <span class="title">getDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             <span class="keyword">return</span> user;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             <span class="keyword">return</span> user;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123; &#125;</span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                             <span class="keyword">return</span> user.getUsername();</span><br><span class="line">                         &#125;</span><br><span class="line">     &#125;));</span><br><span class="line">     org.activiti.engine.impl.identity.Authentication.setAuthenticatedUserId(username);</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这个类可以从我们下载的Activiti7官方提供的Example中找到。</p>
<h3 id="2-4-2-添加DemoApplicationConfig类"><a href="#2-4-2-添加DemoApplicationConfig类" class="headerlink" title="2.4.2  添加DemoApplicationConfig类"></a>2.4.2  添加DemoApplicationConfig类</h3><p>在Activiti7官方下载的Example中找到DemoApplicationConfig类，它的作用是为了实现SpringSecurity框架的用户权限的配置，这样我们就可以在系统中使用用户权限信息。</p>
<p>本次项目中基本是在文件中定义出来的用户信息，当然也可以是数据库中查询的用户权限信息。</p>
<p>后面处理流程时用到的任务负责人，需要添加在这里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(DemoApplicationConfiguration.class);</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">myUserDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">         <span class="comment">//这里添加用户，后面处理流程时用到的任务负责人，需要添加在这里</span></span><br><span class="line">         String[][] usersGroupsAndRoles = &#123;</span><br><span class="line">                 &#123;<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&quot;rose&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&quot;other&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_otherTeam&quot;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&quot;system&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_ADMIN&quot;</span>&#125;,</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (String[] user : usersGroupsAndRoles) &#123;</span><br><span class="line">             List&lt;String&gt; authoritiesStrings = Arrays.asList(Arrays.copyOfRange(user, <span class="number">2</span>, user.length));</span><br><span class="line">             logger.info(<span class="string">&quot;&gt; Registering new user: &quot;</span> + user[<span class="number">0</span>] + <span class="string">&quot; with the following Authorities[&quot;</span> + authoritiesStrings + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">             inMemoryUserDetailsManager.createUser(<span class="keyword">new</span> User(user[<span class="number">0</span>], passwordEncoder().encode(user[<span class="number">1</span>]),</span><br><span class="line">                     authoritiesStrings.stream().map(s -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(s)).collect(Collectors.toList())));</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-创建Bpmn文件"><a href="#2-5-创建Bpmn文件" class="headerlink" title="2.5 创建Bpmn文件"></a>2.5 创建Bpmn文件</h2><p>Activiti7可以自动部署流程，前提是在resources目录下，创建一个新的目录processes，用来放置bpmn文件。</p>
<p>创建一个简单的Bpmn流程文件，并设置任务的用户组Candidate Groups。</p>
<p>Candidate Groups中的内容与上面DemoApplicationConfiguration类中出现的用户组名称要保持一致，可以填写：activitiTeam 或者 otherTeam。</p>
<p>这样填写的好处：当不确定到底由谁来负责当前任务的时候，只要是Groups内的用户都可以拾取这个任务</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201224140654.png" alt=""></p>
<h2 id="2-6-使用Junit方式测试"><a href="#2-6-使用Junit方式测试" class="headerlink" title="2.6    使用Junit方式测试"></a>2.6    使用Junit方式测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.SecurityUtil;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.ProcessInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.builders.ProcessPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.runtime.ProcessRuntime;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.runtime.shared.query.Page;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.runtime.shared.query.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.model.Task;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.model.builders.TaskPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.runtime.TaskRuntime;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actviti7DemoApplicationTests</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> ProcessRuntime processRuntime;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> TaskRuntime taskRuntime;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> SecurityUtil securityUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testActBoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(taskRuntime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        securityUtil.logInAs(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        Page&lt;org.activiti.api.process.model.ProcessDefinition&gt; processDefinitionPage =</span><br><span class="line">                processRuntime.processDefinitions(Pageable.of(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;可用的流程定义数量：&quot;</span> + processDefinitionPage.getTotalItems());</span><br><span class="line">        <span class="keyword">for</span> (org.activiti.api.process.model.ProcessDefinition pd : processDefinitionPage.getContent()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span> + pd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        securityUtil.logInAs(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        ProcessInstance pi = processRuntime.start(ProcessPayloadBuilder.</span><br><span class="line">                start().</span><br><span class="line">                withProcessDefinitionKey(<span class="string">&quot;myProcess&quot;</span>).</span><br><span class="line">                build());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例ID：&quot;</span> + pi.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     **查询任务，并完成自己的任务</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        securityUtil.logInAs(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        Page&lt;Task&gt; taskPage=taskRuntime.tasks(Pageable.of(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span> (taskPage.getTotalItems()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Task task:taskPage.getContent())&#123;</span><br><span class="line">                taskRuntime.claim(TaskPayloadBuilder.</span><br><span class="line">                        claim().</span><br><span class="line">                        withTaskId(task.getId()).build());</span><br><span class="line">                System.out.println(<span class="string">&quot;任务：&quot;</span>+task);</span><br><span class="line">                taskRuntime.complete(TaskPayloadBuilder.</span><br><span class="line">                        complete().</span><br><span class="line">                        withTaskId(task.getId()).build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Page&lt;Task&gt; taskPage2=taskRuntime.tasks(Pageable.of*(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span> (taskPage2.getTotalItems()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务：&quot;</span>+taskPage2.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>工作流引擎</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Java transient关键字使用</title>
    <url>/posts/12309.html</url>
    <content><![CDATA[<h1 id="1-transient的作用及使用方法"><a href="#1-transient的作用及使用方法" class="headerlink" title="1.transient的作用及使用方法"></a>1.transient的作用及使用方法</h1><p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p>
<p>然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p>
<p><strong>总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</strong></p>
<p><strong>示例代码:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用transient关键字不序列化某个变量</span></span><br><span class="line"><span class="comment"> *        注意读取的时候，读取数据的顺序一定要和存放数据的顺序保持一致</span></span><br><span class="line"><span class="comment"> *        </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Pzx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>  2020/12/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;Pzx&quot;</span>);</span><br><span class="line">        user.setPasswd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;read before Serializable: &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username: &quot;</span> + user.getUsername());</span><br><span class="line">        System.err.println(<span class="string">&quot;password: &quot;</span> + user.getPasswd());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/user.txt&quot;</span>));</span><br><span class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">                    <span class="string">&quot;C:/user.txt&quot;</span>));</span><br><span class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></span><br><span class="line">            is.close();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;\nread after Serializable: &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;username: &quot;</span> + user.getUsername());</span><br><span class="line">            System.err.println(<span class="string">&quot;password: &quot;</span> + user.getPasswd());</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8294180014912103005L</span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String passwd;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPasswd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passwd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasswd</span><span class="params">(String passwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read before Serializable: </span><br><span class="line">username: Pzx</span><br><span class="line">password: 123456</span><br><span class="line"></span><br><span class="line">read after Serializable: </span><br><span class="line">username: Pzx</span><br><span class="line">password: null</span><br></pre></td></tr></table></figure>
<p>密码字段为null，说明反序列化时根本没有从文件中获取到信息。</p>
<h1 id="2-transient使用小结"><a href="#2-transient使用小结" class="headerlink" title="2.transient使用小结"></a>2.transient使用小结</h1><ul>
<li>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li>
<li>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</li>
<li>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</li>
</ul>
<p>​        第三点可能有些人很迷惑，因为发现在User类中的username字段前加上static关键字后，程序运行结果依然不变，即static类型的username也读出来为“Alexia”了，这不与第三点说的矛盾吗？实际上是这样的：第三点确实没错（一个静态变量不管是否被transient修饰，均不能被序列化），反序列化后类中static型变量username的值为当前JVM中对应static变量的值，这个值是JVM中的不是反序列化得出的，不相信？好吧，下面我来证明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用transient关键字不序列化某个变量</span></span><br><span class="line"><span class="comment"> *        注意读取的时候，读取数据的顺序一定要和存放数据的顺序保持一致</span></span><br><span class="line"><span class="comment"> *        </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Pzx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>  2020/12/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;Pzx&quot;</span>);</span><br><span class="line">        user.setPasswd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;read before Serializable: &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username: &quot;</span> + user.getUsername());</span><br><span class="line">        System.err.println(<span class="string">&quot;password: &quot;</span> + user.getPasswd());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/user.txt&quot;</span>));</span><br><span class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在反序列化之前改变username的值</span></span><br><span class="line">            User.username = <span class="string">&quot;Pengzx&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">                    <span class="string">&quot;C:/user.txt&quot;</span>));</span><br><span class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></span><br><span class="line">            is.close();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;\nread after Serializable: &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;username: &quot;</span> + user.getUsername());</span><br><span class="line">            System.err.println(<span class="string">&quot;password: &quot;</span> + user.getPasswd());</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8294180014912103005L</span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String passwd;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPasswd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passwd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasswd</span><span class="params">(String passwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read before Serializable: </span><br><span class="line">username: Pzx</span><br><span class="line">password: 123456</span><br><span class="line"></span><br><span class="line">read after Serializable: </span><br><span class="line">username: Pengzx</span><br><span class="line">password: null</span><br></pre></td></tr></table></figure>
<h1 id="3-transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"><a href="#3-transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？" class="headerlink" title="3.transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"></a>3.transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？</h1><p>思考下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descripiton</span> Externalizable接口的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Alexia</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2013-10-15</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String content = <span class="string">&quot;是的，我将会被序列化，不管我是否被transient关键字修饰&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeObject(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException </span>&#123;</span><br><span class="line">        content = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ExternalizableTest et = <span class="keyword">new</span> ExternalizableTest();</span><br><span class="line">        ObjectOutput out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                <span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>)));</span><br><span class="line">        out.writeObject(et);</span><br><span class="line"></span><br><span class="line">        ObjectInput in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(</span><br><span class="line">                <span class="string">&quot;test&quot;</span>)));</span><br><span class="line">        et = (ExternalizableTest) in.readObject();</span><br><span class="line">        System.out.println(et.content);</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>content变量会被序列化吗？好吧，我把答案都输出来了，是的，运行结果就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是的，我将会被序列化，不管我是否被transient关键字修饰</span><br></pre></td></tr></table></figure>
<p>这是为什么呢，不是说类的变量被transient关键字修饰以后将不能序列化了吗？</p>
<p>​        我们知道在Java中，对象的序列化可以通过实现两种接口来实现，若实现的是Serializable接口，则所有的序列化将会自动进行，若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指定所要序列化的变量，这与是否被transient修饰无关。因此第二个例子输出的是变量content初始化的内容，而不是null。</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows安装Kafka(含zookeeper)</title>
    <url>/posts/62369.html</url>
    <content><![CDATA[<h2 id="1-下载Kafka"><a href="#1-下载Kafka" class="headerlink" title="1.下载Kafka"></a>1.下载Kafka</h2><ul>
<li><p>打开 <a href="http://kafka.apache.org/downloads.html">下载地址</a></p>
</li>
<li><p>选择下图红框中的版本，Kafka包名组成： Scala版本 - Kafka自身版本</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201103102115.png" alt="kafka下载"></p>
<p>  ​        </p>
</li>
<li><p>点击进去以后选择下载站点</p>
</li>
<li><p>等待下载完成后，进行解压，解压目录如下：</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201103102546.png" alt="kafka解压目录"></p>
</li>
</ul>
<h2 id="2-配置Kafka"><a href="#2-配置Kafka" class="headerlink" title="2.配置Kafka"></a>2.配置Kafka</h2><ul>
<li>修改config目录中的zookeeper.properties文件中的<code>dataDir=/temp/zookeeper</code>，因为默认是linux路径，所以需要将其修改为windows路径，该配置在配置文件中的16行</li>
<li>修改config目录中的server.properties文件中的<code>log.dirs=/temp/kafka-logs</code>,将其修改成windows路径</li>
</ul>
<h2 id="3-启动Kafka、zk"><a href="#3-启动Kafka、zk" class="headerlink" title="3.启动Kafka、zk"></a>3.启动Kafka、zk</h2><ul>
<li><p>进入到<code>kafka2.12-2.6.0</code> =&gt; <code>bin</code> =&gt; <code>windows</code></p>
</li>
<li><p>在此目录中打开cmd界面</p>
</li>
<li><p>启动zk ，启动命令<code>zookeeper-server-start.bat ..\..\config\zookeeper.properties</code></p>
</li>
<li><p>重新打开一个cmd界面</p>
</li>
<li><p>启动kafka，启动命令<code>kafka-server-start.bat ..\..\config\server.properties</code></p>
<p>  <strong>注意：如果启动时报<code>输入行太长，命令语法不正确</code>，可能是因为上述的配置文件没有修改，也可能是kafka文件夹的目录太深，可以直接放在D盘下试一下</strong></p>
</li>
</ul>
<h2 id="4-测试Kafka"><a href="#4-测试Kafka" class="headerlink" title="4.测试Kafka"></a>4.测试Kafka</h2><ul>
<li><p>创建一个主题:</p>
<p>  <code>kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test-topic</code></p>
</li>
<li><p>查看创建的主题列表:</p>
<p>  <code>kafka-topics.bat --list --zookeeper localhost:2181</code></p>
</li>
</ul>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201103104143.png" alt="创建kafka主题"></p>
<ul>
<li><p>启动生产者:</p>
<p>  <code>kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic</code></p>
<p>  此时可以从控制台输入信息，待消费者启动后可接收到生产者发布的消息。</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201103104913.png" alt="启动kafka生产者"></p>
</li>
<li><p>启动消费者：</p>
<p>  <code>kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning</code></p>
</li>
<li><p>在生产者中生成数据，查看消费者是否可以正常消费</p>
</li>
</ul>
<p><strong>以上就是kafka的基本安装和使用</strong></p>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>zookeeper</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>maven配置POM文件详解</title>
    <url>/posts/20676.html</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 父项目的坐标 . 如果项目中没有规定某个元素的值 , 那么父项目中的对应值即为项目的默认值 .  坐标包括group ID , artifact ID和 version .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.xbz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span><span class="comment">&lt;!--  父项目的pom.xml文件的相对路径 . 相对路径允许你选择一个不同的路径 . 默认值是../pom.xml . Maven首先在构建当前项目的地方寻找父项 目的pom , 其次在文件系统的这个位置（relativePath位置） , 然后在本地仓库 , 最后在远程仓库寻找父项目的pom .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span><span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本 . 模型本身的版本很少改变 , 虽然如此 , 但它仍然是必不可少的 , 这是为了当Maven引入了新的特性或者其他模型变更的时候 , 确保稳定性 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asia.banseon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 项目的全球唯一标识符 , 通常使用全限定的包名区分该项目和其他项目 . 并且构建时生成的路径也是由此生成 ,  如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banseon-maven2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--  构件的标识符 , 它和group ID一起唯一标识一个构件 . 换句话说 , 你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下 , artifact ID也必须是唯一的 . 构件是项目产生的或使用的一个东西 , Maven为项目产生的构件包括：JARs , 源 码 , 二进制发布和WARs等 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span><span class="comment">&lt;!-- 项目产生的构件类型 , 例如jar, war, ear, pom . 插件可以创建他们自己的构件类型 , 所以前面列的不是全部构件类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 项目当前版本 , 格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span><span class="comment">&lt;!--  项目的详细描述, Maven 产生的文档用 .   当这个元素能够用HTML格式描述时（例如 , CDATA中的文本会被解析器忽略 , 就可以包含HTML标 签） ,  不鼓励使用纯文本描述 . 如果你需要修改产生的web站点的索引页面 , 你应该修改你自己的索引页文件 , 而不是调整这里的文档 .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">maven</span>&gt;</span><span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL , 本例为 jira --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span><span class="comment">&lt;!-- 问题管理系统（例如jira）的名字 ,  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://my.jira.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span><span class="tag">&lt;/<span class="name">system</span>&gt;</span><span class="comment">&lt;!-- 持续集成系统的名字 , 例如continuum --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话） .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 构建完成时 , 需要通知的开发者/用户的配置项 . 包括被通知者信息和通知条件（错误 , 失败 , 成功 , 警告） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置一种方式 , 当构建中断时 , 以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span><span class="comment">&lt;!-- 传送通知的途径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnError</span>&gt;</span><span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnFailure</span>&gt;</span><span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnSuccess</span>&gt;</span><span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnWarning</span>&gt;</span><span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span><span class="comment">&lt;!-- 不赞成使用 . 通知发送到哪里 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 扩展配置项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span><span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span><span class="comment">&lt;!-- 项目创建年份 , 4位数字 . 当产生版权信息时需要使用这个值 .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表 . 自动产生的网站引用这些信息 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>XMail<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 邮件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>junpzx@163.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span><span class="comment">&lt;!-- 发送邮件的地址或链接 , 如果是邮件地址 , 创建文档时 , mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>junpzx@163.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span><span class="comment">&lt;!-- 订阅邮件的地址或链接 , 如果是邮件地址 , 创建文档时 , mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>junpzx@163.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span><span class="comment">&lt;!-- 取消订阅邮件的地址或链接 , 如果是邮件地址 , 创建文档时 , mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/junpzx.com/demo/mail/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span><span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>DEV 001<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pengzx<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>junpzx@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span><span class="comment">&lt;!-- 项目开发者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.junpzx.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色 , 角色元素描述了各种角色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Dev<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>xbz<span class="tag">&lt;/<span class="name">organization</span>&gt;</span><span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>https://www.junpzx.cn<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span><span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者属性 , 如即时消息如何处理等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>+8<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span><span class="comment">&lt;!-- 项目开发者所在时区 ,  -11到12范围内的整数 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目的其他贡献者 . 参见developers/developer元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span><span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span><span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目所有License列表 .  应该只列出该项目的license列表 , 不要列出依赖项目的 license列表 . 如果列出多个license , 用户可以选择它们中的一个而不是接受所有license .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 描述了项目的license , 用于生成项目的web站点的license页面 , 其他一些报表和validation也会用到该元素 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Xbz Projet<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://blog.csdn.net/xingbaozhen1210<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span><span class="comment">&lt;!-- 项目分发的主要方式： repo , 可以从Maven库下载 manual ,  用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span>ABCDEFG...<span class="tag">&lt;/<span class="name">comments</span>&gt;</span><span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库 , 供Maven web站点和其它插件使用 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span><span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库 . 欲知详情 , 请看SCMs提供的URL格式和列表 . 该连接只读 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span><span class="comment">&lt;!-- 给开发者使用的 , 类似connection元素 . 即该连接不仅仅只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span><span class="comment">&lt;!-- 当前代码的标签 , 在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 描述项目所属组织的各种属性 . Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 组织的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 组织主页的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span><span class="comment">&lt;!-- 该元素设置了项目源码目录 , 当构建项目的时候 , 构建系统会编译目录里的源码 . 该路径是相对于pom.xml的相对路径 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span><span class="comment">&lt;!-- 该元素设置了项目脚本源码目录 , 该目录和源码目录不同：绝大多数情况下 , 该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的 , 而不是被编译的) .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span><span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录 , 当测试项目的时候 , 构建系统会编译目录里的源码 . 该路径是相对于pom.xml的相对路径 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span><span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span><span class="comment">&lt;!-- 被编译过的测试class文件存放的目录 .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 描述使用到的构建扩展 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span><span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表 , 例如和项目相关的属性文件 , 这些资源被包含在最终的打包文件里 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span><span class="comment">&lt;!--  描述了资源的目标路径 . 该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;） . 举个例 子 , 如果你想资源在特定的包里(org.apache.maven.messages) , 你就必须该元素设置为org/apache/maven /messages . 然而 , 如果你只是想把资源放到源码目录结构里 , 就不需要该配置 .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span><span class="comment">&lt;!-- 是否使用参数值代替参数名 . 参数值取自properties元素或者文件里配置的属性 , 文件在filters元素里列出 .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!-- 描述存放资源的目录 , 该路径相对POM路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="tag">&lt;/<span class="name">includes</span>&gt;</span><span class="comment">&lt;!-- 包含的模式列表 , 例如**/*.xml. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span><span class="comment">&lt;!-- 排除的模式列表 , 例如**/*.xml --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径 , 例如和单元测试相关的属性文件 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径 , 参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span><span class="comment">&lt;!-- 产生的构件的文件名 , 默认值是$&#123;artifactId&#125;-$&#123;version&#125; .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span><span class="comment">&lt;!-- 当filtering开关打开时 , 使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 子项目可以引用的默认插件信息 . 该插件配置项直到被引用时才会被解析或绑定到生命周期 . 给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用的插件列表  .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息 .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span><span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器） , 由于性能原因 , 只有在真需要下载时 , 该元素才被设置成enabled .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">                    <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置 . 每个目标可能有不同的配置 .  --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 执行目标的标识符 , 用于标识构建过程中的目标 , 或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span><span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段 , 如果省略 , 目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span><span class="comment">&lt;!-- 配置的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span><span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            ......</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span><span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 使用的插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 在列的项目构建profile , 如果被激活 , 会修改构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 构建配置的唯一标识符 . 即用于命令行激活 , 也用于在继承时合并具有相同标识符的profile .  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发profile的条件逻辑 . Activation是profile的开启钥匙 . profile的力量来自于它</span></span><br><span class="line"><span class="comment">            能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定 . activation元素并不是激活profile的唯一方式 .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span><span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span><span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span><span class="tag">&lt;/<span class="name">jdk</span>&gt;</span><span class="comment">&lt;!-- 当匹配的jdk被检测到 , profile被激活 . 例如 , 1.4激活JDK1.4 , 1.4.0_2 , 而!1.4激活所有版本不是以1.4开头的JDK .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到 , profile被激活 . os元素可以定义一些操作系统相关的属性 .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows 7<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x64<span class="tag">&lt;/<span class="name">arch</span>&gt;</span><span class="comment">&lt;!-- 激活profile的操作系统体系结构  --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.2.3580<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用） , 其拥有对应的名称和值 , Profile就会被激活 . 如果值</span></span><br><span class="line"><span class="comment">                字段是空的 , 那么存在属性名称字段就会激活profile , 否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">&lt;!-- 提供一个文件名 , 通过检测该文件的存在或不存在来激活profile . missing检查文件是否存在 , 如果不存在则激活</span></span><br><span class="line"><span class="comment">                profile . 另一方面 , exists则会检查文件是否存在 , 如果存在则激活profile .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/xbz/workspace/<span class="tag">&lt;/<span class="name">exists</span>&gt;</span><span class="comment">&lt;!-- 如果指定的文件存在 , 则激活profile .  --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/xbz/workspace/<span class="tag">&lt;/<span class="name">missing</span>&gt;</span><span class="comment">&lt;!-- 如果指定的文件不存在 , 则激活profile .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 构建项目所需要的信息 . 参见build元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                    ......</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                ......</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span><span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分 . 列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 发现插件的远程仓库列表 , 这些插件用于构建和报表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖 .  这些依赖组成了项目构建过程中的一个个环节 . 它们自动从项目定义的仓库中下载 . 要获取更多信息 , 请看项目依赖机制 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    ......</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span><span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范 . 当用户执行“mvn site” , 这些报表就会运行 .  在页面导航栏能看到所有报表的链接 . 参见reporting元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见properties元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分 . 列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版 , 快照版）开启 .   --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="comment">&lt;!-- 该元素指定更新发生的频率 . Maven会比较本地POM和远程POM的时间戳 . 这里的选项是：always（一直） , daily（默认 , 每日） , interval：X（这里X是以分钟为单位的时间间隔） , 或者never（从不） .  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span><span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略） , fail（失败） , 或者warn（警告） .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  如何处理远程仓库里快照版本的下载 . 有了releases和snapshots这两组配置 , POM就可以在每个单独的仓库中 , 为每种类型的构件采取不同的 策略 . 例如 , 可能有人会决定只为开发目的开启对快照版本下载的支持 . 参见repositories/repository/releases元素  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 远程仓库唯一标识符 . 可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 远程仓库名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8888/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 远程仓库URL , 按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span><span class="comment">&lt;!--  用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留） . Maven 2为其仓库提供了一个默认的布局；然 而 , Maven 1.x有一种不同的布局 . 我们可以使用该元素指定布局是default（默认）还是legacy（遗留） .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 发现插件的远程仓库列表 , 这些插件用于构建和报表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖 .  这些依赖组成了项目构建过程中的一个个环节 . 它们自动从项目定义的仓库中下载 . 要获取更多信息 , 请看项目依赖机制 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 依赖的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 依赖的版本号 .  在Maven 2里, 也可以配置成版本号的范围 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span><span class="comment">&lt;!--  依赖类型 , 默认类型是jar . 它通常表示依赖的文件的扩展名 , 但也有例外 . 一个类型可以被映射成另外一个扩展名或分类器 . 类型经常和使用的打包方式对应 ,  尽管这也有例外 . 一些类型的例子：jar , war , ejb-client和test-jar . 如果设置extensions为 true , 就可以在 plugin里定义新的类型 . 所以前面的类型的例子不完整 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span><span class="comment">&lt;!--  依赖的分类器 . 分类器可以区分属于同一个POM , 但不同构建方式的构件 . 分类器名被附加到文件名的版本号后面 . 例如 , 如果你想要构建两个单独的构件成 JAR , 一个使用Java 1.4编译器 , 另一个使用Java 6编译器 , 你就可以使用分类器来生成两个单独的JAR构件 .  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 依赖范围 . 在项目发布过程中 , 帮助决定哪些构件被包括进来 . 欲知详情请参考依赖机制 . </span></span><br><span class="line"><span class="comment">                  - compile ：默认范围 , 用于编译</span></span><br><span class="line"><span class="comment">                  - provided：类似于编译 , 但支持你期待jdk或者容器提供 , 类似于classpath</span></span><br><span class="line"><span class="comment">                  - runtime: 在执行时需要使用</span></span><br><span class="line"><span class="comment">                  - test:    用于test任务时使用</span></span><br><span class="line"><span class="comment">                  - system: 需要外在提供相应的元素 . 通过systemPath来取得</span></span><br><span class="line"><span class="comment">                  - systemPath: 仅用于范围为system . 提供相应的路径</span></span><br><span class="line"><span class="comment">                  - optional:   当项目自身被依赖时 , 标注依赖是否传递 . 用于连续依赖时使用 --&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span><span class="comment">&lt;!-- 仅供system范围使用 . 注意 , 不鼓励使用这个元素 , 并且在新的版本中该元素可能被覆盖掉 . 该元素为依赖规定了文件系统上的路径 . 需要绝对路径而不是相对路径 . 推荐使用属性匹配绝对路径 , 例如$&#123;java.home&#125; .  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当计算传递依赖时 ,  从依赖构件列表里 , 列出被排除的依赖构件集 . 即告诉maven你只依赖指定的项目 , 不依赖项目的依赖 . 此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span><span class="comment">&lt;!-- 可选依赖 , 如果你在项目B中把C依赖声明为可选 , 你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖 . 可选依赖阻断依赖的传递性 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span><span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范 . 当用户执行“mvn site” , 这些报表就会运行 .  在页面导航栏能看到所有报表的链接 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span>&gt;</span><span class="tag">&lt;/<span class="name">excludeDefaults</span>&gt;</span><span class="comment">&lt;!-- true , 则 , 网站不包括默认的报表 . 这包括“项目信息”菜单中的报表 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span><span class="comment">&lt;!-- 所有产生的报表存放到哪里 . 默认值是$&#123;project.build.directory&#125;/site .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 使用的报表插件和他们的配置 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span><span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 报表插件的配置 --&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">&lt;!-- 一组报表的多重规范 , 每个规范可能有不同的配置 . 一个规范（报表集）对应一个执行目标  . 例如 , 有1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9个报表 . 1 , 2 , 5构成A报表集 , 对应一个执行目标 . 2 , 5 , 8构成B报表集 , 对应另一个执行目标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表示报表的一个集合 , 以及产生该集合的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 报表集合的唯一标识符 , POM继承时用到 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 产生报表集合时 , 被使用的报表的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span><span class="tag">&lt;/<span class="name">inherited</span>&gt;</span><span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span><span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--  继承自该项目的所有子项目的默认依赖信息 . 这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息） , 如果group ID和artifact ID以外的一些信息没有描述 , 则通过group ID和artifact ID 匹配到这里的依赖 , 并使用这里的依赖信息 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目分发信息 , 在执行mvn deploy后表示要发布的位置 . 有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库 .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span>&gt;</span><span class="tag">&lt;/<span class="name">uniqueVersion</span>&gt;</span><span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素 , 默认部署到repository元素配置的仓库 , 参见distributionManagement/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span>&gt;</span><span class="tag">&lt;/<span class="name">uniqueVersion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 部署位置的唯一标识符 , 用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 部署位置的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="comment">&lt;!-- 部署位置的URL , 按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">downloadUrl</span>&gt;</span><span class="comment">&lt;!-- 项目下载页面的URL . 如果没有该元素 , 用户应该参考主页 . 使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制） .  --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置） , 这里列出构件的重定位信息 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 构件新的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 构件新的版本号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span><span class="comment">&lt;!-- 显示给用户的 , 关于移动的额外信息 , 例如原因 .  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span>&gt;</span><span class="tag">&lt;/<span class="name">status</span>&gt;</span><span class="comment">&lt;!--  给出该构件在远程仓库的状态 . 不得在本地项目中设置该元素 , 因为这是工具自动更新的 . 有效的值有：none（默认） , converted（仓库管理员从 Maven 1 POM转换过来） , partner（直接从伙伴Maven 2仓库同步过来） , deployed（从Maven 2实例部 署） , verified（被核实时正确的和最终的） .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 以值替代名称 , Properties可以在整个POM中使用 , 也可以作为触发条件（见settings.xml配置文件里activation元素的说明） . 格式是&lt;name&gt;value&lt;/name&gt; .  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version1</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version2</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>时序数据库（TSDB）- influxdb</title>
    <url>/posts/43720.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-什么是时序数据库"><a href="#1-1-什么是时序数据库" class="headerlink" title="1.1.什么是时序数据库"></a>1.1.什么是时序数据库</h2><p>​        首先介绍一下什么是时序数据，时序数据是基于时间的一系列的数据。在有时间的坐标中将这些数据点连成线，往过去看可以做成多纬度报表，揭示其趋势性、规律性、异常性;往未来看可以做大数据分析，机器学习，实现预测和预警。</p>
<p>​        时序数据库就是存放时序数据的数据库，并且需要支持时序数据的快速写入、持久化、多纬度的聚合查询等基本功能。</p>
<p>​        对比传统数据库仅仅记录了数据的当前值，时序数据库则记录了所有的历史数据。同时时序数据的查询也总是会带上时间作为过滤条件。</p>
<h2 id="1-2-时序数据库的特点"><a href="#1-2-时序数据库的特点" class="headerlink" title="1.2.时序数据库的特点"></a>1.2.时序数据库的特点</h2><h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><ul>
<li>写入平稳、持续、高并发高吞吐：时序数据的写入是比较平稳的，这点与应用数据不同，应用数据通常与应用的访问量成正比，而应用的访问量通常存在波峰波谷。时序数据的产生通常是以一个固定的时间频率产生，不会受其他因素的制约，其数据生成的速度是相对比较平稳的。</li>
<li>写多读少：时序数据上95%-99%的操作都是写操作，是典型的写多读少的数据。这与其数据特性相关，例如监控数据，你的监控项可能很多，但是你真正去读的可能比较少，通常只会关心几个特定的关键指标或者在特定的场景下才会去读数据。</li>
<li>实时写入最近生成的数据，无更新：时序数据的写入是实时的，且每次写入都是最近生成的数据，这与其数据生成的特点相关，因为其数据生成是随着时间推进的，而新生成的数据会实时的进行写入。数据写入无更新，在时间这个维度上，随着时间的推进，每次数据都是新数据，不会存在旧数据的更新，不过不排除人为的对数据做订正。</li>
</ul>
<h3 id="数据查询和分析"><a href="#数据查询和分析" class="headerlink" title="数据查询和分析"></a>数据查询和分析</h3><ul>
<li>按时间范围读取：通常来说，你不会去关心某个特定点的数据，而是一段时间的数据。</li>
<li>最近的数据被读取的概率高</li>
<li>历史数据粗粒度查询的概率搞</li>
<li>多种精度查询</li>
<li>多维度分析</li>
</ul>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ul>
<li><p>数据量大：拿监控数据来举例，如果我们采集的监控数据的时间间隔是1s，那一个监控项每天会产生86400个数据点，若有10000个监控项，则一天就会产生864000000个数据点。在物联网场景下，这个数字会更大。整个数据的规模，是TB甚至是PB级的。</p>
</li>
<li><p>冷热分明：时序数据有非常典型的冷热特征，越是历史的数据，被查询和分析的概率越低。</p>
</li>
<li><p>具有时效性：时序数据具有时效性，数据通常会有一个保存周期，超过这个保存周期的数据可以认为是失效的，可以被回收。一方面是因为越是历史的数据，可利用的价值越低；另一方面是为了节省存储成本，低价值的数据可以被清理。</p>
</li>
<li><p>多精度数据存储：在查询的特点里提到时序数据出于存储成本和查询效率的考虑，会需要一个多精度的查询，同样也需要一个多精度数据的存储。</p>
</li>
</ul>
<h2 id="1-3-时序数据库适合的场景"><a href="#1-3-时序数据库适合的场景" class="headerlink" title="1.3.时序数据库适合的场景"></a>1.3.时序数据库适合的场景</h2><p>​        所有有时序数据产生，并且需要展现其历史趋势、周期规律、异常性的，进一步对未来做出预测分析的，都是时序数据库适合的场景。</p>
<h2 id="1-4-时序数据库的数据模型"><a href="#1-4-时序数据库的数据模型" class="headerlink" title="1.4.时序数据库的数据模型"></a>1.4.时序数据库的数据模型</h2><p>时间序列数据可以分成两部分：</p>
<ul>
<li>序列 ：就是标识符（维度），主要的目的是方便进行搜索和筛选</li>
<li><p>数据点：时间戳和数值构成的数组</p>
<ul>
<li>行存：一个数组包含多个点，如 [{t: 2017-09-03-21:24:44, v: 0.1002}, {t: 2017-09-03-21:24:45, v: 0.1012}]</li>
<li>列存：两个数组，一个存时间戳，一个存数值，如[ 2017-09-03-21:24:44, 2017-09-03-21:24:45], [0.1002,  0.1012]</li>
</ul>
<p><strong>一般情况下：列存能有更好的压缩率和查询性能</strong></p>
</li>
</ul>
<h2 id="1-5-时序数据库的基本概念"><a href="#1-5-时序数据库的基本概念" class="headerlink" title="1.5.时序数据库的基本概念"></a>1.5.时序数据库的基本概念</h2><p><strong>metric</strong>：度量，相当于关系型数据库中的table。</p>
<p><strong>data point:</strong> 数据点，相当于关系型数据库中的row。</p>
<p><strong>timestamp</strong>：时间戳，代表数据点产生的时间。</p>
<p><strong>field</strong>: 度量下的不同字段。比如位置这个度量具有经度和纬度两个field。一般情况下存放的是会随着时间戳的变化而变化的数据。</p>
<p><strong>tag</strong>: 标签，或者附加信息。一般存放的是并不随着时间戳变化的属性信息。timestamp加上所有的tags可以认为是table的primary key。</p>
<h1 id="二、influxDB简介"><a href="#二、influxDB简介" class="headerlink" title="二、influxDB简介"></a>二、influxDB简介</h1><p>influxDB在Github上的地址：<a href="https://github.com/influxdata/influxdb">https://github.com/influxdata/influxdb</a></p>
<h2 id="2-1-influxDB是什么"><a href="#2-1-influxDB是什么" class="headerlink" title="2.1.influxDB是什么"></a>2.1.influxDB是什么</h2><p>​        <strong>InfluxDB</strong>是一个由<a href="https://www.influxdata.com/">InfluxData</a>开发的开源时序型数据库。它由Go写成，着力于高性能地查询与存储时序型数据。InfluxDB被广泛应用于存储系统的监控数据，IoT(物联网)行业的实时数据等场景。</p>
<h2 id="2-2-influxDB的特点"><a href="#2-2-influxDB的特点" class="headerlink" title="2.2.influxDB的特点"></a>2.2.influxDB的特点</h2><ul>
<li>InfluxDB在技术实现上充分利用了Go语言的特性，无需任何外部依赖即可独立部署。</li>
<li>InfluxDB提供了一个类似于SQL的查询语言并且一系列内置函数方便用户进行数据查询。</li>
<li>InfluxDB存储的数据从逻辑上由 <strong>Measurement</strong>, <strong>tag组</strong>以及 <strong>field组</strong>以及一个<strong>时间戳</strong>组成的：<ul>
<li>Measurement： 由一个字符串表示该条记录对应的含义。比如它可以是监控数据”cpu_load”，也可以是测量数据”average_temperature”</li>
<li>tag组： 由一组键值对组成，表示的是该条记录的一系列属性信息。同样的measurement数据所拥有的tag组不一定相同，它是无模式的(Schema-free)。tag信息是默认被索引的。</li>
<li>field组：也是由一组键值对组成，表示的是该条记录具体的value信息(有名称)。field组中可定义的value类型包括：64位整型，64位浮点型，字符串以及布尔型。Field信息是无法被索引的。</li>
<li>时间戳：就是该条记录的时间属性。如果插入数据时没有明确指定时间戳，则默认存储在数据库中的时间戳则为该条记录的入库时间。</li>
</ul>
</li>
<li>InfluxDB支持基于HTTP的数据插入与查询。同时也接受直接基于TCP或UDP协议的连接。</li>
<li>InfluxDB允许用户定义数据保存策略(Retention Policies)来实现对存储超过指定时间的数据进行删除或者降采样。</li>
</ul>
<h2 id="2-3-influxDB的关键概念"><a href="#2-3-influxDB的关键概念" class="headerlink" title="2.3.influxDB的关键概念"></a>2.3.influxDB的关键概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>InfluxDB 和传统数据库（如：MySQL）的一些区别</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">InfluxDB</th>
<th style="text-align:center">传统数据库中的概念</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">database</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">measurement</td>
<td style="text-align:center">数据库中的表</td>
</tr>
<tr>
<td style="text-align:center">points</td>
<td style="text-align:center">表里面的一行数据</td>
</tr>
</tbody>
</table>
</div>
<h3 id="特有概念"><a href="#特有概念" class="headerlink" title="特有概念"></a>特有概念</h3><ol>
<li><p>tag–标签，在 InfluxDB 中，tag 是一个非常重要的部分，表名+tag 一起作为数据库的索引，是“key-value”的形式</p>
</li>
<li><p>field–数据，field 主要是用来存放数据的部分，也是“key-value”的形式</p>
</li>
<li><p>timestamp–时间戳，作为时序型数据库，时间戳是 InfluxDB 中最重要的部分，在插入数据时可以自己指定也可留空让系统指定</p>
<p> <strong>说明：在插入新数据时，tag、field 和 timestamp 之间用空格分隔</strong></p>
</li>
<li><p>series–序列，所有在数据库中的数据，都需要通过图表来展示，而这个 series 表示这个表里面的数据，可以在图表上画成几条线。具体可以通过 <code>SHOW SERIES FROM &quot;表名&quot;</code> 进行查询</p>
</li>
<li><p>Retention policy–数据保留策略，可以定义数据保留的时长，每个数据库可以有多个数据保留策略，但只能有一个默认策略</p>
</li>
<li><p>Point–点，表示每个表里某个时刻的某个条件下的一个 field 的数据，因为体现在图表上就是一个点，于是将其称为 point。Point 由时间戳（time）、数据（field）、标签（tags）组成</p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Point 属性</th>
<th style="text-align:center">传统数据库中的概念</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:center">每个数据记录时间，是数据库中的主索引 (会自动生成)</td>
</tr>
<tr>
<td style="text-align:center">fields</td>
<td style="text-align:center">表中的列（没有索引的属性）也就是记录的值：温度， 湿度</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">表中的索引：地区，海拔</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-4-influxDB端口"><a href="#2-4-influxDB端口" class="headerlink" title="2.4.influxDB端口"></a>2.4.influxDB端口</h2><ul>
<li>8083：Web admin 管理服务的端口, <a href="http://localhost:8083/">http://localhost:8083</a></li>
<li>8086：HTTP API 的端口</li>
<li>8088：集群端口</li>
</ul>
<h1 id="三、influxDB安装"><a href="#三、influxDB安装" class="headerlink" title="三、influxDB安装"></a>三、influxDB安装</h1><h2 id="3-1-Linux上安装"><a href="#3-1-Linux上安装" class="headerlink" title="3.1.Linux上安装"></a>3.1.Linux上安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.influxdata.com&#x2F;influxdb&#x2F;releases&#x2F;influxdb-1.8.3.x86_64.rpm</span><br><span class="line"></span><br><span class="line">sudo yum localinstall influxdb-1.8.3.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="3-2-Windows上安装"><a href="#3-2-Windows上安装" class="headerlink" title="3.2.Windows上安装"></a>3.2.Windows上安装</h2><p><a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip">下载地址</a>:<a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip">https://dl.influxdata.com/influxdb/releases/influxdb-1.8.3_windows_amd64.zip</a></p>
<h2 id="3-3-docker上安装"><a href="#3-3-docker上安装" class="headerlink" title="3.3.docker上安装"></a>3.3.docker上安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull influxdb</span><br></pre></td></tr></table></figure>
<h1 id="四、influxDB基本使用（以Windows为例）"><a href="#四、influxDB基本使用（以Windows为例）" class="headerlink" title="四、influxDB基本使用（以Windows为例）"></a>四、influxDB基本使用（以Windows为例）</h1><h2 id="4-1-启动"><a href="#4-1-启动" class="headerlink" title="4.1.启动"></a>4.1.启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在cmd中进入到influxDB目录输入以下命令启动influxDB</span><br><span class="line">influxd.exe -config influxdb.conf</span><br><span class="line"></span><br><span class="line"># 启动客户端，如果没有修改过conf文件，那么则不用在后面指定端口</span><br><span class="line">influx.exe -port 8081</span><br></pre></td></tr></table></figure>
<h2 id="4-2-用户"><a href="#4-2-用户" class="headerlink" title="4.2.用户"></a>4.2.用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示所有用户</span><br><span class="line">show users</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line">create user &quot;username&quot; with password &#39;password&#39;</span><br><span class="line"></span><br><span class="line">#创建管理员权限用户</span><br><span class="line">create user &quot;username&quot; with password &#39;password&#39; with all privileges</span><br><span class="line"></span><br><span class="line">#修改用户密码</span><br><span class="line">set password for username &#x3D; &quot;password&quot;</span><br><span class="line"></span><br><span class="line">#删除用户</span><br><span class="line">drop user &quot;username&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-权限"><a href="#4-3-权限" class="headerlink" title="4.3.权限"></a>4.3.权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看权限</span><br><span class="line">show grants for username</span><br><span class="line"></span><br><span class="line">#赋予管理员权限</span><br><span class="line">grant all privileges to username</span><br><span class="line"></span><br><span class="line">#取消权限</span><br><span class="line">revoke all on mydb from username</span><br></pre></td></tr></table></figure>
<h2 id="4-4-登录账号"><a href="#4-4-登录账号" class="headerlink" title="4.4.登录账号"></a>4.4.登录账号</h2><p><strong>认证策略需要在配置文件中打开[http]下的auth-enabled = true</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth</span><br><span class="line">然后输入账号密码</span><br></pre></td></tr></table></figure>
<h2 id="4-5-数据库操作"><a href="#4-5-数据库操作" class="headerlink" title="4.5.数据库操作"></a>4.5.数据库操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有数据库</span><br><span class="line">show databases</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line">create database &quot;testDB&quot;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use testDB</span><br></pre></td></tr></table></figure>
<h2 id="4-6-表"><a href="#4-6-表" class="headerlink" title="4.6.表"></a>4.6.表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示所有表</span><br><span class="line">show measurements</span><br><span class="line"></span><br><span class="line">#创建表</span><br><span class="line">insert test,host&#x3D;127.0.0.1,monitor_name&#x3D;test count&#x3D;1</span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line">drop measurement &quot;measurement_name&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-7插入数据"><a href="#4-7插入数据" class="headerlink" title="4.7插入数据"></a>4.7插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert weather,altitude&#x3D;5000,area&#x3D;北 humidity&#x3D;3,temperature&#x3D;23 1599630284710054000</span><br></pre></td></tr></table></figure>
<ul>
<li>measurement(表名): weather</li>
<li>tags（类似索引）: altitude、area。是String类型</li>
<li>fields: temperature、humidity。是字符串、数字类型</li>
<li>influx默认时间是纳秒（ns），即19位时间戳</li>
</ul>
<h2 id="4-16-查看表名"><a href="#4-16-查看表名" class="headerlink" title="4.16.查看表名"></a>4.16.查看表名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show measurements</span><br></pre></td></tr></table></figure>
<h2 id="4-17-查看数据"><a href="#4-17-查看数据" class="headerlink" title="4.17.查看数据"></a>4.17.查看数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 操作与mysql类似</span><br><span class="line">select * from weather where time &gt;&#x3D;1599630284710ms</span><br><span class="line"></span><br><span class="line">select * from weather where time &gt;&#x3D; &#39;2018-11-23 14:30:39&#39; and time &lt;&#x3D; &#39;2018-11-23 14:32:32&#39; tz(&#39;Asia&#x2F;Shanghai&#39;)</span><br><span class="line"></span><br><span class="line"># 涉及时间查询使用时间戳，避免时区问题</span><br></pre></td></tr></table></figure>
<h2 id="4-18-查看策略"><a href="#4-18-查看策略" class="headerlink" title="4.18.查看策略"></a>4.18.查看策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show retention policies on &#39;weather&#39;</span><br></pre></td></tr></table></figure>
<h2 id="4-19-创建策略"><a href="#4-19-创建策略" class="headerlink" title="4.19.创建策略"></a>4.19.创建策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create retention policy &quot;rp_test&quot; on &quot;testDB&quot; duration 30d replication 1 default</span><br></pre></td></tr></table></figure>
<ul>
<li><p>rp_test: 策略名</p>
</li>
<li><p>testDB：数据库名</p>
</li>
<li><p>30d：数据保存时间，30天之前的数据将被删除</p>
</li>
<li><p>replication 1: 副本个数</p>
</li>
<li><p>default: 设为默认策略</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>duration</strong></th>
<th><strong>shardGroupDuration</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;2days</td>
<td>1hour</td>
</tr>
<tr>
<td>&gt;=2days and &lt;=6months</td>
<td>1day</td>
</tr>
<tr>
<td>&gt;6months</td>
<td>7days</td>
</tr>
</tbody>
</table>
</div>
<h2 id="4-20-修改策略"><a href="#4-20-修改策略" class="headerlink" title="4.20.修改策略"></a>4.20.修改策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter retention policy &quot;rp_test&quot; on &quot;testDB&quot; duration 1d replication 1</span><br></pre></td></tr></table></figure>
<h2 id="4-21-删除策略"><a href="#4-21-删除策略" class="headerlink" title="4.21.删除策略"></a>4.21.删除策略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop retention policy &quot; rp_test&quot; on &quot; testDB&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-22-查询连续查询"><a href="#4-22-查询连续查询" class="headerlink" title="4.22.查询连续查询"></a>4.22.查询连续查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CONTINUOUS QUERIES </span><br></pre></td></tr></table></figure>
<ul>
<li>这条命令得在命令行下输入，在web管理界面不能显示。</li>
<li>QUERIES需要大写</li>
</ul>
<h2 id="4-23-创建新的Continuous-Queries"><a href="#4-23-创建新的Continuous-Queries" class="headerlink" title="4.23.创建新的Continuous Queries"></a>4.23.创建新的Continuous Queries</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create continuous query cq_30m on testDB begin select mean(temperature) into weather30m from weather group by time(30m) end</span><br></pre></td></tr></table></figure>
<ul>
<li><p>cq_30m：连续查询的名字</p>
</li>
<li><p>testDB：具体的数据库名</p>
</li>
<li><p>mean(temperature): 算平均温度</p>
</li>
<li><p>weather： 当前表名</p>
</li>
<li><p>weather30m： 存新数据的表名</p>
</li>
<li><p>30m：时间间隔为30分钟</p>
</li>
</ul>
<h2 id="4-24-删除Continuous-Queries"><a href="#4-24-删除Continuous-Queries" class="headerlink" title="4.24.删除Continuous Queries"></a>4.24.删除Continuous Queries</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网（Vultr）</title>
    <url>/posts/9623.html</url>
    <content><![CDATA[<h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><h2 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1.注册账号"></a>1.1.注册账号</h2><p><a href="https://www.vultr.com/?ref=8321130">vultr注册地址</a></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175337.png" alt=""></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175821.png" alt=""></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026175830.png" alt=""></p>
<h2 id="1-1-2-充值"><a href="#1-1-2-充值" class="headerlink" title="1.1.2.充值"></a>1.1.2.充值</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026180004.png" alt=""></p>
<h1 id="二、购买服务器"><a href="#二、购买服务器" class="headerlink" title="二、购买服务器"></a>二、购买服务器</h1><ol>
<li>选择左边栏的Products</li>
<li>服务器类型选择Cloud Compute</li>
<li>服务器地址选择日本（日本的服务器节点网速还行，不容易被墙，也可以选择美国的）</li>
<li>系统选择CentOS7</li>
<li>收费就选择5$每月的（如果也就平常查找资料，看一下新闻和视频的话，选择5刀的够用了，如果使用一段时间后，感觉不够用，也可以升级的）</li>
<li>下面的配置都不用管，直接点击Deploy Now</li>
<li>等待安装完成</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026154313.png" alt="1,2,3步骤"></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026154320.png" alt="4,5步骤"></p>
<h1 id="三、配置服务器"><a href="#三、配置服务器" class="headerlink" title="三、配置服务器"></a>三、配置服务器</h1><h2 id="1-安装xshell"><a href="#1-安装xshell" class="headerlink" title="1.安装xshell"></a>1.安装xshell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1t4COsweV0evZIfCmZrZYVw</span><br><span class="line">提取码：0000</span><br></pre></td></tr></table></figure>
<h2 id="2-查看刚刚创建完成的服务器"><a href="#2-查看刚刚创建完成的服务器" class="headerlink" title="2. 查看刚刚创建完成的服务器"></a>2. 查看刚刚创建完成的服务器</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026160433.png" alt="查看所有服务器"></p>
<h2 id="3-查看具体服务器的ip等信息"><a href="#3-查看具体服务器的ip等信息" class="headerlink" title="3.查看具体服务器的ip等信息"></a>3.查看具体服务器的ip等信息</h2><p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026160713.png" alt="查看服务器信息"></p>
<h2 id="4-连接xshell"><a href="#4-连接xshell" class="headerlink" title="4.连接xshell"></a>4.连接xshell</h2><ol>
<li><p>点击左上角的的文件-&gt;新建</p>
</li>
<li><p>名称随便输入（尽量设置为该服务的ip）</p>
</li>
<li><p>协议选择默认的SSH</p>
</li>
<li><p>主机输入服务器的ip地址（也就是上图中的IP Address）</p>
</li>
<li><p>端口不用改，默认为22</p>
</li>
<li><p>点击左侧的<code>用户身份验证</code></p>
<p> <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026162251.png" alt=""></p>
</li>
<li><p>设置登录账号和密码（用户名：服务器详情图片中的Username，密码为服务器详情图片中的Password）</p>
</li>
</ol>
<p>​    <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026162359.png" alt="xshell配置2"></p>
<p>​    </p>
<ol>
<li>配置完后，点击连接</li>
</ol>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026163106.png" alt="连接成功"></p>
<h2 id="5-配置服务器ssr"><a href="#5-配置服务器ssr" class="headerlink" title="5.配置服务器ssr"></a>5.配置服务器ssr</h2><ul>
<li><p>接下来根据大神们建好的轮子来进行梯子搭建</p>
</li>
<li><p>依次输入以下命令</p>
<ul>
<li><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</code></li>
<li><code>chmod +x shadowsocks.sh</code></li>
<li><code>./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</code></li>
</ul>
</li>
<li><p>然后根据提示输入信息</p>
<ul>
<li>Default password: teddysun.com：梯子密码</li>
<li>Default port: 16846：梯子连接端口</li>
<li><p>Please select stream cipher for shadowsocks-python: 选择加密方式</p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026164840.png" alt="梯子设置"></p>
</li>
</ul>
</li>
<li><p>然后按下回车，等待设置完成</p>
</li>
<li><p>设置完成后，会出现以下图</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026165302.png" alt="设置完成"></p>
</li>
</ul>
<h1 id="四、使用梯子"><a href="#四、使用梯子" class="headerlink" title="四、使用梯子"></a>四、使用梯子</h1><ul>
<li><p>下载连接客户端</p>
<ul>
<li><p>下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026165552.png" alt="下载客户端"></p>
</li>
</ul>
</li>
<li><p>解压下载好的zip文件</p>
</li>
<li><p>运行根目录中的.exe文件</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026170139.png" alt="客户端"></p>
</li>
<li><p>对客户端进行配置</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173236.png" alt=""></p>
<p>  ​                                        </p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173537.png" alt=""></p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173633.png" alt=""></p>
</li>
<li><p>测试是否可以使用</p>
<p>  <img src="https://gitee.com/junpzx/blog-img/raw/master//img/20201026173747.png" alt="测试"></p>
</li>
<li><p>ok，配置成功</p>
</li>
</ul>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Java报错整理（持续更新）</title>
    <url>/posts/7376.html</url>
    <content><![CDATA[<h1 id="资源包报错"><a href="#资源包报错" class="headerlink" title="资源包报错"></a>资源包报错</h1><h2 id="使用Junit4-12时报错"><a href="#使用Junit4-12时报错" class="headerlink" title="使用Junit4.12时报错"></a>使用Junit4.12时报错</h2><p><strong>报错信息：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</span><br></pre></td></tr></table></figure>
<p><strong>解决方案：</strong></p>
<ol>
<li>更换版本为4.10,因为从4.11版本开始，包中不在包含hamcrest，如果必须使用4.11及其之后的版本，请使用方案2</li>
<li>Junit4.12 + hamcrest-core-1.3</li>
</ol>
<p><strong>下载链接：</strong></p>
<p><a href="https://pan.baidu.com/s/1Ki365BCzJE4YRdmdxFTboQ">junit4.10</a></p>
<p><a href="https://pan.baidu.com/s/1P5kIyxILtKrs0ZB-b_RX_g">junit4.11</a></p>
<p><a href="https://pan.baidu.com/s/1wTsBM-7QAe6BpY7VVAM1Kw">junit4.12</a></p>
<p><a href="https://pan.baidu.com/s/1YXlqpT8zB6Ly0wF8XdX-xQ">hamcrest-core-1.3</a></p>
<p>提取码为：0000</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式简介及分类</title>
    <url>/posts/2750.html</url>
    <content><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><h2 id="设计模式的由来"><a href="#设计模式的由来" class="headerlink" title="设计模式的由来"></a>设计模式的由来</h2><p>设计模式的概念最早是由 <code>克⾥斯托佛·亚历⼭⼤</code> 在其著作 <code>《建筑模式语⾔》</code> 中⾸次提出的。 本书介绍 了城市设计的 “语⾔”，提供了253个描述城镇、邻⾥、住宅、花园、房间及⻄部构造的模式， ⽽此类 “语⾔” 的基本单元就是模式。后来，<code>埃⾥希·伽玛</code> 、 <code>约翰·弗利赛德斯</code> 、 <code>拉尔夫·约翰逊</code> 和 <code>理查德·赫尔姆</code> 这四位作者接受了模式的概念。 1994 年， 他们出版了 《设计模式： 可复⽤⾯向对象软件的基础》 ⼀书， 将设计模式的概念应⽤到程序开发领域中。 其实有⼀部分⼈并没有仔细阅读过设计模式的相关书籍和资料，但依旧可以编写出优秀的代码。这主要 是由于在经过众多项⽬的锤炼和对程序设计的不断追求，从⽽在多年编程历程上提炼出来的⼼得体会。 ⽽这份经验最终会与设计模式提到的内容⼏乎⼀致，同样会要求⾼内聚、低耦合、可扩展、可复⽤。你 可能也遇到类似的经历，在学习⼀些框架的源码时，发现它⾥面的某些设计和你在做开发时⼀样。</p>
<h2 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h2><p>设计模式遵循六⼤原则；</p>
<ul>
<li>单⼀职责( ⼀个类和⽅法只做⼀件事 )：一个类或者一个接口只负责唯一项职责，尽量设计出功能单一的接口</li>
<li>⾥⽒替换( 多态，⼦类可扩展⽗类 )</li>
<li>依赖倒置( 细节依赖抽象，下层依赖上层 )：高层模块不应该依赖低层模块具体实现，解耦高层和低层。即面向接口编程，当实现发生变化时，只需提供新的实现类，不需要修改高层模块代码；</li>
<li>接⼝隔离( 建⽴单⼀接⼝ )</li>
<li>迪⽶特原则( 最少知道，降低耦合 )</li>
<li>开闭原则( 抽象架构，扩展实现 )：程序对外扩展开放，对修改关闭；换句话说，当需求发生变化时，我们可以通过添加新模块来满足新需求，而不是通过修改原来的实现代码来满足新需求。</li>
</ul>
<h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><a href="https://www.junpzx.cn/categories/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">创建型模式</a></h2><p>这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性。</p>
<ul>
<li><a href="https://www.junpzx.cn/2020/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">工厂方法</a></li>
<li><a href="https://www.junpzx.cn/2020/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">抽象工厂</a></li>
<li><a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F/">生成器</a></li>
<li><a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">原型</a></li>
<li><a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例</a></li>
</ul>
<h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a><a href="https://www.junpzx.cn/categories/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">结构性模式</a></h2><p>这类模式介绍如何将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效。</p>
<ul>
<li><a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">适配器</a></li>
<li><a href="https://www.junpzx.cn/2020/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/">桥接</a></li>
<li><a href="https://www.junpzx.cn/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">组合</a></li>
<li><a href="https://www.junpzx.cn/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/">装饰</a></li>
<li><a href="https://www.junpzx.cn/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">外观</a></li>
<li><a href="https://www.junpzx.cn/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/">享元</a></li>
<li><a href="https://www.junpzx.cn/2020/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">代理</a></li>
</ul>
<h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><p>这类模式负责对象间的⾼效沟通和职责委派</p>
<ul>
<li>责任链</li>
<li>命令</li>
<li>迭代器</li>
<li>中介者</li>
<li>备忘录</li>
<li>观察者</li>
<li>状态</li>
<li>策略</li>
<li>模板方法</li>
<li>访问者</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算简述</title>
    <url>/posts/17938.html</url>
    <content><![CDATA[<h1 id="and运算-amp"><a href="#and运算-amp" class="headerlink" title="and运算 &amp;"></a>and运算 &amp;</h1><p><strong>相同为1则为1,不为1则为0</strong></p>
<p>and运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数。</p>
<p>相同位的两个数字都为1，则为1；若有一个不为1，则为0。</p>
<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span> </span><br><span class="line"><span class="number">11100</span> （&amp;；或者and）</span><br><span class="line">--------------- </span><br><span class="line"><span class="number">00100</span></span><br></pre></td></tr></table></figure>
<h1 id="or运算"><a href="#or运算" class="headerlink" title="or运算 |"></a>or运算 |</h1><p><strong>只要有一个为1则整体结果为1</strong></p>
<p>or运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。</p>
<p>相同位只要一个为1即为1。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span> </span><br><span class="line"><span class="number">11100</span> （|或者or）</span><br><span class="line">---------------- </span><br><span class="line"><span class="number">11101</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="xor运算"><a href="#xor运算" class="headerlink" title="xor运算 ^"></a>xor运算 ^</h1><p><strong>相同位不同则为1，相同则为0</strong></p>
<p>异或的符号是^。按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作. 操作的结果是如果某位不同则该位为1, 否则该位为0.</p>
<p>xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即（a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19000309作为密钥。1314520 xor 19000309= 20309293，我就把20309293告诉MM。MM再次计算20309293xor 19000309的值，得到1314520。</p>
<p>相同位不同则为1，相同则为0。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00101</span></span><br><span class="line"><span class="number">11100</span> （^或者xor）</span><br><span class="line">---------------- </span><br><span class="line"><span class="number">11001</span></span><br></pre></td></tr></table></figure>
<h1 id="not运算"><a href="#not运算" class="headerlink" title="not运算 ~"></a>not运算 ~</h1><p><strong>not运算的定义是把内存中的0和1全部取反。</strong></p>
<p>使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是<a href="https://baike.baidu.com/item/无符号整数">无符号整数</a>（不能表示负数），那么得到的值就是它与该类型<a href="https://baike.baidu.com/item/上界">上界</a>的差，因为无符号类型的数是用00到$FFFF依次表示的。</p>
<h1 id="shl运算-lt-lt"><a href="#shl运算-lt-lt" class="headerlink" title="shl运算 &lt;&lt;"></a>shl运算 &lt;&lt;</h1><p>a shl b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 shl 2 = 400。可以看出，a shl b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2。</p>
<p>通常认为a shl 1比a * 2更快，因为前者是更底层一些的操作。因此程序中乘以2的操作请尽量用左移一位来代替。</p>
<p>定义一些常量可能会用到shl运算。你可以方便地用1 shl 16 - 1来表示65535。很多算法和数据结构要求数据规模必须是2的幂，此时可以用shl来定义Max_N等常量。</p>
<h1 id="shr运算-gt-gt"><a href="#shr运算-gt-gt" class="headerlink" title="shr运算 &gt;&gt;"></a>shr运算 &gt;&gt;</h1><p>和shl相似，a shr b表示二进制右移b位（去掉末b位），相当于a除以2的b次方（取整）。和上面一样的例子，那么400 shr2 = 100。我们也经常用shr 1来代替div 2，比如<a href="https://baike.baidu.com/item/二分查找">二分查找</a>、堆的插入操作等等。想办法用shr代替除法运算可以使程序效率大大提高。最大公约数的二进制算法用除以2操作来代替慢得出奇的mod运算，效率可以提高60%。</p>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Http返回状态码</title>
    <url>/posts/37313.html</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http状态返回代码</th>
<th style="text-align:center">返回代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>1xx</strong></td>
<td style="text-align:center"><strong>临时响应</strong></td>
<td style="text-align:center"><strong>表示临时响应并需要请求者继续执行操作的状态代码。</strong></td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">继续</td>
<td style="text-align:center">请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">切换协议</td>
<td style="text-align:center">请求者已要求服务器切换协议，服务器已确认并准备切换。</td>
</tr>
<tr>
<td style="text-align:center"><strong>2xx</strong></td>
<td style="text-align:center"><strong>成功</strong></td>
<td style="text-align:center"><strong>表示成功处理了请求的状态代码。</strong></td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">成功</td>
<td style="text-align:center">服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:center">已创建</td>
<td style="text-align:center">请求成功并且服务器创建了新的资源。</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:center">已接受</td>
<td style="text-align:center">服务器已接受请求，但尚未处理。</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:center">非授权信息</td>
<td style="text-align:center">服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:center">无内容</td>
<td style="text-align:center">服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:center">重置内容</td>
<td style="text-align:center">服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:center">部分内容</td>
<td style="text-align:center">服务器成功处理了部分 GET 请求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>3xx</strong></td>
<td style="text-align:center"><strong>重定向</strong></td>
<td style="text-align:center"><strong>表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向。</strong></td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:center">多种选择</td>
<td style="text-align:center">针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">永久移动</td>
<td style="text-align:center">请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">临时移动</td>
<td style="text-align:center">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">查看其他位置</td>
<td style="text-align:center">请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">未修改</td>
<td style="text-align:center">自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:center">使用代理</td>
<td style="text-align:center">请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:center">临时重定向</td>
<td style="text-align:center">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>4xx</strong></td>
<td style="text-align:center"><strong>请求错误</strong></td>
<td style="text-align:center"><strong>这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:center">错误请求</td>
<td style="text-align:center">服务器不理解请求的语法。</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:center">未授权</td>
<td style="text-align:center">请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">禁止</td>
<td style="text-align:center">服务器拒绝请求。</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">未找到</td>
<td style="text-align:center">服务器找不到请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:center">方法禁用</td>
<td style="text-align:center">禁用请求中指定的方法。</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:center">不接受</td>
<td style="text-align:center">无法使用请求的内容特性响应请求的网页。</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:center">需要代理授权</td>
<td style="text-align:center">此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:center">请求超时</td>
<td style="text-align:center">服务器等候请求时发生超时。</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:center">已删除</td>
<td style="text-align:center">如果请求的资源已永久删除，服务器就会返回此响应。</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:center">需要有效长度</td>
<td style="text-align:center">服务器不接受不含有效内容长度标头字段的请求。</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:center">未满足前提条件</td>
<td style="text-align:center">服务器未满足请求者在请求中设置的其中一个前提条件。</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:center">请求实体过大</td>
<td style="text-align:center">服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:center">请求的 URI 过长</td>
<td style="text-align:center">请求的 URI（通常为网址）过长，服务器无法处理。</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:center">不支持的媒体类型</td>
<td style="text-align:center">请求的格式不受请求页面的支持。</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:center">请求范围不符合要求</td>
<td style="text-align:center">如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>
</tr>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:center">未满足期望值</td>
<td style="text-align:center">服务器未满足”期望”请求标头字段的要求。</td>
</tr>
<tr>
<td style="text-align:center"><strong>5xx</strong></td>
<td style="text-align:center"><strong>服务器错误</strong></td>
<td style="text-align:center"><strong>这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</strong></td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">服务器内部错误</td>
<td style="text-align:center">服务器遇到错误，无法完成请求。</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:center">尚未实施</td>
<td style="text-align:center">服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">错误网关</td>
<td style="text-align:center">服务器作为网关或代理，从上游服务器收到无效响应。</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:center">服务不可用</td>
<td style="text-align:center">服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:center">网关超时</td>
<td style="text-align:center">服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:center">HTTP 版本不受支持</td>
<td style="text-align:center">服务器不支持请求中所用的 HTTP 协议版本。</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>笔记</category>
        <category>基础</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript高阶函数</title>
    <url>/posts/39448.html</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><blockquote>
<p><strong>函数式编程</strong>（英语：<strong>functional programming</strong>）或称<strong>函数程序设计</strong>、<strong>泛函编程</strong>，是一种<a href="https://zh.wikipedia.org/wiki/编程范式">编程范式</a>，它将<a href="https://zh.wikipedia.org/wiki/電腦運算">电脑运算</a>视为<a href="https://zh.wikipedia.org/wiki/函数">函数</a>运算，并且避免使用<a href="https://zh.wikipedia.org/w/index.php?title=程式状态&amp;action=edit&amp;redlink=1">程序状态</a>以及<a href="https://zh.wikipedia.org/wiki/不可變物件">易变对象</a>。其中，<a href="https://zh.wikipedia.org/wiki/Λ演算">λ演算</a>（lambda calculus）为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>
<p>比起<a href="https://zh.wikipedia.org/wiki/指令式編程">指令式编程</a>，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p>
<p>在函数式编程中，函数是<a href="https://zh.wikipedia.org/wiki/第一类对象">第一类对象</a>，意思是说一个函数，既可以作为其它函数的参数（输入值），也可以从函数中返回（输入值），被修改或者被分配给一个变量。</p>
</blockquote>
<p><strong>简单来说:</strong>函数式是一种编程形式，你可以将函数作为参数传递给其他函数，并将它们作为值返回。 在函数式编程中，我们以函数的形式思考和编程。</p>
<p>JavaScript，Haskell，Clojure，Scala 和 Erlang 是部分实现了函数式编程的语言。</p>
<h1 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h1><p>如果你在学习 JavaScript，你可能听说过 JavaScript 将函数视为一等公民。 那是因为在 JavaScript 及其他函数式编程语言中，<strong>函数是对象</strong>。</p>
<p>在 JavaScript 中，函数是一种特殊类型的对象。 它们是 Function objects。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHello();   <span class="comment">// 控制台上打印 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<p>为了更进一步的证明js中的函数是对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sayHello.name=<span class="string">&#x27;My Name is SayHello&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHello.name)   <span class="comment">// 控制台打印 &#x27;My Name is SayHello&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> - 虽然这在 JavaScript 中完全有效，但这被认为是 harmful 的做法。 你不应该向函数对象添加随机属性，如果不得不这样做，请使用对象。</p>
<p>在 JavaScript 中，你对其他类型（如对象，字符串或数字）执行的所有操作都可以对函数执行。 你可以将它们作为参数传递给其他函数（回调函数），将它们分配给变量并传递它们等等。这就是 JavaScript 中的函数被称为一等函数的原因。</p>
<h2 id="将函数赋值给变量"><a href="#将函数赋值给变量" class="headerlink" title="将函数赋值给变量"></a>将函数赋值给变量</h2><p>我们可以在 JavaScript 中将函数赋值给变量。 例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="keyword">function</span> (<span class="params">z</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> z * z</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">5</span>))  <span class="comment">// 控制台打印 &#x27;25&#x27;</span></span><br></pre></td></tr></table></figure>
<p>我们也可以将该方法进行传递:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = square;</span><br><span class="line"><span class="built_in">console</span>.log(temp(<span class="number">6</span>))   <span class="comment">//控制台打印36</span></span><br></pre></td></tr></table></figure>
<h2 id="将函数作为参数传递"><a href="#将函数作为参数传递" class="headerlink" title="将函数作为参数传递"></a>将函数作为参数传递</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">type,sayHello,sayBye</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 根据就近原则,此处使用的是方法参数中的sayHello</span></span><br><span class="line">        sayHello();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        sayBye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(<span class="number">1</span>,sayHello,sayBye); <span class="comment">//控制台打印 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/数学">数学</a>和<a href="https://zh.wikipedia.org/wiki/计算机科学">计算机科学</a>中，<strong>高阶函数</strong>是至少满足下列一个条件的<a href="https://zh.wikipedia.org/wiki/函数">函数</a>：</p>
<ul>
<li>接受一个或多个函数作为输入</li>
<li>输出一个函数</li>
</ul>
<p>在数学中它们也叫做<a href="https://zh.wikipedia.org/wiki/算子">算子</a>（运算符）或<a href="https://zh.wikipedia.org/wiki/泛函">泛函</a>。<a href="https://zh.wikipedia.org/wiki/微积分">微积分</a>中的<a href="https://zh.wikipedia.org/wiki/导数">导数</a>就是常见的例子，因为它映射一个函数到另一个函数。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/Lambda演算">无类型lambda演算</a>，所有函数都是高阶的；在<a href="https://zh.wikipedia.org/wiki/有类型lambda演算">有类型lambda演算</a>（大多数<a href="https://zh.wikipedia.org/wiki/函数式编程语言">函数式编程语言</a>都从中演化而来）中，高阶函数一般是那些函数型别包含多于一个箭头的函数。在函数式编程中，返回另一个函数的高阶函数被称为<a href="https://zh.wikipedia.org/wiki/Curry化">Curry化</a>的函数。</p>
<p>在很多函数式编程语言中能找到的<code>map</code>函数是高阶函数的一个例子。它接受一个函数<strong>f</strong>作为参数，并返回接受一个列表并应用<strong>f</strong>到它的每个元素的一个函数。</p>
<p>高阶函数的其他例子包括<a href="https://zh.wikipedia.org/wiki/函数复合">函数复合</a>、<a href="https://zh.wikipedia.org/wiki/积分">积分</a>和常量函数λ<em>x</em>.λ<em>y</em>.<em>x</em>。</p>
</blockquote>
<p>高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</p>
<p>例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。</p>
<h2 id="JavaScript内置高阶函数"><a href="#JavaScript内置高阶函数" class="headerlink" title="JavaScript内置高阶函数"></a>JavaScript内置高阶函数</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><strong>作用: </strong>filter用于对数组进行过滤。它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<p><strong>注意:</strong> </p>
<ul>
<li>filter()不会对空数组进行检测</li>
<li>filter()不会改变原始数组</li>
</ul>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, indedx, arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>第一个参数为函数</p>
<p>这个回调函数的返回值是一个boolean值</p>
<p>当检查元素符合过滤条件时,返回true,函数内部会自动将这个元素加入新数组中</p>
<p>当不符合条件时会返回false，函数内部会过滤掉这个元素</p>
<p><strong>例子</strong></p>
<p>找出nums数组中小于50的数字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray=nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray)  <span class="comment">// 打印结果 [20, 14, 15, 7]</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray2=nums.filter(<span class="function"><span class="params">n</span>=&gt;</span>n&lt;<span class="number">50</span>)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray2) <span class="comment">// 打印结果 [20, 14, 15, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><strong>作用：</strong>返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p>
<p><strong>注意：</strong></p>
<ul>
<li>map()不会对空数组进行检测</li>
<li>map()不会改变原始数组</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisIndex</span>)</span></span><br></pre></td></tr></table></figure>
<p>function(currentValue, index, arr)：必须为一个函数，数组中的每个元素都会执行这个函数。其中函数参数：</p>
<ul>
<li>currentValue：必须,当前元素的的值。</li>
<li>index：可选,当前元素的索引。</li>
<li>arr：可选,当前元素属于的数组对象。</li>
<li>thisValue：可选。对象作为该执行回调时使用，传递给函数，用作”this”的值。</li>
</ul>
<p><strong>例子</strong></p>
<p>将nums数组中的数字*2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray=nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray)  <span class="comment">// 打印结果 [40, 28, 30, 14, 178, 198, 112]</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> resultArray2=nums.map(<span class="function"><span class="params">n</span>=&gt;</span>n * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(resultArray2) <span class="comment">// 打印结果 [40, 28, 30, 14, 178, 198, 112]</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><strong>作用：</strong></p>
<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<p><strong>注意：</strong></p>
<ul>
<li>educe() 对于空数组是不会执行回调函数的和map一样。</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>function(total,currentValue, index,arr)：必需。用于执行每个数组元素的函数。函数参数:</p>
<ul>
<li>total    必需,初始值, 或者计算结束后的返回值。</li>
<li>currentValue    必需,当前元素</li>
<li>currentIndex    可选,当前元素的索引</li>
<li>arr    可选,当前元素所属的数组对象。</li>
</ul>
<p><strong>例子</strong></p>
<p>计算nums数组中数字的和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">56</span>]</span><br><span class="line"><span class="comment">// 不使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> total=nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prevValue,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(total)  <span class="comment">// 打印结果 300</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> total2=nums.reduce(<span class="function">(<span class="params">prevValue,n</span>)=&gt;</span>prevValue + n )</span><br><span class="line"><span class="built_in">console</span>.log(total2) <span class="comment">// 打印结果 300</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关知识点（持续更新）</title>
    <url>/posts/44308.html</url>
    <content><![CDATA[<h1 id="数组中哪些方法是响应式的？"><a href="#数组中哪些方法是响应式的？" class="headerlink" title="数组中哪些方法是响应式的？"></a>数组中哪些方法是响应式的？</h1><p><strong>注意：通过数组下标直接修改数组元素的值，界面不会发生改变，但是数组内的值已经修改，如果需要修改的时候是响应式的，那么可以通过以下方法：</strong></p>
<ul>
<li><strong>数组的splice方法</strong></li>
<li><p><strong>vue.set(array,下标,值)</strong></p>
<table>
   <tr>
       <td>方法名</td>
       <td>作用</td>
       <td>语法</td>
       <td>是否是响应式</td>
   </tr>
   <tr>
       <td>push</td>
       <td>在数组最后追加元素</td>
       <td>array.push(元素1,元素2...)</td>
       <td>是</td>
   </tr>
   <tr>
       <td>pop</td>
       <td>移除数组中最后一位元素</td>
       <td>array.pop()</td>
       <td>是</td>
   </tr>
    <tr>
       <td>shift</td>
       <td>移除数组中第一位元素</td>
       <td>array.shift()</td>
       <td>是</td>
   </tr>
    <tr>
       <td>unshift</td>
       <td>在数组最前面添加元素</td>
       <td>array.unshift(元素1,元素2...)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>splice</td>
       <td>删除元素/插入元素/替换元素</td>
       <td>array.splice(开始下标,需要删除的数量, 添加元素1,添加元素,...)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>sort</td>
       <td>将数组进行排序</td>
       <td>array.sort(function)</td>
       <td>是</td>
   </tr>
    <tr>
       <td>reverse</td>
       <td>将数组内的元素进行反转</td>
       <td>array.reverse()</td>
       <td>是</td>
   </tr>
</table>

</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本操作(二)</title>
    <url>/posts/34330.html</url>
    <content><![CDATA[<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><strong>使用:</strong></p>
<ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> &gt;</span><br><span class="line">    &lt;h2 v-<span class="keyword">if</span>=<span class="string">&quot;display&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-<span class="keyword">else</span>&gt;&#123;&#123;message + <span class="string">&#x27;2&#x27;</span>&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;checkout()&quot;</span>&gt;切换&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        display: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        checkout()&#123;</span><br><span class="line">            <span class="built_in">this</span>.display = !<span class="built_in">this</span>.display;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意:如果需要判断的层级很多,那么推荐使用计算属性</strong></p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>主要用于控制某个元素是否显示</p>
<h3 id="跟v-if的区别"><a href="#跟v-if的区别" class="headerlink" title="跟v-if的区别"></a>跟v-if的区别</h3><ul>
<li>v-if:当条件为false时,包含v-if指令的元素,根本就不会存在在dom中</li>
<li>v-show: 当条件为false时,包含v-show指令的元素添加了一个行内样式:display: none</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>v-if是在控制是否在dom中显示,v-show是在设置行内样式display</p>
<p>如果需要频繁切换显示隐藏,那么推荐使用v-show</p>
<p>如果只是一次切换,那么推荐使用v-if</p>
<h1 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h1><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="不需要下标"><a href="#不需要下标" class="headerlink" title="不需要下标"></a>不需要下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in names&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        names: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="需要下标"><a href="#需要下标" class="headerlink" title="需要下标"></a>需要下标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in names&quot;</span>&gt;</span><br><span class="line">            &#123;&#123;index + <span class="number">1</span>&#125;&#125;.&#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        names: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><h3 id="只要Value"><a href="#只要Value" class="headerlink" title="只要Value"></a>只要Value</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in peopleInfo&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Key和Value都要"><a href="#Key和Value都要" class="headerlink" title="Key和Value都要"></a>Key和Value都要</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,key) in peopleInfo&quot;</span>&gt;&#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Key和Vue和Index都要"><a href="#Key和Vue和Index都要" class="headerlink" title="Key和Vue和Index都要"></a>Key和Vue和Index都要</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item,key,index) in peopleInfo&quot;</span>&gt;&#123;&#123;index+<span class="number">1</span>&#125;&#125;.&#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        peopleInfo:&#123;</span><br><span class="line">            name: <span class="string">&#x27;JunPzx&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            height: <span class="number">1.80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件的Key属性"><a href="#组件的Key属性" class="headerlink" title="组件的Key属性"></a>组件的Key属性</h2><ul>
<li><p>官方推荐我们在使用v-for时,给对应的元素或组件添加上一个:key属性</p>
</li>
<li><p>为什么需要这个key属性呢?</p>
<ul>
<li>这个其实和Vue的虚拟DOM的Diff算法有关系</li>
</ul>
</li>
<li><p>当某一层有很多相同的节点时,也就是列表节点时,我们希望插入一个新的节点</p>
<ul>
<li>我们希望在B和C的中间添加一个F,Diff算法默认执行起来是这样的</li>
<li>就是把C更新成F,D更新成C,E更新成D,最后在插入一个F,如下图左下</li>
</ul>
</li>
<li><p>所以我们需要使用key来给每一个节点做一个唯一标识</p>
<ul>
<li>Diff算法就可以正确的识别此节点</li>
<li>找到正确的位置去插入新的节点</li>
</ul>
</li>
<li><p><strong>总结：key的作用主要就是为了高效的更新虚拟DOM</strong></p>
</li>
</ul>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200929144135.png" alt="有key和无key的插入流程"></p>
<p><strong>尽量保证key的唯一性</strong></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript事件</title>
    <url>/posts/9585.html</url>
    <content><![CDATA[<h1 id="常见类别"><a href="#常见类别" class="headerlink" title="常见类别"></a>常见类别</h1><h2 id="资源事件"><a href="#资源事件" class="headerlink" title="资源事件"></a>资源事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">资源加载失败时。</td>
</tr>
<tr>
<td style="text-align:left"><code>abort</code></td>
<td style="text-align:left">正在加载资源已经被中止时。</td>
</tr>
<tr>
<td style="text-align:left"><code>load</code></td>
<td style="text-align:left">资源及其相关资源已完成加载。</td>
</tr>
<tr>
<td style="text-align:left"><code>beforeunload</code></td>
<td style="text-align:left">window，document 及其资源即将被卸载。</td>
</tr>
<tr>
<td style="text-align:left"><code>unload</code></td>
<td style="text-align:left">文档或一个依赖资源正在被卸载。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="网络事件"><a href="#网络事件" class="headerlink" title="网络事件"></a>网络事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>online</code></td>
<td style="text-align:left">浏览器已获得网络访问。</td>
</tr>
<tr>
<td style="text-align:left"><code>offline</code></td>
<td style="text-align:left">浏览器已失去网络访问。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>focus</code></td>
<td style="text-align:left">元素获得焦点（不会冒泡）。</td>
</tr>
<tr>
<td style="text-align:left"><code>blur</code></td>
<td style="text-align:left">元素失去焦点（不会冒泡）。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="WebSocket-事件"><a href="#WebSocket-事件" class="headerlink" title="WebSocket 事件"></a>WebSocket 事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>open</code></td>
<td style="text-align:left">WebSocket 连接已建立。</td>
</tr>
<tr>
<td style="text-align:left"><code>message</code></td>
<td style="text-align:left">通过 WebSocket 接收到一条消息。</td>
</tr>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">WebSocket 连接异常被关闭（比如有些数据无法发送）。</td>
</tr>
<tr>
<td style="text-align:left"><code>close</code></td>
<td style="text-align:left">WebSocket 连接已关闭。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="会话历史事件"><a href="#会话历史事件" class="headerlink" title="会话历史事件"></a>会话历史事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pagehide</code></td>
<td style="text-align:left">A session history entry is being traversed from.</td>
</tr>
<tr>
<td style="text-align:left"><code>pageshow</code></td>
<td style="text-align:left">A session history entry is being traversed to.</td>
</tr>
<tr>
<td style="text-align:left"><code>popstate</code></td>
<td style="text-align:left">A session history entry is being navigated to (in certain cases).</td>
</tr>
</tbody>
</table>
</div>
<h2 id="CSS动画事件"><a href="#CSS动画事件" class="headerlink" title="CSS动画事件"></a>CSS动画事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>animationstart</code></td>
<td style="text-align:left">某个 CSS 动画开始时触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>animationend</code></td>
<td style="text-align:left">某个 CSS 动画完成时触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>animationiteration</code></td>
<td style="text-align:left">某个 CSS 动画完成后重新开始时触发。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="CSS过渡事件"><a href="#CSS过渡事件" class="headerlink" title="CSS过渡事件"></a>CSS过渡事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>transitionstart</code></td>
<td style="text-align:left">A <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions">CSS transition</a> has actually started (fired after any delay).</td>
</tr>
<tr>
<td style="text-align:left"><code>transitioncancel</code></td>
<td style="text-align:left">CSS过渡被取消</td>
</tr>
<tr>
<td style="text-align:left"><code>transitionend</code></td>
<td style="text-align:left">CSS过渡已经完成</td>
</tr>
<tr>
<td style="text-align:left"><code>transitionrun</code></td>
<td style="text-align:left">A <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions">CSS transition</a> has begun running (fired before any delay starts).</td>
</tr>
</tbody>
</table>
</div>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">事件名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>reset</code></td>
<td style="text-align:left">点击重置按钮时</td>
</tr>
<tr>
<td style="text-align:left"><code>submit</code></td>
<td style="text-align:left">点击提交按钮</td>
</tr>
</tbody>
</table>
</div>
<h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">时间名称</th>
<th style="text-align:left">何时触发</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>beforeprint</code></td>
<td style="text-align:left">打印机已经就绪时触发</td>
</tr>
<tr>
<td style="text-align:left"><code>afterprint</code></td>
<td style="text-align:left">打印机关闭时触发</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文本写作事件"><a href="#文本写作事件" class="headerlink" title="文本写作事件"></a>文本写作事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>compositionstart</code></td>
<td style="text-align:left">The composition of a passage of text is prepared (similar to keydown for a keyboard input, but works with other inputs such as speech recognition).</td>
</tr>
<tr>
<td style="text-align:left"><code>compositionupdate</code></td>
<td style="text-align:left">A character is added to a passage of text being composed.</td>
</tr>
<tr>
<td style="text-align:left"><code>compositionend</code></td>
<td style="text-align:left">The composition of a passage of text has been completed or canceled.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="视图事件"><a href="#视图事件" class="headerlink" title="视图事件"></a>视图事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>fullscreenchange</code></td>
<td style="text-align:left">An element was turned to fullscreen mode or back to normal mode.</td>
</tr>
<tr>
<td style="text-align:left"><code>fullscreenerror</code></td>
<td style="text-align:left">It was impossible to switch to fullscreen mode for technical reasons or because the permission was denied.</td>
</tr>
<tr>
<td style="text-align:left"><code>resize</code></td>
<td style="text-align:left">The document view has been resized.</td>
</tr>
<tr>
<td style="text-align:left"><code>scroll</code></td>
<td style="text-align:left">The document view or an element has been scrolled.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>cut</code></td>
<td style="text-align:left">已经剪贴选中的文本内容并且复制到了剪贴板。</td>
</tr>
<tr>
<td style="text-align:left"><code>copy</code></td>
<td style="text-align:left">已经把选中的文本内容复制到了剪贴板。</td>
</tr>
<tr>
<td style="text-align:left"><code>paste</code></td>
<td style="text-align:left">从剪贴板复制的文本内容被粘贴。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>keydown</code></td>
<td style="text-align:left">按下任意按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>keypress</code></td>
<td style="text-align:left">除 Shift、Fn、CapsLock 外的任意键被按住。（连续触发。）</td>
</tr>
<tr>
<td style="text-align:left"><code>keyup</code></td>
<td style="text-align:left">释放任意按键。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>auxclick</code></td>
<td style="text-align:left">A pointing device button (ANY non-primary button) has been pressed and released on an element.</td>
</tr>
<tr>
<td style="text-align:left"><code>click</code></td>
<td style="text-align:left">在元素上按下并释放任意鼠标按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>contextmenu</code></td>
<td style="text-align:left">右键点击（在右键菜单显示前触发）。</td>
</tr>
<tr>
<td style="text-align:left"><code>dblclick</code></td>
<td style="text-align:left">在元素上双击鼠标按钮。</td>
</tr>
<tr>
<td style="text-align:left"><code>mousedown</code></td>
<td style="text-align:left">在元素上按下任意鼠标按钮。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseenter</code></td>
<td style="text-align:left">指针移到有事件监听的元素内。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseleave</code></td>
<td style="text-align:left">指针移出元素范围外（不冒泡）。</td>
</tr>
<tr>
<td style="text-align:left"><code>mousemove</code></td>
<td style="text-align:left">指针在元素内移动时持续触发。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseover</code></td>
<td style="text-align:left">指针移到有事件监听的元素或者它的子元素内。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseout</code></td>
<td style="text-align:left">指针移出元素，或者移到它的子元素上。</td>
</tr>
<tr>
<td style="text-align:left"><code>mouseup</code></td>
<td style="text-align:left">在元素上释放任意鼠标按键。</td>
</tr>
<tr>
<td style="text-align:left"><code>pointerlockchange</code></td>
<td style="text-align:left">鼠标被锁定或者解除锁定发生时。</td>
</tr>
<tr>
<td style="text-align:left"><code>pointerlockerror</code></td>
<td style="text-align:left">可能因为一些技术的原因鼠标锁定被禁止时。</td>
</tr>
<tr>
<td style="text-align:left"><code>select</code></td>
<td style="text-align:left">有文本被选中。</td>
</tr>
<tr>
<td style="text-align:left"><code>wheel</code></td>
<td style="text-align:left">滚轮向任意方向滚动。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>drag</code></td>
<td style="text-align:left">正在拖动元素或文本选区（在此过程中持续触发，每 350ms 触发一次）</td>
</tr>
<tr>
<td style="text-align:left"><code>dragend</code></td>
<td style="text-align:left">拖放操作结束。（松开鼠标按钮或按下 Esc 键）</td>
</tr>
<tr>
<td style="text-align:left"><code>dragenter</code></td>
<td style="text-align:left">被拖动的元素或文本选区移入有效释放目标区</td>
</tr>
<tr>
<td style="text-align:left"><code>dragstart</code></td>
<td style="text-align:left">用户开始拖动HTML元素或选中的文本</td>
</tr>
<tr>
<td style="text-align:left"><code>dragleave</code></td>
<td style="text-align:left">被拖动的元素或文本选区移出有效释放目标区</td>
</tr>
<tr>
<td style="text-align:left"><code>dragover</code></td>
<td style="text-align:left">被拖动的元素或文本选区正在有效释放目标上被拖动 （在此过程中持续触发，每350ms触发一次）</td>
</tr>
<tr>
<td style="text-align:left"><code>drop</code></td>
<td style="text-align:left">元素在有效释放目标区上释放</td>
</tr>
</tbody>
</table>
</div>
<h2 id="媒体事件"><a href="#媒体事件" class="headerlink" title="媒体事件"></a>媒体事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>audioprocess</code></td>
<td style="text-align:left">The input buffer of a <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ScriptProcessorNode"><code>ScriptProcessorNode</code></a> is ready to be processed.</td>
</tr>
<tr>
<td style="text-align:left"><code>canplay</code></td>
<td style="text-align:left">The browser can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</td>
</tr>
<tr>
<td style="text-align:left"><code>canplaythrough</code></td>
<td style="text-align:left">The browser estimates it can play the media up to its end without stopping for content buffering.</td>
</tr>
<tr>
<td style="text-align:left"><code>complete</code></td>
<td style="text-align:left">The rendering of an <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/OfflineAudioContext"><code>OfflineAudioContext</code></a> is terminated.</td>
</tr>
<tr>
<td style="text-align:left"><code>durationchange</code></td>
<td style="text-align:left">The <code>duration</code> attribute has been updated.</td>
</tr>
<tr>
<td style="text-align:left"><code>emptied</code></td>
<td style="text-align:left">The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the <a href="https://developer.mozilla.org/zh-CN/docs/XPCOM_Interface_Reference/NsIDOMHTMLMediaElement"><code>load()</code></a> method is called to reload it.</td>
</tr>
<tr>
<td style="text-align:left"><code>ended</code></td>
<td style="text-align:left">Playback has stopped because the end of the media was reached.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadeddata</code></td>
<td style="text-align:left">The first frame of the media has finished loading.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadedmetadata</code></td>
<td style="text-align:left">The metadata has been loaded.</td>
</tr>
<tr>
<td style="text-align:left"><code>pause</code></td>
<td style="text-align:left">Playback has been paused.</td>
</tr>
<tr>
<td style="text-align:left"><code>play</code></td>
<td style="text-align:left">Playback has begun.</td>
</tr>
<tr>
<td style="text-align:left"><code>playing</code></td>
<td style="text-align:left">Playback is ready to start after having been paused or delayed due to lack of data.</td>
</tr>
<tr>
<td style="text-align:left"><code>ratechange</code></td>
<td style="text-align:left">The playback rate has changed.</td>
</tr>
<tr>
<td style="text-align:left"><code>seeked</code></td>
<td style="text-align:left">A <em>seek</em> operation completed.</td>
</tr>
<tr>
<td style="text-align:left"><code>seeking</code></td>
<td style="text-align:left">A <em>seek</em> operation began.</td>
</tr>
<tr>
<td style="text-align:left"><code>stalled</code></td>
<td style="text-align:left">The user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</td>
</tr>
<tr>
<td style="text-align:left"><code>suspend</code></td>
<td style="text-align:left">Media data loading has been suspended.</td>
</tr>
<tr>
<td style="text-align:left"><code>timeupdate</code></td>
<td style="text-align:left">The time indicated by the <code>currentTime</code> attribute has been updated.</td>
</tr>
<tr>
<td style="text-align:left"><code>volumechange</code></td>
<td style="text-align:left">The volume has changed.</td>
</tr>
<tr>
<td style="text-align:left"><code>waiting</code></td>
<td style="text-align:left">Playback has stopped because of a temporary lack of data.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">Fired When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>abort</code></td>
<td style="text-align:left">Progression has been terminated (not due to an error).</td>
</tr>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">Progression has failed.</td>
</tr>
<tr>
<td style="text-align:left"><code>load</code></td>
<td style="text-align:left">Progression has been successful.</td>
</tr>
<tr>
<td style="text-align:left"><code>loadend</code></td>
<td style="text-align:left">Progress has stopped (after “error”, “abort” or “load” have been dispatched).</td>
</tr>
<tr>
<td style="text-align:left"><code>loadstart</code></td>
<td style="text-align:left">Progress has begun.</td>
</tr>
<tr>
<td style="text-align:left"><code>progress</code></td>
<td style="text-align:left">In progress.</td>
</tr>
<tr>
<td style="text-align:left"><code>timeout</code></td>
<td style="text-align:left">Progression is terminated due to preset time expiring.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h2><p><code>change</code><br><code>storage</code></p>
<h2 id="更新事件"><a href="#更新事件" class="headerlink" title="更新事件"></a>更新事件</h2><p><code>checking</code><br><code>downloading</code><br><code>error</code><br><code>noupdate</code><br><code>obsolete</code><br><code>updateready</code></p>
<h2 id="值变化事件"><a href="#值变化事件" class="headerlink" title="值变化事件"></a>值变化事件</h2><p><code>broadcast</code><br><code>CheckboxStateChange</code><br><code>hashchange</code><br><code>input</code><br><code>RadioStateChange</code><br><code>readystatechange</code><br><code>ValueChange</code></p>
<h2 id="未分类的事件"><a href="#未分类的事件" class="headerlink" title="未分类的事件"></a>未分类的事件</h2><p><code>invalid</code><br><code>message</code><br><code>message</code><br><code>open</code><br><code>show</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">更多事件</a></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES语法(持续更新)</title>
    <url>/posts/28374.html</url>
    <content><![CDATA[<h1 id="let和var"><a href="#let和var" class="headerlink" title="let和var"></a>let和var</h1><p>事实上var的设计可以看成JavaScript语言设计上的错误,但是这种错误多半不能修复和移除,因为需要向后兼容.</p>
<ul>
<li>大概十年前,Brendan Eich就决定修复这个问题,于是他添加了一个新的关键字:let</li>
<li>我们可以将let看成更加完美的var</li>
</ul>
<h2 id="var问题分析"><a href="#var问题分析" class="headerlink" title="var问题分析"></a>var问题分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">4</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">5</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925103505.png" alt="运行结果"></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="为什么点击每一个按钮的打印结果都为-第五个按钮被点击"><a href="#为什么点击每一个按钮的打印结果都为-第五个按钮被点击" class="headerlink" title="为什么点击每一个按钮的打印结果都为 第五个按钮被点击?"></a><strong>为什么点击每一个按钮的打印结果都为</strong> <code>第五个按钮被点击</code><strong>?</strong></h4><p>​    这是因为当给btns[i]添加click事件时,其事件内部使用该变量i,当循环继续执行,事件内部引用的i的值被修改了,所以才会在打印时全部都是第五个按钮被点击</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如果像上面那样,在事件添加完毕后,将i的值修改为3,那么所有按钮的打印结果都为<code>第3个按钮被点击</code></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一-使用闭包"><a href="#方案一-使用闭包" class="headerlink" title="方案一:使用闭包"></a>方案一:使用闭包</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">        btns[num].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+num+<span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925105049.png" alt="运行结果"></p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p><strong>为什么能使用闭包来解决该问题?</strong></p>
<p>​    这个就类似于Java中的值传递和引用传递,当你不使用闭包时,你所有按钮事件内部的i是同一个i,也就是它们的i的引用地址是相同的,那么你修改了i的值,因为你引用的都是同一个i,那么得到那个结果也就不足为奇了。</p>
<p>​    如果使用了闭包,就类似于,你给每一个按钮添加事件时,将i传入进去,函数内部使用局部变量num用来保存i的值(<strong>函数是一个作用域</strong>),那么我使用的就是num的值,而不是i的引用,所以你修改了i的值,不关num的事,所以最后的输出结果为所期待的结果</p>
<h4 id="方案二-使用let"><a href="#方案二-使用let" class="headerlink" title="方案二:使用let"></a>方案二:使用let</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span> + i + <span class="string">&#x27;个按钮被点击&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  i = <span class="number">3</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://gitee.com/junpzx/blog-img/raw/master/img/20200925111537.png" alt="运行结果"></p>
<h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>ES6中加入了let,let它是有if和for的块级作用域。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>ES5之前因为if和for都没有块级作用域的概念,所以在很多使用,我们必须借助于function的作用域来解决应用外面变量的问题。</li>
<li>ES6中加入了let,let它是有if和for的块级作用域。</li>
</ul>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>在很多语言中都已经存在,主要的作用是将某个变量修饰成常量。</li>
<li>在JavaScript中也是如此,使用const修饰的标识符为常量,不可再次赋值。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>当我们修饰的标识符不会被再次赋值时,就可以使用const来保证数据的安全性。</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>被赋值的常量不可被再次赋值</li>
<li>在初始化常量时必须赋值</li>
<li>常量定义的对象不能修改,指的是该对象的引用不能修改,对象内的属性值是可以修改的</li>
</ol>
<h1 id="对象字面量的增强写法"><a href="#对象字面量的增强写法" class="headerlink" title="对象字面量的增强写法"></a>对象字面量的增强写法</h1><p><strong>什么叫做字面量?</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line">普通创建对象是这样创建的: const obj &#x3D; new Object()</span><br><span class="line">字面量就是: const obj &#x3D; &#123;&#125;</span><br><span class="line">这个大括号就叫做字面量</span><br></pre></td></tr></table></figure>
<h2 id="属性的增强写法"><a href="#属性的增强写法" class="headerlink" title="属性的增强写法"></a>属性的增强写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    age : age,</span><br><span class="line">    name : name,</span><br><span class="line">    height : height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    age,</span><br><span class="line">    name,</span><br><span class="line">    height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上两种写法最后的结果是等价的</span></span><br></pre></td></tr></table></figure>
<h2 id="函数的增强写法"><a href="#函数的增强写法" class="headerlink" title="函数的增强写法"></a>函数的增强写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    eat()&#123;</span><br><span class="line">		<span class="comment">//方法体        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上两种写法最后的结果是等价的</span></span><br></pre></td></tr></table></figure>
<h1 id="循环语法"><a href="#循环语法" class="headerlink" title="循环语法"></a>循环语法</h1><h2 id="普通for循环"><a href="#普通for循环" class="headerlink" title="普通for循环"></a>普通for循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用for-in-循环"><a href="#使用for-in-循环" class="headerlink" title="使用for  in 循环"></a>使用for  in 循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用for-of循环"><a href="#使用for-of循环" class="headerlink" title="使用for of循环"></a>使用for of循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h1><ul>
<li>使用单引号‘ ’</li>
<li>使用``,相较于‘ ’而言，``可以直接换行，而不用加+号</li>
</ul>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本操作(一)</title>
    <url>/posts/18110.html</url>
    <content><![CDATA[<h1 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h1><h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a>Mustache语法</h2><p>使用双大括号,也就是mustache语法</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name + message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name + <span class="string">&#x27; &#x27;</span> + message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;  &#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;age * <span class="number">2</span>&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;君&#x27;</span>,</span><br><span class="line">      age: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757346/Vue相关/Vue的基本操作/1_uq1zcr.png" alt="运行结果"></p>
<h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><p>不期望某个地方的值是响应式的,就可以使用该指令</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2  v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757514/Vue相关/Vue的基本操作/2_tjrvbj.png" alt="运行结果"></p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;url&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-html=<span class="string">&quot;url&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600757974/Vue相关/Vue的基本操作/3_zn2do2.png" alt="运行结果"></p>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>使用较少,因为不够灵活</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-text=<span class="string">&quot;message&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600758176/Vue相关/Vue的基本操作/4_rortqw.png" alt="运行结果"></p>
<h2 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h2><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600758367/Vue相关/Vue的基本操作/5_xns1np.png" alt="运行结果"></p>
<h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><p>cloak:斗篷</p>
<p>作用:当vue对象未创建时,将会显示v-cloak属性,而当vue对象创建完成以后,属性将自动删除,那么如果vue对象还未创建,可能发生页面上显示这个结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;h2&gt;</span><br></pre></td></tr></table></figure>
<p>而我们并不期望显示这个结果,而是如果当时vue对象未创建,直接不显示就好</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak]&#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-cloak&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果因为该代码的结果图不好表现,所以没有截图</p>
<h1 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h1><h2 id="v-bind指令基本使用"><a href="#v-bind指令基本使用" class="headerlink" title="v-bind指令基本使用"></a>v-bind指令基本使用</h2><p><strong>作用</strong></p>
<p>动态绑定属性</p>
<ul>
<li>比如动态绑定a元素的href属性</li>
<li>比如动态绑定img元素的src属性</li>
</ul>
<p><strong>缩写(语法糖)</strong></p>
<p>:</p>
<p><strong>预期</strong></p>
<p>any(with argument) | Object(without argument)</p>
<p><strong>参数</strong></p>
<p>attrOrProp(optional)</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;img :src=<span class="string">&quot;imgUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    &lt;!--等同于&lt;img v-bind:src=<span class="string">&quot;imgUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        imgUrl: <span class="string">&#x27;https://img30.360buyimg.com/babel/s1180x940_jfs/t1/147101/20/8922/101180/5f685a77Eac4e4d8f/cbc61d2e465fde2c.jpg.webp&#x27;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600760783/Vue相关/Vue的基本操作/6_vfzcbn.png" alt="运行结果"></p>
<h2 id="v-bind动态绑定class"><a href="#v-bind动态绑定class" class="headerlink" title="v-bind动态绑定class"></a>v-bind动态绑定class</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>在:class=”” 中直接使用对象</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>在:class=””中使用方法</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;getClass()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        getClass:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="built_in">this</span>.isActive&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!--请注意,数组内部如果元素加<span class="string">&#x27;&#x27;</span>,会将其当做字符串解析,如果不加<span class="string">&#x27;&#x27;</span>,则会当作变量去查找解析--&gt;</span><br><span class="line">    &lt;!--这样写,那么就不是动态的呢--&gt;</span><br><span class="line">    &lt;h2 :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;isActive=!isActive&quot;</span>&gt;变变变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        active: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">        isActive: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-bind动态绑定style"><a href="#v-bind动态绑定style" class="headerlink" title="v-bind动态绑定style"></a>v-bind动态绑定style</h2><p>多用于组件的在多个地方的自定义的动态设置组件的样式</p>
<h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;key(属性名): value(属性值)&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;!--如果属性值不加单引号,会将属性值当做变量--&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: &#x27;50px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ2 + &#x27;px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;&#123;fontSize: fontSizeZ2 + &#x27;px&#x27;,color: colorZ&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;getStyles()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            fontSizeZ: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">            fontSizeZ2: <span class="number">50</span>,</span><br><span class="line">            colorZ: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getStyles:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>: <span class="built_in">this</span>.fontSizeZ2 + <span class="string">&#x27;px&#x27;</span>,<span class="attr">color</span>: <span class="built_in">this</span>.colorZ&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924141740.png" alt="运行结果"></p>
<h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;[baseStyle]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            baseStyle: &#123;</span><br><span class="line">                color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                fontSize: <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924141657.png" alt="运行结果"></p>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。模板是为了描述视图的结构。在模板中放入太多的逻辑会让模板过重且难以维护。这就是为什么 Vue.js 将绑定表达式限制为一个表达式。如果需要多于一个表达式的逻辑，应当使用<strong>计算属性</strong>。</p>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>拼接两个变量</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message + <span class="string">&#x27; &#x27;</span> + message2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125; &#123;&#123;message2&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;getAllMessage()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;allMessage&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">            message2: <span class="string">&#x27;Bye,Vue&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getAllMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 计算属性,给函数取名称时最好按照变量的命名方式</span></span><br><span class="line">        computed: &#123;</span><br><span class="line">            allMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924163151.png" alt="运行结果"></p>
<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>计算一个数组里面,所有书籍对象的总价格</p>
<p><strong>代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;总价格: &#123;&#123;totalPrice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            books: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;101&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;Java&#x27;</span>,</span><br><span class="line">                    price: <span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;102&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">                    price: <span class="number">100</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;103&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;C++&#x27;</span>,</span><br><span class="line">                    price: <span class="number">400</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;104&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;Python&#x27;</span>,</span><br><span class="line">                    price: <span class="number">300</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 遍历的三种方式</span></span><br><span class="line">                <span class="comment">//第一种</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span><br><span class="line">                    total += <span class="built_in">this</span>.books[i].price;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第二种</span></span><br><span class="line">               <span class="comment">/* for (let i in this.books) &#123;</span></span><br><span class="line"><span class="comment">                    total += this.books[i].price;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="comment">//第三种</span></span><br><span class="line">               <span class="comment">/* for (let book of this.books) &#123;</span></span><br><span class="line"><span class="comment">                    total += book.price;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="keyword">return</span> total;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200924164456.png" alt="运行结果"></p>
<h2 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h2><p>计算属性一般都是只读属性,所以只有get方法,因为只有get方法,所以可以简写</p>
<p>而这又解释了为什么在调用计算属性的时候不用加()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        message2: <span class="string">&#x27;Bye,Vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        <span class="comment">// 简写</span></span><br><span class="line">        <span class="comment">// allMessage: function () &#123;</span></span><br><span class="line">        <span class="comment">//     return this.message+ &#x27; &#x27; + this.message2</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完整写法</span></span><br><span class="line">        <span class="comment">// 计算属性一般是没有set方法的,只读属性</span></span><br><span class="line">         allMessage: &#123;</span><br><span class="line">             get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.message + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.message2;</span><br><span class="line">             &#125;,</span><br><span class="line">             set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">const</span> messages = newValue.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                 <span class="built_in">this</span>.message = messages[<span class="number">0</span>];</span><br><span class="line">                 <span class="built_in">this</span>.message2 = messages[<span class="number">1</span>];</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="计算属性和Methods的对比"><a href="#计算属性和Methods的对比" class="headerlink" title="计算属性和Methods的对比"></a>计算属性和Methods的对比</h2><ul>
<li>methods方法和computed计算属性，两种方式的最终结果确实是完全相同</li>
<li>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数。</li>
<li>methods方法，每当触发重新渲染时，调用方法将总会再次执行函数。</li>
<li>对于任何复杂逻辑，你都应当使用计算属性</li>
</ul>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="v-on介绍"><a href="#v-on介绍" class="headerlink" title="v-on介绍"></a>v-on介绍</h2><ul>
<li>作用: 绑定事件监听器</li>
<li>缩写: @</li>
<li>预期: Function | Inline Statement | Object</li>
<li>参数: event</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;counter++&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;counter--&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hello,Vue&#x27;</span>,</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        increment()&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter++;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement()&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h2><p>当通过methods中定义方法,以供@click调用时,需要<strong>注意参数问题:</strong></p>
<ul>
<li>情况一: 如果该方法不需要额外参数,那么方法后的()可以不添加。<ul>
<li>但是需要注意: 如果方法本身中有一个参数,那么会默认将原生事件event参数传递进去。</li>
</ul>
</li>
<li>情况二: 如果需要同时传入某个参数,同时需要event时,可以通过$event传入事件。</li>
</ul>
<p><strong>代码:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!--事件调用的方法没有参数--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn1click&quot;</span>&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn1click()&quot;</span>&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    -----------------------------------------------------</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;!--在事件定义时,写函数时省略了小括号,但是方法本身是需要一个参数的,这个时候vue</span><br><span class="line">    会默认将浏览器产生的event事件对象作为参数传入到方法--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click(&#x27;test&#x27;)&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click()&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn2click&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    ------------------------------------------------------</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;!--方法定义时,我们需要event对象,同时又需要其他参数--&gt;</span><br><span class="line">    &lt;!--在调用方法时,如何手动的获取到浏览器产生的event对象: $event--&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click()&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click(&#x27;test&#x27;)&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;btn3click(&#x27;test&#x27;, $event)&quot;</span>&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    ------------------------------------------------------</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;Hello,Vue&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btn1click() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn1Click&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            btn2click(event) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn2Click&quot;</span> + <span class="string">&quot;-----&quot;</span> + event);</span><br><span class="line">            &#125;,</span><br><span class="line">            btn3click(option,event)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;btn3wuClick&quot;</span> + <span class="string">&quot;-----option:&quot;</span> + option+<span class="string">&quot;------event:&quot;</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果:</strong></p>
<p><img src="https://gitee.com/junpzx/blog-img/raw/master//img/20200928163634.png" alt="运行结果"></p>
<p><strong>注意:如果方法需要参数,传入的参数为String类型,那么需要加上<code>&#39; &#39;</code>,如果不加的话,vue会将其当做变量去data中进行查找,如果查找不到将会报错</strong></p>
<h2 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h2><ul>
<li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li>
<li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li>
<li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li>
<li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li>
<li><code>.native</code> - 监听组件根元素的原生事件。</li>
<li><code>.once</code> - 只触发一次回调。</li>
<li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li>
<li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li>
<li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li>
<li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li>
</ul>
<p><strong>示例:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; red: isRed &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: size + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">&quot;someThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="v-on事件"><a href="#v-on事件" class="headerlink" title="v-on事件"></a>v-on事件</h2><p><a href="https://www.junpzx.cn/2020/09/28/JavaScript%E4%BA%8B%E4%BB%B6/#more">点击查看</a></p>
<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><h2 id="v-model介绍"><a href="#v-model介绍" class="headerlink" title="v-model介绍"></a>v-model介绍</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<blockquote>
<p><strong>注意</strong>：<code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
</blockquote>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li>
</ul>
<blockquote>
<p><strong>注意</strong>：对于需要使用<a href="https://zh.wikipedia.org/wiki/输入法">输入法</a> (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 <code>input</code> 事件。</p>
</blockquote>
<h2 id="v-model基本使用"><a href="#v-model基本使用" class="headerlink" title="v-model基本使用"></a>v-model基本使用</h2><h3 id="文本（input）"><a href="#文本（input）" class="headerlink" title="文本（input）"></a>文本（input）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多行文本（textarea）"><a href="#多行文本（textarea）" class="headerlink" title="多行文本（textarea）"></a>多行文本（textarea）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：在文本区域插值 (<code>&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</p>
</blockquote>
<h3 id="复选框（checkbox）"><a href="#复选框（checkbox）" class="headerlink" title="复选框（checkbox）"></a>复选框（checkbox）</h3><h4 id="单个复选框绑定到boolean值："><a href="#单个复选框绑定到boolean值：" class="headerlink" title="单个复选框绑定到boolean值："></a>单个复选框绑定到boolean值：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多个复选框，绑定到同一个数组："><a href="#多个复选框，绑定到同一个数组：" class="headerlink" title="多个复选框，绑定到同一个数组："></a>多个复选框，绑定到同一个数组：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="单选按钮（radio）"><a href="#单选按钮（radio）" class="headerlink" title="单选按钮（radio）"></a>单选按钮（radio）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    picked: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="选择框（select）"><a href="#选择框（select）" class="headerlink" title="选择框（select）"></a>选择框（select）</h3><h4 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p>
</blockquote>
<h4 id="多选时-绑定到一个数组-："><a href="#多选时-绑定到一个数组-：" class="headerlink" title="多选时 (绑定到一个数组)："></a>多选时 (绑定到一个数组)：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-6&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>用 <code>v-for</code> 渲染的动态选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    options: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;One&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Two&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Three&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是有时我们可能想把值绑定到 Vue 实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，并且这个 property 的值可以不是字符串。</p>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">true-value</span>=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">false-value</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment">// 当没有选中时</span></span><br><span class="line">vm.toggle === <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p>
</blockquote>
<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>
<h3 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; &#x27;object&#x27;</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h3><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件<em>之后</em>进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h3><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门</title>
    <url>/posts/58210.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么?"></a>Vue.js是什么?</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h2 id="Vue是一个渐进式框架-什么是渐进式的呢"><a href="#Vue是一个渐进式框架-什么是渐进式的呢" class="headerlink" title="Vue是一个渐进式框架,什么是渐进式的呢?"></a>Vue是一个渐进式框架,什么是渐进式的呢?</h2><ul>
<li>渐进式意味着你可以将Vue作为你应用的一部分嵌入其中,带来更丰富的交互体验</li>
<li>或者如果你希望将更多的业务逻辑使用Vue实现,那么Vue的核心库以及其生态系统</li>
<li>比如Code+Vue-router+Vuex,也可以满足你各种各样的需求</li>
</ul>
<h2 id="Vue有很多特点和Web开发中常用的高级功能"><a href="#Vue有很多特点和Web开发中常用的高级功能" class="headerlink" title="Vue有很多特点和Web开发中常用的高级功能:"></a>Vue有很多特点和Web开发中常用的高级功能:</h2><ul>
<li>解耦视图和数据</li>
<li>可复用组件</li>
<li>前端路由技术</li>
<li>状态管理</li>
<li>虚拟DOM</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>直接CDN导入(CDN会选择距离最近的服务器进行下载,会提高下载效率)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本,包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 生产环境版本,优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载和引入</p>
<p>开发环境   <a href="https://vue.js.org/js/vue.js">https://vue.js.org/js/vue.js</a></p>
<p>生产环境   <a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p>
</li>
<li><p>npm安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Vue的基本使用"><a href="#Vue的基本使用" class="headerlink" title="Vue的基本使用"></a>Vue的基本使用</h1><h2 id="案例一-Hello-Vue"><a href="#案例一-Hello-Vue" class="headerlink" title="案例一:Hello Vue"></a>案例一:Hello Vue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let用于修饰变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// const用于修饰常量</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&quot;vue&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 编程范式: 声明式编程</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//用于挂载要管理的元素</span></span><br><span class="line">        data: &#123; <span class="comment">// 定义数据</span></span><br><span class="line">            message: <span class="string">&#x27;你好呀,pzx!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用js的做法(编程范式: 命令式编程)</span></span><br><span class="line">    <span class="comment">//1.创建div元素,设置id属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义变量叫message</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.将message变量放在前面的div元素中显示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.修改message的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.将message的值重新赋值给div</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600669908/Vue相关/Vue入门/1_wsql5b.png" alt="运行结果"></p>
<p><strong>代码做了什么事情:</strong></p>
<ol>
<li>首先创建了一个Vue对象</li>
<li>创建Vue对象的时候,传入了一些options:{}<ul>
<li>{}中包含了el属性:该属性决定了这个Vue对象挂载到哪一个元素上</li>
<li>{}中包含了data属性:该属性通常会存储一些数据<ul>
<li>这些数据可以是我们直接定义出来的,比如像上面那样</li>
<li>也可能是来自网络,从服务器加载出来的</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="案例二-Vue的列表显示"><a href="#案例二-Vue的列表显示" class="headerlink" title="案例二:Vue的列表显示"></a>案例二:Vue的列表显示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in tags&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            tags: [<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600671118/Vue相关/Vue入门/2_b7haeu.png" alt="运行结果"></p>
<p>这个地方主要使用<strong>v-for</strong>指令,而且它还是响应式的</p>
<ul>
<li>也就是当数组中的数据发生变化时,界面会自动改变</li>
</ul>
<h2 id="案例三-计数器"><a href="#案例三-计数器" class="headerlink" title="案例三:计数器"></a>案例三:计数器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!--    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;!--    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter-1 &lt; 0 ? counter=0 : counter--;&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;add&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;subtraction&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;yi</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.counter++;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;+已被点击&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            subtraction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.counter<span class="number">-1</span> &lt; <span class="number">0</span>?<span class="built_in">this</span>.counter=<span class="number">0</span>:<span class="built_in">this</span>.counter--;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;-已被点击&quot;</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码代码的执行结果为:</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600674786/Vue相关/Vue入门/3_dqgp6p.png" alt="运行结果"></p>
<p><strong>新的属性: methods,该属性用于在Vue对象中定义方法</strong></p>
<p><strong>新的指令: @click(等同于v-on:click,@click为前面的语法糖),该指令用于监听某个元素的点击事件,并且需要指定当发生点击时,执行的方法(方法通常是methods中定义的方法)</strong></p>]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA、WebStrom最新版破解教程</title>
    <url>/posts/58324.html</url>
    <content><![CDATA[<h1 id="激活方法"><a href="#激活方法" class="headerlink" title="激活方法"></a>激活方法</h1><h2 id="1、下载完成后，双击-ideaIU-2020-2-exe-打开安装软件；"><a href="#1、下载完成后，双击-ideaIU-2020-2-exe-打开安装软件；" class="headerlink" title="1、下载完成后，双击 ideaIU-2020.2.exe,打开安装软件；"></a>1、下载完成后，双击 <code>ideaIU-2020.2.exe</code>,打开安装软件；</h2><blockquote>
<p>PS: 确保电脑没有安装老版本软件，如有请卸载。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/1_m4b8on.png" alt=""></p>
<h2 id="2、-安装目录选择；"><a href="#2、-安装目录选择；" class="headerlink" title="2、 安装目录选择；"></a><strong>2、</strong> 安装目录选择；</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/2_juogad.png" alt=""></p>
<h2 id="3、-按自己电脑配置勾选："><a href="#3、-按自己电脑配置勾选：" class="headerlink" title="3、 按自己电脑配置勾选："></a><strong>3、</strong> 按自己电脑配置勾选：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/3_cewijo.png" alt=""></p>
<h2 id="4、-点击-next-安心等待其安装完成："><a href="#4、-点击-next-安心等待其安装完成：" class="headerlink" title="4、 点击 next, 安心等待其安装完成："></a><strong>4、</strong> 点击 <code>next</code>, 安心等待其安装完成：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511958/idea、webstorm最新版破解教程/4_erf7vj.png" alt=""></p>
<h2 id="5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件"><a href="#5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件" class="headerlink" title="5、 安装完成后，勾选 Run IntelliJ IDEA，点击 finish 运行软件:"></a><strong>5、</strong> 安装完成后，勾选 <code>Run IntelliJ IDEA</code>，点击 <code>finish</code> 运行软件:</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/5_pxaqbd.png" alt=""></p>
<h2 id="6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate"><a href="#6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate" class="headerlink" title="6、 会先弹出一个注册框，勾选 Evaluate for free, 点击 Evaluate:"></a><strong>6、</strong> 会先弹出一个注册框，勾选 <code>Evaluate for free</code>, 点击 <code>Evaluate</code>:</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/6_l7v8mh.png" alt=""></p>
<h2 id="7、-2020-版本文件夹中的激活补丁破解补丁拖入IDEA-界面中"><a href="#7、-2020-版本文件夹中的激活补丁破解补丁拖入IDEA-界面中" class="headerlink" title="7、 2020 版本文件夹中的激活补丁破解补丁拖入IDEA 界面中"></a><strong>7、</strong> 2020 版本文件夹中的激活补丁<em><a href="https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg">破解补丁</a></em>拖入IDEA 界面中</h2><p>下载链接：<a href="https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg">https://pan.baidu.com/s/1uFKQ9au7mGENR2IguG9NHg</a></p>
<p>提取码：0000</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511961/idea、webstorm最新版破解教程/7_o7c2z1.png" alt=""></p>
<p> <strong>补丁，拖不进去，请重启 IDEA ，新建一个Java 项目，写一个空的 main 方法，再次试试</strong></p>
<p> <strong>注意：激活补丁，拖进去之后，激活补丁的位置不要更换，不要删除。否则激活之后还会失效，</strong></p>
<p> <strong>注意：激活补丁，拖进去，等于是程序，帮你去写一个激活补丁的位置，你换补丁jar位置，或者，删除补丁jar，就找不到激活补丁了</strong></p>
<h2 id="8、拖入补丁后会弹框，点击-restart-重启-idea："><a href="#8、拖入补丁后会弹框，点击-restart-重启-idea：" class="headerlink" title="8、拖入补丁后会弹框，点击 restart 重启 idea："></a>8、拖入补丁后会弹框，点击 <code>restart</code> 重启 <strong>idea</strong>：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/8_ttpxq1.png" alt=""></p>
<h2 id="9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装："><a href="#9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装：" class="headerlink" title="9、 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 Activation Code，通过注册码来激活，点击为IDEA安装："></a>9、 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 <code>Activation Code</code>，通过注册码来激活，点击<code>为IDEA安装</code>：</h2><p><strong>安装参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HbVMaxqQrTt4UvDUk8fhyFT7uRdv48bqJsQMwVFp53YH9PZC9l+ZxAgnA60cLwwhURw&#x2F;e4DcZZtle4tQzur4yWRk35qghES4JLFlmKty&#x2F;UNiYh6RZyXeCNPTCvIqxT9HR2YKqQT93be6AfLTcbJwPSLO201g+HbMbg6+aK1MUJI</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511959/idea、webstorm最新版破解教程/10_skts9u.png" alt=""></p>
<h2 id="10、-点击是，重启-IDEA-即可"><a href="#10、-点击是，重启-IDEA-即可" class="headerlink" title="10、 点击是，重启 IDEA 即可"></a><strong>10、</strong> 点击<code>是</code>，重启 <strong>IDEA</strong> 即可</h2><h1 id="验证是否激活成功"><a href="#验证是否激活成功" class="headerlink" title="验证是否激活成功"></a>验证是否激活成功</h1><p>验证步骤如下：</p>
<h2 id="1、-进入-IDEA-界面后，点击-Help-gt-Register-查看："><a href="#1、-进入-IDEA-界面后，点击-Help-gt-Register-查看：" class="headerlink" title="1、 进入 IDEA 界面后，点击 Help -&gt; Register 查看："></a><strong>1、</strong> 进入 <strong>IDEA</strong> 界面后，点击 <code>Help</code> -&gt; <code>Register</code> 查看：</h2><p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600511960/idea、webstorm最新版破解教程/11_sbvbve.png" alt=""></p>]]></content>
      <categories>
        <category>激活教程</category>
      </categories>
      <tags>
        <tag>Idea</tag>
        <tag>WebStorm</tag>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo+GitHub 搭建个人免费博客教程</title>
    <url>/posts/14253.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>
<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>
<p>此博客转载至 : <a href="https://zhuanlan.zhihu.com/p/60578464">知乎-“crystal”</a></p>
<h1 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h1><h2 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h2><ul>
<li><a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages">What is GitHub Pages? - GitHub Help</a></li>
</ul>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h2><ul>
<li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li>
</ul>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h2 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h2><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/1_sfumsc.jpg" alt="Hexo+GitHub Pages发文流程"></p>
<h2 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h2><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>
<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>
<h1 id="三、安装教程"><a href="#三、安装教程" class="headerlink" title="三、安装教程"></a>三、安装教程</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><h3 id="1-1-注意事项"><a href="#1-1-注意事项" class="headerlink" title="1.1 注意事项"></a>1.1 注意事项</h3><ul>
<li>输入代码时，核对准确，最好切换成英文输入法；</li>
<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>
<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>
<li>小白请严格按步骤进行，不要跳！</li>
</ul>
<h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600399124/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/10_wlxyrv.jpg" alt="查看版本信息"></p>
<h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2.连接 Github"></a>2.连接 Github</h2><p>使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>
<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/2_xkmsjc.jpg" alt="设置SSH keys"></p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/3_npv1ub.jpg" alt="验证连接"></p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3.创建 Github Pages 仓库"></a>3.创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/4_vzys4g.jpg" alt="创建仓库"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4.本地安装 Hexo 博客程序"></a>4.本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1 安装 Hexo"></a>4.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/5_bjyr9t.jpg" alt="安装Hexo命令"></p>
<h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2 Hexo 初始化和本地预览"></a>4.2 Hexo 初始化和本地预览</h3><p><strong>初始化并安装所需组件：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>
<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>
<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398980/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/6_q9rdks.jpg" alt="预览"></p>
<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>
<p>Hexo 博客文件夹目录结构如下：</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/7_sp5gdj.jpg" alt=""></p>
<h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5.部署 Hexo 到 GitHub Pages"></a>5.部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6.绑定域名（可选）"></a>6.绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>
<p>我们使用 <a href="https://homenew.console.aliyun.com/">阿里云</a> 进行注册,如果是新用户的话,com域名差不多50RMB左右,cn域名10RMB左右。</p>
<h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="6.1 域名注册和解析"></a>6.1 域名注册和解析</h3><ul>
<li>域名注册和解析教程：</li>
</ul>
<p>在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398236/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE_hjjrkx.png" alt=""></p>
<h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="6.2 绑定域名到 Hexo 博客"></a>6.2 绑定域名到 Hexo 博客</h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com，保存名称为">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>
<p>清除缓存等文件并重新发布网站：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>
<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>
<h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="6.3 开启 HTTPS"></a>6.3 开启 HTTPS</h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/8_udy9jz.jpg" alt="开启Https"></p>
<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>
<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>
<hr>
<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>
<h3 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p>
<p>注意：冒号后要加一个空格！</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Hexo-设置显示文章摘要，首页不显示全文"><a href="#Hexo-设置显示文章摘要，首页不显示全文" class="headerlink" title="Hexo 设置显示文章摘要，首页不显示全文"></a>Hexo 设置显示文章摘要，首页不显示全文</h3><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `` 进行分段。</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>
<p><img src="https://res.cloudinary.com/junpzx/image/upload/v1600398979/%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/9_vgrnk5.jpg" alt="查看更多"></p>
<h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h3><p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>
<h3 id="修改并部署后没有效果"><a href="#修改并部署后没有效果" class="headerlink" title="修改并部署后没有效果"></a>修改并部署后没有效果</h3><p>使用 <code>hexo clean</code> 清理后重新部署。</p>
<h3 id="开启-HTTPS-后访问网站显示连接不安全？"><a href="#开启-HTTPS-后访问网站显示连接不安全？" class="headerlink" title="开启 HTTPS 后访问网站显示连接不安全？"></a>开启 HTTPS 后访问网站显示连接不安全？</h3><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>
<h3 id="Mac-安装-Hexo-报错无法安装"><a href="#Mac-安装-Hexo-报错无法安装" class="headerlink" title="Mac 安装 Hexo 报错无法安装"></a>Mac 安装 Hexo 报错无法安装</h3><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>
<h3 id="npm-下载速度慢，甚至完全没反应"><a href="#npm-下载速度慢，甚至完全没反应" class="headerlink" title="npm 下载速度慢，甚至完全没反应"></a>npm 下载速度慢，甚至完全没反应</h3><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>
<p>临时更换方法：在 npm 安装命令后面加上：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>
<h3 id="Hexo命令报以下错误"><a href="#Hexo命令报以下错误" class="headerlink" title="Hexo命令报以下错误"></a>Hexo命令报以下错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.js:35 throw new TypeError(&#39;Console expects a writable stream instance&#39;);</span><br></pre></td></tr></table></figure>
<p>该错误为nodejs的版本不够高,需要更换成最新版!</p>
<h1 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h1><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>
<p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p>]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
